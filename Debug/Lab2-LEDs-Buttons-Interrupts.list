
Lab2-LEDs-Buttons-Interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a48  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008bd0  08008bd0  00009bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bec  08008bec  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008bec  08008bec  00009bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bf4  08008bf4  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf4  08008bf4  00009bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bf8  08008bf8  00009bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008bfc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a20  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a9c  20000a9c  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c95  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038ca  00000000  00000000  0001ed41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00022610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d32  00000000  00000000  00023768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002348f  00000000  00000000  0002449a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b9a  00000000  00000000  00047929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbafe  00000000  00000000  0005e4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129fc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b34  00000000  00000000  0012a004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0012eb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008bb8 	.word	0x08008bb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008bb8 	.word	0x08008bb8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	80fb      	strh	r3, [r7, #6]
	  led_mode++;
 80004fe:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	3301      	adds	r3, #1
 8000504:	4a06      	ldr	r2, [pc, #24]	@ (8000520 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000506:	6013      	str	r3, [r2, #0]
	  led_mode %= 4;
 8000508:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <HAL_GPIO_EXTI_Callback+0x2c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f003 0303 	and.w	r3, r3, #3
 8000510:	4a03      	ldr	r2, [pc, #12]	@ (8000520 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	2000018c 	.word	0x2000018c

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fc4c 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f856 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f952 	bl	80007d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000534:	f000 f8bc 	bl	80006b0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000538:	f000 f8e8 	bl	800070c <MX_I2S3_Init>
  MX_SPI1_Init();
 800053c:	f000 f916 	bl	800076c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000540:	f007 fef6 	bl	8008330 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(FQ_MS);
 8000544:	20c8      	movs	r0, #200	@ 0xc8
 8000546:	f000 fcaf 	bl	8000ea8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000550:	4820      	ldr	r0, [pc, #128]	@ (80005d4 <main+0xb0>)
 8000552:	f000 ff7b 	bl	800144c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800055c:	481d      	ldr	r0, [pc, #116]	@ (80005d4 <main+0xb0>)
 800055e:	f000 ff75 	bl	800144c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000568:	481a      	ldr	r0, [pc, #104]	@ (80005d4 <main+0xb0>)
 800056a:	f000 ff6f 	bl	800144c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000574:	4817      	ldr	r0, [pc, #92]	@ (80005d4 <main+0xb0>)
 8000576:	f000 ff69 	bl	800144c <HAL_GPIO_WritePin>
	  HAL_Delay(FQ_MS);
 800057a:	20c8      	movs	r0, #200	@ 0xc8
 800057c:	f000 fc94 	bl	8000ea8 <HAL_Delay>

	  if (led_mode == 0) {
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <main+0xb4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d106      	bne.n	8000596 <main+0x72>
		  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800058e:	4811      	ldr	r0, [pc, #68]	@ (80005d4 <main+0xb0>)
 8000590:	f000 ff5c 	bl	800144c <HAL_GPIO_WritePin>
 8000594:	e01b      	b.n	80005ce <main+0xaa>
	  }
	  else if (led_mode == 1) {
 8000596:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <main+0xb4>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d106      	bne.n	80005ac <main+0x88>
		  HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005a4:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <main+0xb0>)
 80005a6:	f000 ff51 	bl	800144c <HAL_GPIO_WritePin>
 80005aa:	e010      	b.n	80005ce <main+0xaa>
	  }
	  else if (led_mode == 2) {
 80005ac:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <main+0xb4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	d106      	bne.n	80005c2 <main+0x9e>
		  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ba:	4806      	ldr	r0, [pc, #24]	@ (80005d4 <main+0xb0>)
 80005bc:	f000 ff46 	bl	800144c <HAL_GPIO_WritePin>
 80005c0:	e005      	b.n	80005ce <main+0xaa>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005c8:	4802      	ldr	r0, [pc, #8]	@ (80005d4 <main+0xb0>)
 80005ca:	f000 ff3f 	bl	800144c <HAL_GPIO_WritePin>
	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005ce:	f007 fed5 	bl	800837c <MX_USB_HOST_Process>
	  HAL_Delay(FQ_MS);
 80005d2:	e7b7      	b.n	8000544 <main+0x20>
 80005d4:	40020c00 	.word	0x40020c00
 80005d8:	2000018c 	.word	0x2000018c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	@ 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f008 fa56 	bl	8008a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	4b28      	ldr	r3, [pc, #160]	@ (80006a8 <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	4a27      	ldr	r2, [pc, #156]	@ (80006a8 <SystemClock_Config+0xcc>)
 800060a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000610:	4b25      	ldr	r3, [pc, #148]	@ (80006a8 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <SystemClock_Config+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <SystemClock_Config+0xd0>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000638:	2301      	movs	r3, #1
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800063c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000640:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	2302      	movs	r3, #2
 8000644:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800064c:	2308      	movs	r3, #8
 800064e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000650:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000654:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000656:	2302      	movs	r3, #2
 8000658:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800065a:	2307      	movs	r3, #7
 800065c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fe1a 	bl	800429c <HAL_RCC_OscConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800066e:	f000 f9b9 	bl	80009e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2302      	movs	r3, #2
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800067e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000688:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2105      	movs	r1, #5
 8000690:	4618      	mov	r0, r3
 8000692:	f004 f87b 	bl	800478c <HAL_RCC_ClockConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800069c:	f000 f9a2 	bl	80009e4 <Error_Handler>
  }
}
 80006a0:	bf00      	nop
 80006a2:	3750      	adds	r7, #80	@ 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006b6:	4a13      	ldr	r2, [pc, #76]	@ (8000704 <MX_I2C1_Init+0x54>)
 80006b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ba:	4b11      	ldr	r3, [pc, #68]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006bc:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <MX_I2C1_Init+0x58>)
 80006be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ec:	4804      	ldr	r0, [pc, #16]	@ (8000700 <MX_I2C1_Init+0x50>)
 80006ee:	f002 fff1 	bl	80036d4 <HAL_I2C_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f8:	f000 f974 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000098 	.word	0x20000098
 8000704:	40005400 	.word	0x40005400
 8000708:	000186a0 	.word	0x000186a0

0800070c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000710:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <MX_I2S3_Init+0x54>)
 8000712:	4a14      	ldr	r2, [pc, #80]	@ (8000764 <MX_I2S3_Init+0x58>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000716:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_I2S3_Init+0x54>)
 8000718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800071c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <MX_I2S3_Init+0x54>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000724:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_I2S3_Init+0x54>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <MX_I2S3_Init+0x54>)
 800072c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000730:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000732:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <MX_I2S3_Init+0x54>)
 8000734:	4a0c      	ldr	r2, [pc, #48]	@ (8000768 <MX_I2S3_Init+0x5c>)
 8000736:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_I2S3_Init+0x54>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800073e:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <MX_I2S3_Init+0x54>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000744:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_I2S3_Init+0x54>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_I2S3_Init+0x54>)
 800074c:	f003 f906 	bl	800395c <HAL_I2S_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000756:	f000 f945 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000ec 	.word	0x200000ec
 8000764:	40003c00 	.word	0x40003c00
 8000768:	00017700 	.word	0x00017700

0800076c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_SPI1_Init+0x64>)
 8000772:	4a18      	ldr	r2, [pc, #96]	@ (80007d4 <MX_SPI1_Init+0x68>)
 8000774:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_SPI1_Init+0x64>)
 8000778:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800077c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077e:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_SPI1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_SPI1_Init+0x64>)
 8000798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800079c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_SPI1_Init+0x64>)
 80007b8:	220a      	movs	r2, #10
 80007ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <MX_SPI1_Init+0x64>)
 80007be:	f004 fb33 	bl	8004e28 <HAL_SPI_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007c8:	f000 f90c 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000134 	.word	0x20000134
 80007d4:	40013000 	.word	0x40013000

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	@ 0x30
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
 80007f2:	4b76      	ldr	r3, [pc, #472]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a75      	ldr	r2, [pc, #468]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b73      	ldr	r3, [pc, #460]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	61bb      	str	r3, [r7, #24]
 8000808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	4b6f      	ldr	r3, [pc, #444]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a6e      	ldr	r2, [pc, #440]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b6c      	ldr	r3, [pc, #432]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b68      	ldr	r3, [pc, #416]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a67      	ldr	r2, [pc, #412]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b65      	ldr	r3, [pc, #404]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b61      	ldr	r3, [pc, #388]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a60      	ldr	r2, [pc, #384]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b5e      	ldr	r3, [pc, #376]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b5a      	ldr	r3, [pc, #360]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a59      	ldr	r2, [pc, #356]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b57      	ldr	r3, [pc, #348]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b53      	ldr	r3, [pc, #332]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a52      	ldr	r2, [pc, #328]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b50      	ldr	r3, [pc, #320]	@ (80009cc <MX_GPIO_Init+0x1f4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0308 	and.w	r3, r3, #8
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2108      	movs	r1, #8
 800089a:	484d      	ldr	r0, [pc, #308]	@ (80009d0 <MX_GPIO_Init+0x1f8>)
 800089c:	f000 fdd6 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2101      	movs	r1, #1
 80008a4:	484b      	ldr	r0, [pc, #300]	@ (80009d4 <MX_GPIO_Init+0x1fc>)
 80008a6:	f000 fdd1 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 80008aa:	2200      	movs	r2, #0
 80008ac:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008b0:	4849      	ldr	r0, [pc, #292]	@ (80009d8 <MX_GPIO_Init+0x200>)
 80008b2:	f000 fdcb 	bl	800144c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008b6:	2308      	movs	r3, #8
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4840      	ldr	r0, [pc, #256]	@ (80009d0 <MX_GPIO_Init+0x1f8>)
 80008ce:	f000 fc21 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	483a      	ldr	r0, [pc, #232]	@ (80009d4 <MX_GPIO_Init+0x1fc>)
 80008ea:	f000 fc13 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ee:	2308      	movs	r3, #8
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008fe:	2305      	movs	r3, #5
 8000900:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4832      	ldr	r0, [pc, #200]	@ (80009d4 <MX_GPIO_Init+0x1fc>)
 800090a:	f000 fc03 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800090e:	2301      	movs	r3, #1
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000912:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000918:	2302      	movs	r3, #2
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	482e      	ldr	r0, [pc, #184]	@ (80009dc <MX_GPIO_Init+0x204>)
 8000924:	f000 fbf6 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000928:	2304      	movs	r3, #4
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4829      	ldr	r0, [pc, #164]	@ (80009e0 <MX_GPIO_Init+0x208>)
 800093c:	f000 fbea 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4820      	ldr	r0, [pc, #128]	@ (80009e0 <MX_GPIO_Init+0x208>)
 800095e:	f000 fbd9 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000962:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000966:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4817      	ldr	r0, [pc, #92]	@ (80009d8 <MX_GPIO_Init+0x200>)
 800097c:	f000 fbca 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000980:	2320      	movs	r3, #32
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4811      	ldr	r0, [pc, #68]	@ (80009d8 <MX_GPIO_Init+0x200>)
 8000994:	f000 fbbe 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000998:	2302      	movs	r3, #2
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <MX_GPIO_Init+0x1f8>)
 80009ae:	f000 fbb1 	bl	8001114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2006      	movs	r0, #6
 80009b8:	f000 fb75 	bl	80010a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009bc:	2006      	movs	r0, #6
 80009be:	f000 fb8e 	bl	80010de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c2:	bf00      	nop
 80009c4:	3730      	adds	r7, #48	@ 0x30
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40020800 	.word	0x40020800
 80009d8:	40020c00 	.word	0x40020c00
 80009dc:	40020000 	.word	0x40020000
 80009e0:	40020400 	.word	0x40020400

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e8:	b672      	cpsid	i
}
 80009ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <Error_Handler+0x8>

080009f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	4a0f      	ldr	r2, [pc, #60]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
 8000a16:	4b09      	ldr	r3, [pc, #36]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	4a08      	ldr	r2, [pc, #32]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a2e:	2007      	movs	r0, #7
 8000a30:	f000 fb2e 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800

08000a40 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a19      	ldr	r2, [pc, #100]	@ (8000ac4 <HAL_I2C_MspInit+0x84>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12c      	bne.n	8000abc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a17      	ldr	r2, [pc, #92]	@ (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a7e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a84:	2312      	movs	r3, #18
 8000a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a90:	2304      	movs	r3, #4
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	4619      	mov	r1, r3
 8000a9a:	480c      	ldr	r0, [pc, #48]	@ (8000acc <HAL_I2C_MspInit+0x8c>)
 8000a9c:	f000 fb3a 	bl	8001114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000aaa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <HAL_I2C_MspInit+0x88>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	@ 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40005400 	.word	0x40005400
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40020400 	.word	0x40020400

08000ad0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08e      	sub	sp, #56	@ 0x38
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a31      	ldr	r2, [pc, #196]	@ (8000bc0 <HAL_I2S_MspInit+0xf0>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d15a      	bne.n	8000bb6 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b00:	2301      	movs	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b04:	23c0      	movs	r3, #192	@ 0xc0
 8000b06:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4618      	mov	r0, r3
 8000b12:	f004 f847 	bl	8004ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b1c:	f7ff ff62 	bl	80009e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	4b27      	ldr	r3, [pc, #156]	@ (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b28:	4a26      	ldr	r2, [pc, #152]	@ (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b30:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	4b20      	ldr	r3, [pc, #128]	@ (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	4a1f      	ldr	r2, [pc, #124]	@ (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a18      	ldr	r2, [pc, #96]	@ (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b68:	4b16      	ldr	r3, [pc, #88]	@ (8000bc4 <HAL_I2S_MspInit+0xf4>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b74:	2310      	movs	r3, #16
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b84:	2306      	movs	r3, #6
 8000b86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480e      	ldr	r0, [pc, #56]	@ (8000bc8 <HAL_I2S_MspInit+0xf8>)
 8000b90:	f000 fac0 	bl	8001114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b94:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ba6:	2306      	movs	r3, #6
 8000ba8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <HAL_I2S_MspInit+0xfc>)
 8000bb2:	f000 faaf 	bl	8001114 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3738      	adds	r7, #56	@ 0x38
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40003c00 	.word	0x40003c00
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40020800 	.word	0x40020800

08000bd0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	@ (8000c54 <HAL_SPI_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <HAL_SPI_MspInit+0x88>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	4a17      	ldr	r2, [pc, #92]	@ (8000c58 <HAL_SPI_MspInit+0x88>)
 8000bfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	@ (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <HAL_SPI_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c2a:	23e0      	movs	r3, #224	@ 0xe0
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <HAL_SPI_MspInit+0x8c>)
 8000c46:	f000 fa65 	bl	8001114 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	@ 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40013000 	.word	0x40013000
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <NMI_Handler+0x4>

08000c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <MemManage_Handler+0x4>

08000c78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <BusFault_Handler+0x4>

08000c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <UsageFault_Handler+0x4>

08000c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb6:	f000 f8d7 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 fbdc 	bl	8001480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cd0:	4802      	ldr	r0, [pc, #8]	@ (8000cdc <OTG_FS_IRQHandler+0x10>)
 8000cd2:	f000 feab 	bl	8001a2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000574 	.word	0x20000574

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f007 fedc 	bl	8008acc <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	@ (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20020000 	.word	0x20020000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	20000190 	.word	0x20000190
 8000d48:	20000aa0 	.word	0x20000aa0

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d74:	f7ff ffea 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	@ (8000db0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	@ (8000dbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f007 fe9b 	bl	8008ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da2:	f7ff fbbf 	bl	8000524 <main>
  bx  lr    
 8000da6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000da8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000db4:	08008bfc 	.word	0x08008bfc
  ldr r2, =_sbss
 8000db8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000dbc:	20000a9c 	.word	0x20000a9c

08000dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <HAL_Init+0x40>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <HAL_Init+0x40>)
 8000dda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <HAL_Init+0x40>)
 8000de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f94f 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f808 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fdfa 	bl	80009f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023c00 	.word	0x40023c00

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e10:	4b12      	ldr	r3, [pc, #72]	@ (8000e5c <HAL_InitTick+0x54>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_InitTick+0x58>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f967 	bl	80010fa <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e44:	f000 f92f 	bl	80010a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	@ (8000e64 <HAL_InitTick+0x5c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000004 	.word	0x20000004

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000194 	.word	0x20000194

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	@ (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000194 	.word	0x20000194

08000ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff ffee 	bl	8000e90 <HAL_GetTick>
 8000eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ec0:	d005      	beq.n	8000ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_Delay+0x44>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ece:	bf00      	nop
 8000ed0:	f7ff ffde 	bl	8000e90 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d8f7      	bhi.n	8000ed0 <HAL_Delay+0x28>
  {
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	@ (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	@ (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	@ (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	@ (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	@ (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	@ 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	@ 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800105c:	d301      	bcc.n	8001062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2301      	movs	r3, #1
 8001060:	e00f      	b.n	8001082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001062:	4a0a      	ldr	r2, [pc, #40]	@ (800108c <SysTick_Config+0x40>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106a:	210f      	movs	r1, #15
 800106c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001070:	f7ff ff8e 	bl	8000f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001074:	4b05      	ldr	r3, [pc, #20]	@ (800108c <SysTick_Config+0x40>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <SysTick_Config+0x40>)
 800107c:	2207      	movs	r2, #7
 800107e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	e000e010 	.word	0xe000e010

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff29 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff3e 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff8e 	bl	8000fe4 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5d 	bl	8000f90 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff31 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa2 	bl	800104c <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	@ 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	e16b      	b.n	8001408 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001130:	2201      	movs	r2, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	429a      	cmp	r2, r3
 800114a:	f040 815a 	bne.w	8001402 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	2b01      	cmp	r3, #1
 8001158:	d005      	beq.n	8001166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001162:	2b02      	cmp	r3, #2
 8001164:	d130      	bne.n	80011c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f003 0201 	and.w	r2, r3, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d017      	beq.n	8001204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d123      	bne.n	8001258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	08da      	lsrs	r2, r3, #3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3208      	adds	r2, #8
 8001218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	08da      	lsrs	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3208      	adds	r2, #8
 8001252:	69b9      	ldr	r1, [r7, #24]
 8001254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0203 	and.w	r2, r3, #3
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 80b4 	beq.w	8001402 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b60      	ldr	r3, [pc, #384]	@ (8001420 <HAL_GPIO_Init+0x30c>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001420 <HAL_GPIO_Init+0x30c>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001420 <HAL_GPIO_Init+0x30c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001424 <HAL_GPIO_Init+0x310>)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a52      	ldr	r2, [pc, #328]	@ (8001428 <HAL_GPIO_Init+0x314>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d02b      	beq.n	800133a <HAL_GPIO_Init+0x226>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a51      	ldr	r2, [pc, #324]	@ (800142c <HAL_GPIO_Init+0x318>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d025      	beq.n	8001336 <HAL_GPIO_Init+0x222>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a50      	ldr	r2, [pc, #320]	@ (8001430 <HAL_GPIO_Init+0x31c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d01f      	beq.n	8001332 <HAL_GPIO_Init+0x21e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001434 <HAL_GPIO_Init+0x320>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d019      	beq.n	800132e <HAL_GPIO_Init+0x21a>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001438 <HAL_GPIO_Init+0x324>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d013      	beq.n	800132a <HAL_GPIO_Init+0x216>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4d      	ldr	r2, [pc, #308]	@ (800143c <HAL_GPIO_Init+0x328>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00d      	beq.n	8001326 <HAL_GPIO_Init+0x212>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4c      	ldr	r2, [pc, #304]	@ (8001440 <HAL_GPIO_Init+0x32c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d007      	beq.n	8001322 <HAL_GPIO_Init+0x20e>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4b      	ldr	r2, [pc, #300]	@ (8001444 <HAL_GPIO_Init+0x330>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d101      	bne.n	800131e <HAL_GPIO_Init+0x20a>
 800131a:	2307      	movs	r3, #7
 800131c:	e00e      	b.n	800133c <HAL_GPIO_Init+0x228>
 800131e:	2308      	movs	r3, #8
 8001320:	e00c      	b.n	800133c <HAL_GPIO_Init+0x228>
 8001322:	2306      	movs	r3, #6
 8001324:	e00a      	b.n	800133c <HAL_GPIO_Init+0x228>
 8001326:	2305      	movs	r3, #5
 8001328:	e008      	b.n	800133c <HAL_GPIO_Init+0x228>
 800132a:	2304      	movs	r3, #4
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x228>
 800132e:	2303      	movs	r3, #3
 8001330:	e004      	b.n	800133c <HAL_GPIO_Init+0x228>
 8001332:	2302      	movs	r3, #2
 8001334:	e002      	b.n	800133c <HAL_GPIO_Init+0x228>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_GPIO_Init+0x228>
 800133a:	2300      	movs	r3, #0
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	f002 0203 	and.w	r2, r2, #3
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	4093      	lsls	r3, r2
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800134c:	4935      	ldr	r1, [pc, #212]	@ (8001424 <HAL_GPIO_Init+0x310>)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135a:	4b3b      	ldr	r3, [pc, #236]	@ (8001448 <HAL_GPIO_Init+0x334>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137e:	4a32      	ldr	r2, [pc, #200]	@ (8001448 <HAL_GPIO_Init+0x334>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001384:	4b30      	ldr	r3, [pc, #192]	@ (8001448 <HAL_GPIO_Init+0x334>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a8:	4a27      	ldr	r2, [pc, #156]	@ (8001448 <HAL_GPIO_Init+0x334>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ae:	4b26      	ldr	r3, [pc, #152]	@ (8001448 <HAL_GPIO_Init+0x334>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001448 <HAL_GPIO_Init+0x334>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001448 <HAL_GPIO_Init+0x334>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013fc:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <HAL_GPIO_Init+0x334>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3301      	adds	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	f67f ae90 	bls.w	8001130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	3724      	adds	r7, #36	@ 0x24
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	40013800 	.word	0x40013800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400
 8001430:	40020800 	.word	0x40020800
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40021000 	.word	0x40021000
 800143c:	40021400 	.word	0x40021400
 8001440:	40021800 	.word	0x40021800
 8001444:	40021c00 	.word	0x40021c00
 8001448:	40013c00 	.word	0x40013c00

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001468:	e003      	b.n	8001472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	041a      	lsls	r2, r3, #16
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	619a      	str	r2, [r3, #24]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800148c:	695a      	ldr	r2, [r3, #20]
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d006      	beq.n	80014a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001496:	4a05      	ldr	r2, [pc, #20]	@ (80014ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f828 	bl	80004f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40013c00 	.word	0x40013c00

080014b0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e059      	b.n	8001576 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d106      	bne.n	80014e2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f006 ff85 	bl	80083ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2203      	movs	r2, #3
 80014e6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014f0:	d102      	bne.n	80014f8 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 fd91 	bl	8005024 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7c1a      	ldrb	r2, [r3, #16]
 800150a:	f88d 2000 	strb.w	r2, [sp]
 800150e:	3304      	adds	r3, #4
 8001510:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001512:	f003 fd12 	bl	8004f3a <USB_CoreInit>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2202      	movs	r2, #2
 8001520:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e026      	b.n	8001576 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2101      	movs	r1, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f003 fd89 	bl	8005046 <USB_SetCurrentMode>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2202      	movs	r2, #2
 800153e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e017      	b.n	8001576 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6818      	ldr	r0, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	7c1a      	ldrb	r2, [r3, #16]
 800154e:	f88d 2000 	strb.w	r2, [sp]
 8001552:	3304      	adds	r3, #4
 8001554:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001556:	f003 ff33 	bl	80053c0 <USB_HostInit>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e004      	b.n	8001576 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800157e:	b590      	push	{r4, r7, lr}
 8001580:	b08b      	sub	sp, #44	@ 0x2c
 8001582:	af04      	add	r7, sp, #16
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	4608      	mov	r0, r1
 8001588:	4611      	mov	r1, r2
 800158a:	461a      	mov	r2, r3
 800158c:	4603      	mov	r3, r0
 800158e:	70fb      	strb	r3, [r7, #3]
 8001590:	460b      	mov	r3, r1
 8001592:	70bb      	strb	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001598:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800159a:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d101      	bne.n	80015aa <HAL_HCD_HC_Init+0x2c>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e09d      	b.n	80016e6 <HAL_HCD_HC_Init+0x168>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015b2:	78fa      	ldrb	r2, [r7, #3]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	1a9b      	subs	r3, r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	3319      	adds	r3, #25
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015c6:	78fa      	ldrb	r2, [r7, #3]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	3314      	adds	r3, #20
 80015d6:	787a      	ldrb	r2, [r7, #1]
 80015d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015da:	78fa      	ldrb	r2, [r7, #3]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	3315      	adds	r3, #21
 80015ea:	78fa      	ldrb	r2, [r7, #3]
 80015ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	1a9b      	subs	r3, r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	3326      	adds	r3, #38	@ 0x26
 80015fe:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001602:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	78bb      	ldrb	r3, [r7, #2]
 8001608:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800160c:	b2d8      	uxtb	r0, r3
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	4613      	mov	r3, r2
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3316      	adds	r3, #22
 800161c:	4602      	mov	r2, r0
 800161e:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	4619      	mov	r1, r3
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fba5 	bl	8001d74 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800162a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800162e:	2b00      	cmp	r3, #0
 8001630:	da0a      	bge.n	8001648 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001632:	78fa      	ldrb	r2, [r7, #3]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	3317      	adds	r3, #23
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	e009      	b.n	800165c <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	1a9b      	subs	r3, r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	3317      	adds	r3, #23
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f004 f811 	bl	8005688 <USB_GetHostSpeed>
 8001666:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001668:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800166c:	2b01      	cmp	r3, #1
 800166e:	d10b      	bne.n	8001688 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001670:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001674:	2b01      	cmp	r3, #1
 8001676:	d107      	bne.n	8001688 <HAL_HCD_HC_Init+0x10a>
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d104      	bne.n	8001688 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2bbc      	cmp	r3, #188	@ 0xbc
 8001682:	d901      	bls.n	8001688 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001684:	23bc      	movs	r3, #188	@ 0xbc
 8001686:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001688:	78fa      	ldrb	r2, [r7, #3]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	011b      	lsls	r3, r3, #4
 8001690:	1a9b      	subs	r3, r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	3318      	adds	r3, #24
 8001698:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800169c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800169e:	78fa      	ldrb	r2, [r7, #3]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	b298      	uxth	r0, r3
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	3328      	adds	r3, #40	@ 0x28
 80016b2:	4602      	mov	r2, r0
 80016b4:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	787c      	ldrb	r4, [r7, #1]
 80016c0:	78ba      	ldrb	r2, [r7, #2]
 80016c2:	78f9      	ldrb	r1, [r7, #3]
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016ca:	9301      	str	r3, [sp, #4]
 80016cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	4623      	mov	r3, r4
 80016d4:	f004 f800 	bl	80056d8 <USB_HC_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
	...

080016f0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	70fb      	strb	r3, [r7, #3]
 8001702:	460b      	mov	r3, r1
 8001704:	70bb      	strb	r3, [r7, #2]
 8001706:	4613      	mov	r3, r2
 8001708:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	3317      	adds	r3, #23
 800171a:	78ba      	ldrb	r2, [r7, #2]
 800171c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	3326      	adds	r3, #38	@ 0x26
 800172e:	787a      	ldrb	r2, [r7, #1]
 8001730:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001732:	7c3b      	ldrb	r3, [r7, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d114      	bne.n	8001762 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	1a9b      	subs	r3, r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	332a      	adds	r3, #42	@ 0x2a
 8001748:	2203      	movs	r2, #3
 800174a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800174c:	78fa      	ldrb	r2, [r7, #3]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	3319      	adds	r3, #25
 800175c:	7f3a      	ldrb	r2, [r7, #28]
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	e009      	b.n	8001776 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	1a9b      	subs	r3, r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	332a      	adds	r3, #42	@ 0x2a
 8001772:	2202      	movs	r2, #2
 8001774:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001776:	787b      	ldrb	r3, [r7, #1]
 8001778:	2b03      	cmp	r3, #3
 800177a:	f200 8102 	bhi.w	8001982 <HAL_HCD_HC_SubmitRequest+0x292>
 800177e:	a201      	add	r2, pc, #4	@ (adr r2, 8001784 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001784:	08001795 	.word	0x08001795
 8001788:	0800196d 	.word	0x0800196d
 800178c:	08001859 	.word	0x08001859
 8001790:	080018e3 	.word	0x080018e3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001794:	7c3b      	ldrb	r3, [r7, #16]
 8001796:	2b01      	cmp	r3, #1
 8001798:	f040 80f5 	bne.w	8001986 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800179c:	78bb      	ldrb	r3, [r7, #2]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d12d      	bne.n	80017fe <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017a2:	8b3b      	ldrh	r3, [r7, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d109      	bne.n	80017bc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80017a8:	78fa      	ldrb	r2, [r7, #3]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	333d      	adds	r3, #61	@ 0x3d
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	333d      	adds	r3, #61	@ 0x3d
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10a      	bne.n	80017e8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	332a      	adds	r3, #42	@ 0x2a
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80017e6:	e0ce      	b.n	8001986 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	332a      	adds	r3, #42	@ 0x2a
 80017f8:	2202      	movs	r2, #2
 80017fa:	701a      	strb	r2, [r3, #0]
      break;
 80017fc:	e0c3      	b.n	8001986 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	331a      	adds	r3, #26
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b01      	cmp	r3, #1
 8001812:	f040 80b8 	bne.w	8001986 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	1a9b      	subs	r3, r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	333c      	adds	r3, #60	@ 0x3c
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10a      	bne.n	8001842 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	332a      	adds	r3, #42	@ 0x2a
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
      break;
 8001840:	e0a1      	b.n	8001986 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	332a      	adds	r3, #42	@ 0x2a
 8001852:	2202      	movs	r2, #2
 8001854:	701a      	strb	r2, [r3, #0]
      break;
 8001856:	e096      	b.n	8001986 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d120      	bne.n	80018a0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	333d      	adds	r3, #61	@ 0x3d
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10a      	bne.n	800188a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	332a      	adds	r3, #42	@ 0x2a
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001888:	e07e      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188a:	78fa      	ldrb	r2, [r7, #3]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	332a      	adds	r3, #42	@ 0x2a
 800189a:	2202      	movs	r2, #2
 800189c:	701a      	strb	r2, [r3, #0]
      break;
 800189e:	e073      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018a0:	78fa      	ldrb	r2, [r7, #3]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	1a9b      	subs	r3, r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	333c      	adds	r3, #60	@ 0x3c
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10a      	bne.n	80018cc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	1a9b      	subs	r3, r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	332a      	adds	r3, #42	@ 0x2a
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
      break;
 80018ca:	e05d      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	332a      	adds	r3, #42	@ 0x2a
 80018dc:	2202      	movs	r2, #2
 80018de:	701a      	strb	r2, [r3, #0]
      break;
 80018e0:	e052      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018e2:	78bb      	ldrb	r3, [r7, #2]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d120      	bne.n	800192a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	333d      	adds	r3, #61	@ 0x3d
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	332a      	adds	r3, #42	@ 0x2a
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001912:	e039      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	332a      	adds	r3, #42	@ 0x2a
 8001924:	2202      	movs	r2, #2
 8001926:	701a      	strb	r2, [r3, #0]
      break;
 8001928:	e02e      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	333c      	adds	r3, #60	@ 0x3c
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10a      	bne.n	8001956 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	332a      	adds	r3, #42	@ 0x2a
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
      break;
 8001954:	e018      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	332a      	adds	r3, #42	@ 0x2a
 8001966:	2202      	movs	r2, #2
 8001968:	701a      	strb	r2, [r3, #0]
      break;
 800196a:	e00d      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	332a      	adds	r3, #42	@ 0x2a
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
      break;
 8001980:	e002      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001982:	bf00      	nop
 8001984:	e000      	b.n	8001988 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001986:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001988:	78fa      	ldrb	r2, [r7, #3]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	332c      	adds	r3, #44	@ 0x2c
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	8b39      	ldrh	r1, [r7, #24]
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	1a9b      	subs	r3, r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4403      	add	r3, r0
 80019ac:	3334      	adds	r3, #52	@ 0x34
 80019ae:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	334c      	adds	r3, #76	@ 0x4c
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	3338      	adds	r3, #56	@ 0x38
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	3315      	adds	r3, #21
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	334d      	adds	r3, #77	@ 0x4d
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	4613      	mov	r3, r2
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	3310      	adds	r3, #16
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	4413      	add	r3, r2
 8001a14:	1d19      	adds	r1, r3, #4
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	799b      	ldrb	r3, [r3, #6]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f003 ff88 	bl	8005930 <USB_HC_StartXfer>
 8001a20:	4603      	mov	r3, r0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop

08001a2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f003 fc75 	bl	8005332 <USB_GetMode>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	f040 80fb 	bne.w	8001c46 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f003 fc38 	bl	80052ca <USB_ReadInterrupts>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80f1 	beq.w	8001c44 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 fc2f 	bl	80052ca <USB_ReadInterrupts>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a76:	d104      	bne.n	8001a82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 fc1f 	bl	80052ca <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a96:	d104      	bne.n	8001aa2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001aa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f003 fc0f 	bl	80052ca <USB_ReadInterrupts>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ab2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ab6:	d104      	bne.n	8001ac2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ac0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f003 fbff 	bl	80052ca <USB_ReadInterrupts>
 8001acc:	4603      	mov	r3, r0
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d103      	bne.n	8001ade <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2202      	movs	r2, #2
 8001adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fbf1 	bl	80052ca <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001af2:	d120      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001afc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d113      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b0e:	2110      	movs	r1, #16
 8001b10:	6938      	ldr	r0, [r7, #16]
 8001b12:	f003 fae4 	bl	80050de <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b16:	6938      	ldr	r0, [r7, #16]
 8001b18:	f003 fb13 	bl	8005142 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7a5b      	ldrb	r3, [r3, #9]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d105      	bne.n	8001b30 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fd0c 	bl	8005548 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f006 fcd9 	bl	80084e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fbc5 	bl	80052ca <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b4a:	d102      	bne.n	8001b52 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f001 fd4d 	bl	80035ec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fbb7 	bl	80052ca <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d106      	bne.n	8001b74 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f006 fca2 	bl	80084b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2208      	movs	r2, #8
 8001b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fba6 	bl	80052ca <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b88:	d139      	bne.n	8001bfe <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 f948 	bl	8005e24 <USB_HC_ReadInterrupt>
 8001b94:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e025      	b.n	8001be8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d018      	beq.n	8001be2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bc6:	d106      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	4619      	mov	r1, r3
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f905 	bl	8001dde <HCD_HC_IN_IRQHandler>
 8001bd4:	e005      	b.n	8001be2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4619      	mov	r1, r3
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 ff67 	bl	8002ab0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	3301      	adds	r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	795b      	ldrb	r3, [r3, #5]
 8001bec:	461a      	mov	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d3d3      	bcc.n	8001b9c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 fb61 	bl	80052ca <USB_ReadInterrupts>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b10      	cmp	r3, #16
 8001c10:	d101      	bne.n	8001c16 <HAL_HCD_IRQHandler+0x1ea>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_HCD_IRQHandler+0x1ec>
 8001c16:	2300      	movs	r3, #0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d014      	beq.n	8001c46 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699a      	ldr	r2, [r3, #24]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0210 	bic.w	r2, r2, #16
 8001c2a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f001 fbfe 	bl	800342e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0210 	orr.w	r2, r2, #16
 8001c40:	619a      	str	r2, [r3, #24]
 8001c42:	e000      	b.n	8001c46 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c44:	bf00      	nop
    }
  }
}
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_HCD_Start+0x16>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e013      	b.n	8001c8a <HAL_HCD_Start+0x3e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 fcd0 	bl	8005616 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 f9c1 	bl	8005002 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_HCD_Stop+0x16>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e00d      	b.n	8001cc4 <HAL_HCD_Stop+0x32>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f004 fa23 	bl	8006100 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f003 fc72 	bl	80055c2 <USB_ResetPort>
 8001cde:	4603      	mov	r3, r0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001cf4:	78fa      	ldrb	r2, [r7, #3]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	1a9b      	subs	r3, r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	334c      	adds	r3, #76	@ 0x4c
 8001d04:	781b      	ldrb	r3, [r3, #0]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	1a9b      	subs	r3, r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3338      	adds	r3, #56	@ 0x38
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fcb4 	bl	80056b6 <USB_GetCurrentFrame>
 8001d4e:	4603      	mov	r3, r0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 fc8f 	bl	8005688 <USB_GetHostSpeed>
 8001d6a:	4603      	mov	r3, r0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	331a      	adds	r3, #26
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	331b      	adds	r3, #27
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	3325      	adds	r3, #37	@ 0x25
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	3324      	adds	r3, #36	@ 0x24
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	460b      	mov	r3, r1
 8001de8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fa77 	bl	80052f0 <USB_ReadChInterrupts>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	d11a      	bne.n	8001e42 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e0c:	78fb      	ldrb	r3, [r7, #3]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e18:	461a      	mov	r2, r3
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	334d      	adds	r3, #77	@ 0x4d
 8001e2e:	2207      	movs	r2, #7
 8001e30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	78fa      	ldrb	r2, [r7, #3]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f004 f803 	bl	8005e46 <USB_HC_Halt>
 8001e40:	e09e      	b.n	8001f80 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fa50 	bl	80052f0 <USB_ReadChInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e5a:	d11b      	bne.n	8001e94 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001e5c:	78fb      	ldrb	r3, [r7, #3]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4413      	add	r3, r2
 8001e64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	334d      	adds	r3, #77	@ 0x4d
 8001e80:	2208      	movs	r2, #8
 8001e82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f003 ffda 	bl	8005e46 <USB_HC_Halt>
 8001e92:	e075      	b.n	8001f80 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	78fa      	ldrb	r2, [r7, #3]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fa27 	bl	80052f0 <USB_ReadChInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d11a      	bne.n	8001ee2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001eac:	78fb      	ldrb	r3, [r7, #3]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2308      	movs	r3, #8
 8001ebc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	334d      	adds	r3, #77	@ 0x4d
 8001ece:	2206      	movs	r2, #6
 8001ed0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	4611      	mov	r1, r2
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 ffb3 	bl	8005e46 <USB_HC_Halt>
 8001ee0:	e04e      	b.n	8001f80 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 fa00 	bl	80052f0 <USB_ReadChInterrupts>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efa:	d11b      	bne.n	8001f34 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	334d      	adds	r3, #77	@ 0x4d
 8001f20:	2209      	movs	r2, #9
 8001f22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 ff8a 	bl	8005e46 <USB_HC_Halt>
 8001f32:	e025      	b.n	8001f80 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 f9d7 	bl	80052f0 <USB_ReadChInterrupts>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f48:	2b80      	cmp	r3, #128	@ 0x80
 8001f4a:	d119      	bne.n	8001f80 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001f4c:	78fb      	ldrb	r3, [r7, #3]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f58:	461a      	mov	r2, r3
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	334d      	adds	r3, #77	@ 0x4d
 8001f6e:	2207      	movs	r2, #7
 8001f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 ff63 	bl	8005e46 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f003 f9b1 	bl	80052f0 <USB_ReadChInterrupts>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f98:	d112      	bne.n	8001fc0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 ff4f 	bl	8005e46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fba:	6093      	str	r3, [r2, #8]
 8001fbc:	f000 bd75 	b.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 f991 	bl	80052f0 <USB_ReadChInterrupts>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	f040 8128 	bne.w	800222a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2320      	movs	r3, #32
 8001fea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	331b      	adds	r3, #27
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d119      	bne.n	8002036 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	440b      	add	r3, r1
 8002010:	331b      	adds	r3, #27
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4413      	add	r3, r2
 800201e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	78fa      	ldrb	r2, [r7, #3]
 8002026:	0151      	lsls	r1, r2, #5
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	440a      	add	r2, r1
 800202c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002034:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	799b      	ldrb	r3, [r3, #6]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01b      	beq.n	8002076 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800203e:	78fa      	ldrb	r2, [r7, #3]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3330      	adds	r3, #48	@ 0x30
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	1ac9      	subs	r1, r1, r3
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4403      	add	r3, r0
 8002072:	3338      	adds	r3, #56	@ 0x38
 8002074:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	1a9b      	subs	r3, r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	334d      	adds	r3, #77	@ 0x4d
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	3344      	adds	r3, #68	@ 0x44
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020aa:	461a      	mov	r2, r3
 80020ac:	2301      	movs	r3, #1
 80020ae:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3326      	adds	r3, #38	@ 0x26
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	3326      	adds	r3, #38	@ 0x26
 80020d6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d110      	bne.n	80020fe <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	4611      	mov	r1, r2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f003 feae 	bl	8005e46 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020f6:	461a      	mov	r2, r3
 80020f8:	2310      	movs	r3, #16
 80020fa:	6093      	str	r3, [r2, #8]
 80020fc:	e03d      	b.n	800217a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	3326      	adds	r3, #38	@ 0x26
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d00a      	beq.n	800212a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	3326      	adds	r3, #38	@ 0x26
 8002124:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002126:	2b01      	cmp	r3, #1
 8002128:	d127      	bne.n	800217a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	0151      	lsls	r1, r2, #5
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	440a      	add	r2, r1
 8002140:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002144:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002148:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	334c      	adds	r3, #76	@ 0x4c
 800215a:	2201      	movs	r2, #1
 800215c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	334c      	adds	r3, #76	@ 0x4c
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f006 f9c5 	bl	8008504 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	799b      	ldrb	r3, [r3, #6]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d13b      	bne.n	80021fa <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	3338      	adds	r3, #56	@ 0x38
 8002192:	6819      	ldr	r1, [r3, #0]
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	1a9b      	subs	r3, r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4403      	add	r3, r0
 80021a2:	3328      	adds	r3, #40	@ 0x28
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	440b      	add	r3, r1
 80021a8:	1e59      	subs	r1, r3, #1
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4403      	add	r3, r0
 80021b8:	3328      	adds	r3, #40	@ 0x28
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8470 	beq.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	333c      	adds	r3, #60	@ 0x3c
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	f083 0301 	eor.w	r3, r3, #1
 80021e2:	b2d8      	uxtb	r0, r3
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	333c      	adds	r3, #60	@ 0x3c
 80021f2:	4602      	mov	r2, r0
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	f000 bc58 	b.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	333c      	adds	r3, #60	@ 0x3c
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	f083 0301 	eor.w	r3, r3, #1
 8002212:	b2d8      	uxtb	r0, r3
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	333c      	adds	r3, #60	@ 0x3c
 8002222:	4602      	mov	r2, r0
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	f000 bc40 	b.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f003 f85c 	bl	80052f0 <USB_ReadChInterrupts>
 8002238:	4603      	mov	r3, r0
 800223a:	f003 0320 	and.w	r3, r3, #32
 800223e:	2b20      	cmp	r3, #32
 8002240:	d131      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	015a      	lsls	r2, r3, #5
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4413      	add	r3, r2
 800224a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800224e:	461a      	mov	r2, r3
 8002250:	2320      	movs	r3, #32
 8002252:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	331a      	adds	r3, #26
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	f040 841f 	bne.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	331b      	adds	r3, #27
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	334d      	adds	r3, #77	@ 0x4d
 8002290:	2203      	movs	r2, #3
 8002292:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f003 fdd2 	bl	8005e46 <USB_HC_Halt>
 80022a2:	f000 bc02 	b.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 f81e 	bl	80052f0 <USB_ReadChInterrupts>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	f040 8305 	bne.w	80028ca <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022cc:	461a      	mov	r2, r3
 80022ce:	2302      	movs	r3, #2
 80022d0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80022d2:	78fa      	ldrb	r2, [r7, #3]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	334d      	adds	r3, #77	@ 0x4d
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d114      	bne.n	8002312 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	1a9b      	subs	r3, r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	334d      	adds	r3, #77	@ 0x4d
 80022f8:	2202      	movs	r2, #2
 80022fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	334c      	adds	r3, #76	@ 0x4c
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	e2cc      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	334d      	adds	r3, #77	@ 0x4d
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b06      	cmp	r3, #6
 8002326:	d114      	bne.n	8002352 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	334d      	adds	r3, #77	@ 0x4d
 8002338:	2202      	movs	r2, #2
 800233a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	334c      	adds	r3, #76	@ 0x4c
 800234c:	2205      	movs	r2, #5
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	e2ac      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	334d      	adds	r3, #77	@ 0x4d
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b07      	cmp	r3, #7
 8002366:	d00b      	beq.n	8002380 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	334d      	adds	r3, #77	@ 0x4d
 8002378:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800237a:	2b09      	cmp	r3, #9
 800237c:	f040 80a6 	bne.w	80024cc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	334d      	adds	r3, #77	@ 0x4d
 8002390:	2202      	movs	r2, #2
 8002392:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	3344      	adds	r3, #68	@ 0x44
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	1c59      	adds	r1, r3, #1
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4403      	add	r3, r0
 80023b4:	3344      	adds	r3, #68	@ 0x44
 80023b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3344      	adds	r3, #68	@ 0x44
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d943      	bls.n	8002456 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3344      	adds	r3, #68	@ 0x44
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	331a      	adds	r3, #26
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d123      	bne.n	8002440 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	331b      	adds	r3, #27
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	331c      	adds	r3, #28
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	0151      	lsls	r1, r2, #5
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	440a      	add	r2, r1
 8002436:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800243a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800243e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	334c      	adds	r3, #76	@ 0x4c
 8002450:	2204      	movs	r2, #4
 8002452:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002454:	e229      	b.n	80028aa <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	334c      	adds	r3, #76	@ 0x4c
 8002466:	2202      	movs	r2, #2
 8002468:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	3326      	adds	r3, #38	@ 0x26
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00b      	beq.n	8002498 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002480:	78fa      	ldrb	r2, [r7, #3]
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	3326      	adds	r3, #38	@ 0x26
 8002490:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002492:	2b02      	cmp	r3, #2
 8002494:	f040 8209 	bne.w	80028aa <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80024ae:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024b6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024c4:	461a      	mov	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024ca:	e1ee      	b.n	80028aa <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	334d      	adds	r3, #77	@ 0x4d
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	f040 80c8 	bne.w	8002674 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	334d      	adds	r3, #77	@ 0x4d
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	331b      	adds	r3, #27
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	f040 81ce 	bne.w	80028ac <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3326      	adds	r3, #38	@ 0x26
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b03      	cmp	r3, #3
 8002524:	d16b      	bne.n	80025fe <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3348      	adds	r3, #72	@ 0x48
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	1c59      	adds	r1, r3, #1
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4403      	add	r3, r0
 8002546:	3348      	adds	r3, #72	@ 0x48
 8002548:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	3348      	adds	r3, #72	@ 0x48
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d943      	bls.n	80025e8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002560:	78fa      	ldrb	r2, [r7, #3]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3348      	adds	r3, #72	@ 0x48
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	331b      	adds	r3, #27
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	3344      	adds	r3, #68	@ 0x44
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d809      	bhi.n	80025b2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800259e:	78fa      	ldrb	r2, [r7, #3]
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4613      	mov	r3, r2
 80025a4:	011b      	lsls	r3, r3, #4
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	331c      	adds	r3, #28
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	0151      	lsls	r1, r2, #5
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	440a      	add	r2, r1
 80025c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	334c      	adds	r3, #76	@ 0x4c
 80025e2:	2204      	movs	r2, #4
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e014      	b.n	8002612 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	334c      	adds	r3, #76	@ 0x4c
 80025f8:	2202      	movs	r2, #2
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e009      	b.n	8002612 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025fe:	78fa      	ldrb	r2, [r7, #3]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	334c      	adds	r3, #76	@ 0x4c
 800260e:	2202      	movs	r2, #2
 8002610:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	3326      	adds	r3, #38	@ 0x26
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00b      	beq.n	8002640 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4613      	mov	r3, r2
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	1a9b      	subs	r3, r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	3326      	adds	r3, #38	@ 0x26
 8002638:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800263a:	2b02      	cmp	r3, #2
 800263c:	f040 8136 	bne.w	80028ac <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002656:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800265e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800266c:	461a      	mov	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e11b      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	334d      	adds	r3, #77	@ 0x4d
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b03      	cmp	r3, #3
 8002688:	f040 8081 	bne.w	800278e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	334d      	adds	r3, #77	@ 0x4d
 800269c:	2202      	movs	r2, #2
 800269e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	331b      	adds	r3, #27
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	f040 80fa 	bne.w	80028ac <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026b8:	78fa      	ldrb	r2, [r7, #3]
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	4613      	mov	r3, r2
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	1a9b      	subs	r3, r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	334c      	adds	r3, #76	@ 0x4c
 80026c8:	2202      	movs	r2, #2
 80026ca:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	0151      	lsls	r1, r2, #5
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	440a      	add	r2, r1
 80026e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ea:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	0151      	lsls	r1, r2, #5
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	440a      	add	r2, r1
 8002702:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800270a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4413      	add	r3, r2
 8002714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	78fa      	ldrb	r2, [r7, #3]
 800271c:	0151      	lsls	r1, r2, #5
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	440a      	add	r2, r1
 8002722:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002726:	f023 0320 	bic.w	r3, r3, #32
 800272a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	3326      	adds	r3, #38	@ 0x26
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	1a9b      	subs	r3, r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3326      	adds	r3, #38	@ 0x26
 8002752:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002754:	2b02      	cmp	r3, #2
 8002756:	f040 80a9 	bne.w	80028ac <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	015a      	lsls	r2, r3, #5
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4413      	add	r3, r2
 8002762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002770:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002778:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	e08e      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	334d      	adds	r3, #77	@ 0x4d
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d143      	bne.n	800282c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	334d      	adds	r3, #77	@ 0x4d
 80027b4:	2202      	movs	r2, #2
 80027b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	334c      	adds	r3, #76	@ 0x4c
 80027c8:	2202      	movs	r2, #2
 80027ca:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3326      	adds	r3, #38	@ 0x26
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	3326      	adds	r3, #38	@ 0x26
 80027f2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d159      	bne.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800280e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002816:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002824:	461a      	mov	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e03f      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	334d      	adds	r3, #77	@ 0x4d
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b08      	cmp	r3, #8
 8002840:	d126      	bne.n	8002890 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002842:	78fa      	ldrb	r2, [r7, #3]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	1a9b      	subs	r3, r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	334d      	adds	r3, #77	@ 0x4d
 8002852:	2202      	movs	r2, #2
 8002854:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	3344      	adds	r3, #68	@ 0x44
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	1c59      	adds	r1, r3, #1
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4613      	mov	r3, r2
 800286e:	011b      	lsls	r3, r3, #4
 8002870:	1a9b      	subs	r3, r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4403      	add	r3, r0
 8002876:	3344      	adds	r3, #68	@ 0x44
 8002878:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	334c      	adds	r3, #76	@ 0x4c
 800288a:	2204      	movs	r2, #4
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e00d      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	334d      	adds	r3, #77	@ 0x4d
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	f000 8100 	beq.w	8002aa8 <HCD_HC_IN_IRQHandler+0xcca>
 80028a8:	e000      	b.n	80028ac <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028aa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	334c      	adds	r3, #76	@ 0x4c
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	78fb      	ldrb	r3, [r7, #3]
 80028c0:	4619      	mov	r1, r3
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f005 fe1e 	bl	8008504 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028c8:	e0ef      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	4611      	mov	r1, r2
 80028d2:	4618      	mov	r0, r3
 80028d4:	f002 fd0c 	bl	80052f0 <USB_ReadChInterrupts>
 80028d8:	4603      	mov	r3, r0
 80028da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028de:	2b40      	cmp	r3, #64	@ 0x40
 80028e0:	d12f      	bne.n	8002942 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ee:	461a      	mov	r2, r3
 80028f0:	2340      	movs	r3, #64	@ 0x40
 80028f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	1a9b      	subs	r3, r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	334d      	adds	r3, #77	@ 0x4d
 8002904:	2205      	movs	r2, #5
 8002906:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	331a      	adds	r3, #26
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3344      	adds	r3, #68	@ 0x44
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	78fa      	ldrb	r2, [r7, #3]
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f003 fa83 	bl	8005e46 <USB_HC_Halt>
 8002940:	e0b3      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f002 fcd0 	bl	80052f0 <USB_ReadChInterrupts>
 8002950:	4603      	mov	r3, r0
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b10      	cmp	r3, #16
 8002958:	f040 80a7 	bne.w	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	3326      	adds	r3, #38	@ 0x26
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d11b      	bne.n	80029aa <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3344      	adds	r3, #68	@ 0x44
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	334d      	adds	r3, #77	@ 0x4d
 8002996:	2204      	movs	r2, #4
 8002998:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 fa4f 	bl	8005e46 <USB_HC_Halt>
 80029a8:	e03f      	b.n	8002a2a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3326      	adds	r3, #38	@ 0x26
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029c0:	78fa      	ldrb	r2, [r7, #3]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	1a9b      	subs	r3, r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	3326      	adds	r3, #38	@ 0x26
 80029d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d129      	bne.n	8002a2a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	3344      	adds	r3, #68	@ 0x44
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	799b      	ldrb	r3, [r3, #6]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HCD_HC_IN_IRQHandler+0xc2a>
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	331b      	adds	r3, #27
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d110      	bne.n	8002a2a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	334d      	adds	r3, #77	@ 0x4d
 8002a18:	2204      	movs	r2, #4
 8002a1a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f003 fa0e 	bl	8005e46 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	331b      	adds	r3, #27
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d129      	bne.n	8002a94 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	331b      	adds	r3, #27
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	0151      	lsls	r1, r2, #5
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	440a      	add	r2, r1
 8002a6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a72:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	78fa      	ldrb	r2, [r7, #3]
 8002a84:	0151      	lsls	r1, r2, #5
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	440a      	add	r2, r1
 8002a8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a8e:	f043 0320 	orr.w	r3, r3, #32
 8002a92:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	6093      	str	r3, [r2, #8]
 8002aa6:	e000      	b.n	8002aaa <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002aa8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f002 fc0e 	bl	80052f0 <USB_ReadChInterrupts>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d11b      	bne.n	8002b16 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aea:	461a      	mov	r2, r3
 8002aec:	2304      	movs	r3, #4
 8002aee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	334d      	adds	r3, #77	@ 0x4d
 8002b00:	2207      	movs	r2, #7
 8002b02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f003 f99a 	bl	8005e46 <USB_HC_Halt>
 8002b12:	f000 bc89 	b.w	8003428 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f002 fbe6 	bl	80052f0 <USB_ReadChInterrupts>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	f040 8082 	bne.w	8002c34 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	2320      	movs	r3, #32
 8002b40:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	1a9b      	subs	r3, r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	3319      	adds	r3, #25
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d124      	bne.n	8002ba2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	3319      	adds	r3, #25
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	334c      	adds	r3, #76	@ 0x4c
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	334d      	adds	r3, #77	@ 0x4d
 8002b90:	2203      	movs	r2, #3
 8002b92:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f003 f952 	bl	8005e46 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	331a      	adds	r3, #26
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	f040 8437 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x978>
 8002bba:	78fa      	ldrb	r2, [r7, #3]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	331b      	adds	r3, #27
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f040 842b 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	3326      	adds	r3, #38	@ 0x26
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d009      	beq.n	8002bfc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	331b      	adds	r3, #27
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	334d      	adds	r3, #77	@ 0x4d
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f003 f914 	bl	8005e46 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3344      	adds	r3, #68	@ 0x44
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e3f9      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 fb57 	bl	80052f0 <USB_ReadChInterrupts>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c4c:	d111      	bne.n	8002c72 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c60:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f003 f8eb 	bl	8005e46 <USB_HC_Halt>
 8002c70:	e3da      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f002 fb38 	bl	80052f0 <USB_ReadChInterrupts>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d168      	bne.n	8002d5c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3344      	adds	r3, #68	@ 0x44
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f002 fb22 	bl	80052f0 <USB_ReadChInterrupts>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb2:	2b40      	cmp	r3, #64	@ 0x40
 8002cb4:	d112      	bne.n	8002cdc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	1a9b      	subs	r3, r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3319      	adds	r3, #25
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cca:	78fb      	ldrb	r3, [r7, #3]
 8002ccc:	015a      	lsls	r2, r3, #5
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2340      	movs	r3, #64	@ 0x40
 8002cda:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	331b      	adds	r3, #27
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d019      	beq.n	8002d26 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	331b      	adds	r3, #27
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	0151      	lsls	r1, r2, #5
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	440a      	add	r2, r1
 8002d1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d24:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d32:	461a      	mov	r2, r3
 8002d34:	2301      	movs	r3, #1
 8002d36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	334d      	adds	r3, #77	@ 0x4d
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f003 f876 	bl	8005e46 <USB_HC_Halt>
 8002d5a:	e365      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 fac3 	bl	80052f0 <USB_ReadChInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d70:	2b40      	cmp	r3, #64	@ 0x40
 8002d72:	d139      	bne.n	8002de8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	334d      	adds	r3, #77	@ 0x4d
 8002d84:	2205      	movs	r2, #5
 8002d86:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	331a      	adds	r3, #26
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3319      	adds	r3, #25
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3344      	adds	r3, #68	@ 0x44
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 f839 	bl	8005e46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de0:	461a      	mov	r2, r3
 8002de2:	2340      	movs	r3, #64	@ 0x40
 8002de4:	6093      	str	r3, [r2, #8]
 8002de6:	e31f      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f002 fa7d 	bl	80052f0 <USB_ReadChInterrupts>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d11a      	bne.n	8002e36 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e00:	78fb      	ldrb	r3, [r7, #3]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2308      	movs	r3, #8
 8002e10:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	334d      	adds	r3, #77	@ 0x4d
 8002e22:	2206      	movs	r2, #6
 8002e24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	78fa      	ldrb	r2, [r7, #3]
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 f809 	bl	8005e46 <USB_HC_Halt>
 8002e34:	e2f8      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f002 fa56 	bl	80052f0 <USB_ReadChInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d144      	bne.n	8002ed8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	3344      	adds	r3, #68	@ 0x44
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	334d      	adds	r3, #77	@ 0x4d
 8002e72:	2204      	movs	r2, #4
 8002e74:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	3319      	adds	r3, #25
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d114      	bne.n	8002eb6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3318      	adds	r3, #24
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3319      	adds	r3, #25
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f002 ffc1 	bl	8005e46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ec4:	78fb      	ldrb	r3, [r7, #3]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2310      	movs	r3, #16
 8002ed4:	6093      	str	r3, [r2, #8]
 8002ed6:	e2a7      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f002 fa05 	bl	80052f0 <USB_ReadChInterrupts>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eec:	2b80      	cmp	r3, #128	@ 0x80
 8002eee:	f040 8083 	bne.w	8002ff8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	799b      	ldrb	r3, [r3, #6]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d111      	bne.n	8002f1e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	334d      	adds	r3, #77	@ 0x4d
 8002f0a:	2207      	movs	r2, #7
 8002f0c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 ff95 	bl	8005e46 <USB_HC_Halt>
 8002f1c:	e062      	b.n	8002fe4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3344      	adds	r3, #68	@ 0x44
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	1c59      	adds	r1, r3, #1
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4403      	add	r3, r0
 8002f3e:	3344      	adds	r3, #68	@ 0x44
 8002f40:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	3344      	adds	r3, #68	@ 0x44
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d922      	bls.n	8002f9e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	3344      	adds	r3, #68	@ 0x44
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	334c      	adds	r3, #76	@ 0x4c
 8002f7c:	2204      	movs	r2, #4
 8002f7e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	334c      	adds	r3, #76	@ 0x4c
 8002f90:	781a      	ldrb	r2, [r3, #0]
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	4619      	mov	r1, r3
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f005 fab4 	bl	8008504 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f9c:	e022      	b.n	8002fe4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	334c      	adds	r3, #76	@ 0x4c
 8002fae:	2202      	movs	r2, #2
 8002fb0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fc8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fd0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fde:	461a      	mov	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	2380      	movs	r3, #128	@ 0x80
 8002ff4:	6093      	str	r3, [r2, #8]
 8002ff6:	e217      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f002 f975 	bl	80052f0 <USB_ReadChInterrupts>
 8003006:	4603      	mov	r3, r0
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003010:	d11b      	bne.n	800304a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	334d      	adds	r3, #77	@ 0x4d
 8003022:	2209      	movs	r2, #9
 8003024:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f002 ff09 	bl	8005e46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003046:	6093      	str	r3, [r2, #8]
 8003048:	e1ee      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f002 f94c 	bl	80052f0 <USB_ReadChInterrupts>
 8003058:	4603      	mov	r3, r0
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b02      	cmp	r3, #2
 8003060:	f040 81df 	bne.w	8003422 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003070:	461a      	mov	r2, r3
 8003072:	2302      	movs	r3, #2
 8003074:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	334d      	adds	r3, #77	@ 0x4d
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	f040 8093 	bne.w	80031b4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	1a9b      	subs	r3, r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	334d      	adds	r3, #77	@ 0x4d
 800309e:	2202      	movs	r2, #2
 80030a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	334c      	adds	r3, #76	@ 0x4c
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	3326      	adds	r3, #38	@ 0x26
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d00b      	beq.n	80030e4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	3326      	adds	r3, #38	@ 0x26
 80030dc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030de:	2b03      	cmp	r3, #3
 80030e0:	f040 8190 	bne.w	8003404 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	799b      	ldrb	r3, [r3, #6]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d115      	bne.n	8003118 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	333d      	adds	r3, #61	@ 0x3d
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	f083 0301 	eor.w	r3, r3, #1
 8003104:	b2d8      	uxtb	r0, r3
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	333d      	adds	r3, #61	@ 0x3d
 8003114:	4602      	mov	r2, r0
 8003116:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	799b      	ldrb	r3, [r3, #6]
 800311c:	2b01      	cmp	r3, #1
 800311e:	f040 8171 	bne.w	8003404 <HCD_HC_OUT_IRQHandler+0x954>
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3334      	adds	r3, #52	@ 0x34
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8165 	beq.w	8003404 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	3334      	adds	r3, #52	@ 0x34
 800314a:	6819      	ldr	r1, [r3, #0]
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4403      	add	r3, r0
 800315a:	3328      	adds	r3, #40	@ 0x28
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	440b      	add	r3, r1
 8003160:	1e59      	subs	r1, r3, #1
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4403      	add	r3, r0
 8003170:	3328      	adds	r3, #40	@ 0x28
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	fbb1 f3f3 	udiv	r3, r1, r3
 8003178:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 813f 	beq.w	8003404 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	333d      	adds	r3, #61	@ 0x3d
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	f083 0301 	eor.w	r3, r3, #1
 800319e:	b2d8      	uxtb	r0, r3
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	333d      	adds	r3, #61	@ 0x3d
 80031ae:	4602      	mov	r2, r0
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e127      	b.n	8003404 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	334d      	adds	r3, #77	@ 0x4d
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b03      	cmp	r3, #3
 80031c8:	d120      	bne.n	800320c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	334d      	adds	r3, #77	@ 0x4d
 80031da:	2202      	movs	r2, #2
 80031dc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	331b      	adds	r3, #27
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	f040 8107 	bne.w	8003404 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	334c      	adds	r3, #76	@ 0x4c
 8003206:	2202      	movs	r2, #2
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e0fb      	b.n	8003404 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	334d      	adds	r3, #77	@ 0x4d
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b04      	cmp	r3, #4
 8003220:	d13a      	bne.n	8003298 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	334d      	adds	r3, #77	@ 0x4d
 8003232:	2202      	movs	r2, #2
 8003234:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	334c      	adds	r3, #76	@ 0x4c
 8003246:	2202      	movs	r2, #2
 8003248:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	331b      	adds	r3, #27
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	f040 80d1 	bne.w	8003404 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	331b      	adds	r3, #27
 8003272:	2200      	movs	r2, #0
 8003274:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4413      	add	r3, r2
 800327e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	0151      	lsls	r1, r2, #5
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	440a      	add	r2, r1
 800328c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003294:	6053      	str	r3, [r2, #4]
 8003296:	e0b5      	b.n	8003404 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	334d      	adds	r3, #77	@ 0x4d
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b05      	cmp	r3, #5
 80032ac:	d114      	bne.n	80032d8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	334d      	adds	r3, #77	@ 0x4d
 80032be:	2202      	movs	r2, #2
 80032c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	334c      	adds	r3, #76	@ 0x4c
 80032d2:	2202      	movs	r2, #2
 80032d4:	701a      	strb	r2, [r3, #0]
 80032d6:	e095      	b.n	8003404 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	334d      	adds	r3, #77	@ 0x4d
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d114      	bne.n	8003318 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	334d      	adds	r3, #77	@ 0x4d
 80032fe:	2202      	movs	r2, #2
 8003300:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	334c      	adds	r3, #76	@ 0x4c
 8003312:	2205      	movs	r2, #5
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e075      	b.n	8003404 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	334d      	adds	r3, #77	@ 0x4d
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b07      	cmp	r3, #7
 800332c:	d00a      	beq.n	8003344 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	334d      	adds	r3, #77	@ 0x4d
 800333e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003340:	2b09      	cmp	r3, #9
 8003342:	d170      	bne.n	8003426 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	334d      	adds	r3, #77	@ 0x4d
 8003354:	2202      	movs	r2, #2
 8003356:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	3344      	adds	r3, #68	@ 0x44
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	1c59      	adds	r1, r3, #1
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4403      	add	r3, r0
 8003378:	3344      	adds	r3, #68	@ 0x44
 800337a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3344      	adds	r3, #68	@ 0x44
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d914      	bls.n	80033bc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3344      	adds	r3, #68	@ 0x44
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	334c      	adds	r3, #76	@ 0x4c
 80033b6:	2204      	movs	r2, #4
 80033b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033ba:	e022      	b.n	8003402 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	334c      	adds	r3, #76	@ 0x4c
 80033cc:	2202      	movs	r2, #2
 80033ce:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033e6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033ee:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fc:	461a      	mov	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003402:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	334c      	adds	r3, #76	@ 0x4c
 8003414:	781a      	ldrb	r2, [r3, #0]
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	4619      	mov	r1, r3
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f005 f872 	bl	8008504 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003420:	e002      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003426:	bf00      	nop
  }
}
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b08a      	sub	sp, #40	@ 0x28
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800343c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	0c5b      	lsrs	r3, r3, #17
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003462:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d004      	beq.n	8003474 <HCD_RXQLVL_IRQHandler+0x46>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b05      	cmp	r3, #5
 800346e:	f000 80b6 	beq.w	80035de <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003472:	e0b7      	b.n	80035e4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80b3 	beq.w	80035e2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	332c      	adds	r3, #44	@ 0x2c
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80a7 	beq.w	80035e2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	3338      	adds	r3, #56	@ 0x38
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	18d1      	adds	r1, r2, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4403      	add	r3, r0
 80034b8:	3334      	adds	r3, #52	@ 0x34
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4299      	cmp	r1, r3
 80034be:	f200 8083 	bhi.w	80035c8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	332c      	adds	r3, #44	@ 0x2c
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	b292      	uxth	r2, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	f001 fe9c 	bl	800521a <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4613      	mov	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	332c      	adds	r3, #44	@ 0x2c
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	18d1      	adds	r1, r2, r3
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4403      	add	r3, r0
 8003506:	332c      	adds	r3, #44	@ 0x2c
 8003508:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	3338      	adds	r3, #56	@ 0x38
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	18d1      	adds	r1, r2, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4403      	add	r3, r0
 800352e:	3338      	adds	r3, #56	@ 0x38
 8003530:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	4413      	add	r3, r2
 800353a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	0cdb      	lsrs	r3, r3, #19
 8003542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003546:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3328      	adds	r3, #40	@ 0x28
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4293      	cmp	r3, r2
 8003560:	d13f      	bne.n	80035e2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d03c      	beq.n	80035e2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800357e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003586:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	4413      	add	r3, r2
 8003590:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003594:	461a      	mov	r2, r3
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4613      	mov	r3, r2
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	333c      	adds	r3, #60	@ 0x3c
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	f083 0301 	eor.w	r3, r3, #1
 80035b0:	b2d8      	uxtb	r0, r3
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4613      	mov	r3, r2
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	1a9b      	subs	r3, r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	333c      	adds	r3, #60	@ 0x3c
 80035c2:	4602      	mov	r2, r0
 80035c4:	701a      	strb	r2, [r3, #0]
      break;
 80035c6:	e00c      	b.n	80035e2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4613      	mov	r3, r2
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	334c      	adds	r3, #76	@ 0x4c
 80035d8:	2204      	movs	r2, #4
 80035da:	701a      	strb	r2, [r3, #0]
      break;
 80035dc:	e001      	b.n	80035e2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80035de:	bf00      	nop
 80035e0:	e000      	b.n	80035e4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80035e2:	bf00      	nop
  }
}
 80035e4:	bf00      	nop
 80035e6:	3728      	adds	r7, #40	@ 0x28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003618:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b02      	cmp	r3, #2
 8003622:	d10b      	bne.n	800363c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b01      	cmp	r3, #1
 800362c:	d102      	bne.n	8003634 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f004 ff4c 	bl	80084cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f043 0302 	orr.w	r3, r3, #2
 800363a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b08      	cmp	r3, #8
 8003644:	d132      	bne.n	80036ac <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f043 0308 	orr.w	r3, r3, #8
 800364c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b04      	cmp	r3, #4
 8003656:	d126      	bne.n	80036a6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	7a5b      	ldrb	r3, [r3, #9]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d113      	bne.n	8003688 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003666:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800366a:	d106      	bne.n	800367a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2102      	movs	r1, #2
 8003672:	4618      	mov	r0, r3
 8003674:	f001 ff68 	bl	8005548 <USB_InitFSLSPClkSel>
 8003678:	e011      	b.n	800369e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2101      	movs	r1, #1
 8003680:	4618      	mov	r0, r3
 8003682:	f001 ff61 	bl	8005548 <USB_InitFSLSPClkSel>
 8003686:	e00a      	b.n	800369e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	79db      	ldrb	r3, [r3, #7]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d106      	bne.n	800369e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003696:	461a      	mov	r2, r3
 8003698:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800369c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f004 ff3e 	bl	8008520 <HAL_HCD_PortEnabled_Callback>
 80036a4:	e002      	b.n	80036ac <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f004 ff48 	bl	800853c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0320 	and.w	r3, r3, #32
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d103      	bne.n	80036be <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f043 0320 	orr.w	r3, r3, #32
 80036bc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036c4:	461a      	mov	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	6013      	str	r3, [r2, #0]
}
 80036ca:	bf00      	nop
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e12b      	b.n	800393e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd f9a0 	bl	8000a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2224      	movs	r2, #36	@ 0x24
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003726:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003736:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003738:	f001 fa20 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 800373c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4a81      	ldr	r2, [pc, #516]	@ (8003948 <HAL_I2C_Init+0x274>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d807      	bhi.n	8003758 <HAL_I2C_Init+0x84>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4a80      	ldr	r2, [pc, #512]	@ (800394c <HAL_I2C_Init+0x278>)
 800374c:	4293      	cmp	r3, r2
 800374e:	bf94      	ite	ls
 8003750:	2301      	movls	r3, #1
 8003752:	2300      	movhi	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	e006      	b.n	8003766 <HAL_I2C_Init+0x92>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4a7d      	ldr	r2, [pc, #500]	@ (8003950 <HAL_I2C_Init+0x27c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	bf94      	ite	ls
 8003760:	2301      	movls	r3, #1
 8003762:	2300      	movhi	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e0e7      	b.n	800393e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4a78      	ldr	r2, [pc, #480]	@ (8003954 <HAL_I2C_Init+0x280>)
 8003772:	fba2 2303 	umull	r2, r3, r2, r3
 8003776:	0c9b      	lsrs	r3, r3, #18
 8003778:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4a6a      	ldr	r2, [pc, #424]	@ (8003948 <HAL_I2C_Init+0x274>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d802      	bhi.n	80037a8 <HAL_I2C_Init+0xd4>
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	3301      	adds	r3, #1
 80037a6:	e009      	b.n	80037bc <HAL_I2C_Init+0xe8>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037ae:	fb02 f303 	mul.w	r3, r2, r3
 80037b2:	4a69      	ldr	r2, [pc, #420]	@ (8003958 <HAL_I2C_Init+0x284>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	099b      	lsrs	r3, r3, #6
 80037ba:	3301      	adds	r3, #1
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	495c      	ldr	r1, [pc, #368]	@ (8003948 <HAL_I2C_Init+0x274>)
 80037d8:	428b      	cmp	r3, r1
 80037da:	d819      	bhi.n	8003810 <HAL_I2C_Init+0x13c>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1e59      	subs	r1, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ea:	1c59      	adds	r1, r3, #1
 80037ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037f0:	400b      	ands	r3, r1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_I2C_Init+0x138>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	1e59      	subs	r1, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	fbb1 f3f3 	udiv	r3, r1, r3
 8003804:	3301      	adds	r3, #1
 8003806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380a:	e051      	b.n	80038b0 <HAL_I2C_Init+0x1dc>
 800380c:	2304      	movs	r3, #4
 800380e:	e04f      	b.n	80038b0 <HAL_I2C_Init+0x1dc>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d111      	bne.n	800383c <HAL_I2C_Init+0x168>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1e58      	subs	r0, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6859      	ldr	r1, [r3, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	440b      	add	r3, r1
 8003826:	fbb0 f3f3 	udiv	r3, r0, r3
 800382a:	3301      	adds	r3, #1
 800382c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003830:	2b00      	cmp	r3, #0
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e012      	b.n	8003862 <HAL_I2C_Init+0x18e>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e58      	subs	r0, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	0099      	lsls	r1, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003852:	3301      	adds	r3, #1
 8003854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_Init+0x196>
 8003866:	2301      	movs	r3, #1
 8003868:	e022      	b.n	80038b0 <HAL_I2C_Init+0x1dc>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10e      	bne.n	8003890 <HAL_I2C_Init+0x1bc>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1e58      	subs	r0, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	460b      	mov	r3, r1
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	440b      	add	r3, r1
 8003880:	fbb0 f3f3 	udiv	r3, r0, r3
 8003884:	3301      	adds	r3, #1
 8003886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800388e:	e00f      	b.n	80038b0 <HAL_I2C_Init+0x1dc>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1e58      	subs	r0, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6859      	ldr	r1, [r3, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	0099      	lsls	r1, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a6:	3301      	adds	r3, #1
 80038a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	6809      	ldr	r1, [r1, #0]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6911      	ldr	r1, [r2, #16]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68d2      	ldr	r2, [r2, #12]
 80038ea:	4311      	orrs	r1, r2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	000186a0 	.word	0x000186a0
 800394c:	001e847f 	.word	0x001e847f
 8003950:	003d08ff 	.word	0x003d08ff
 8003954:	431bde83 	.word	0x431bde83
 8003958:	10624dd3 	.word	0x10624dd3

0800395c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b088      	sub	sp, #32
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e128      	b.n	8003bc0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a90      	ldr	r2, [pc, #576]	@ (8003bc8 <HAL_I2S_Init+0x26c>)
 8003986:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fd f8a1 	bl	8000ad0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039a4:	f023 030f 	bic.w	r3, r3, #15
 80039a8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2202      	movs	r2, #2
 80039b0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d060      	beq.n	8003a7c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d102      	bne.n	80039c8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039c2:	2310      	movs	r3, #16
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e001      	b.n	80039cc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039c8:	2320      	movs	r3, #32
 80039ca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d802      	bhi.n	80039da <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039da:	2001      	movs	r0, #1
 80039dc:	f001 f9c4 	bl	8004d68 <HAL_RCCEx_GetPeriphCLKFreq>
 80039e0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ea:	d125      	bne.n	8003a38 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d010      	beq.n	8003a16 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	461a      	mov	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a10:	3305      	adds	r3, #5
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	e01f      	b.n	8003a56 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	461a      	mov	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	3305      	adds	r3, #5
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	e00e      	b.n	8003a56 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	461a      	mov	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a52:	3305      	adds	r3, #5
 8003a54:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4a5c      	ldr	r2, [pc, #368]	@ (8003bcc <HAL_I2S_Init+0x270>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	08db      	lsrs	r3, r3, #3
 8003a60:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	e003      	b.n	8003a84 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d902      	bls.n	8003a90 <HAL_I2S_Init+0x134>
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	2bff      	cmp	r3, #255	@ 0xff
 8003a8e:	d907      	bls.n	8003aa0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a94:	f043 0210 	orr.w	r2, r3, #16
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e08f      	b.n	8003bc0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	ea42 0103 	orr.w	r1, r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003abe:	f023 030f 	bic.w	r3, r3, #15
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6851      	ldr	r1, [r2, #4]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6892      	ldr	r2, [r2, #8]
 8003aca:	4311      	orrs	r1, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	68d2      	ldr	r2, [r2, #12]
 8003ad0:	4311      	orrs	r1, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6992      	ldr	r2, [r2, #24]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ae2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d161      	bne.n	8003bb0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a38      	ldr	r2, [pc, #224]	@ (8003bd0 <HAL_I2S_Init+0x274>)
 8003af0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a37      	ldr	r2, [pc, #220]	@ (8003bd4 <HAL_I2S_Init+0x278>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d101      	bne.n	8003b00 <HAL_I2S_Init+0x1a4>
 8003afc:	4b36      	ldr	r3, [pc, #216]	@ (8003bd8 <HAL_I2S_Init+0x27c>)
 8003afe:	e001      	b.n	8003b04 <HAL_I2S_Init+0x1a8>
 8003b00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	4932      	ldr	r1, [pc, #200]	@ (8003bd4 <HAL_I2S_Init+0x278>)
 8003b0c:	428a      	cmp	r2, r1
 8003b0e:	d101      	bne.n	8003b14 <HAL_I2S_Init+0x1b8>
 8003b10:	4a31      	ldr	r2, [pc, #196]	@ (8003bd8 <HAL_I2S_Init+0x27c>)
 8003b12:	e001      	b.n	8003b18 <HAL_I2S_Init+0x1bc>
 8003b14:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003b18:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b1c:	f023 030f 	bic.w	r3, r3, #15
 8003b20:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd4 <HAL_I2S_Init+0x278>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <HAL_I2S_Init+0x1d4>
 8003b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd8 <HAL_I2S_Init+0x27c>)
 8003b2e:	e001      	b.n	8003b34 <HAL_I2S_Init+0x1d8>
 8003b30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b34:	2202      	movs	r2, #2
 8003b36:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a25      	ldr	r2, [pc, #148]	@ (8003bd4 <HAL_I2S_Init+0x278>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_I2S_Init+0x1ea>
 8003b42:	4b25      	ldr	r3, [pc, #148]	@ (8003bd8 <HAL_I2S_Init+0x27c>)
 8003b44:	e001      	b.n	8003b4a <HAL_I2S_Init+0x1ee>
 8003b46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b56:	d003      	beq.n	8003b60 <HAL_I2S_Init+0x204>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d103      	bne.n	8003b68 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e001      	b.n	8003b6c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b76:	4313      	orrs	r3, r2
 8003b78:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b80:	4313      	orrs	r3, r2
 8003b82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	897b      	ldrh	r3, [r7, #10]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b98:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd4 <HAL_I2S_Init+0x278>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d101      	bne.n	8003ba8 <HAL_I2S_Init+0x24c>
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <HAL_I2S_Init+0x27c>)
 8003ba6:	e001      	b.n	8003bac <HAL_I2S_Init+0x250>
 8003ba8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bac:	897a      	ldrh	r2, [r7, #10]
 8003bae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3720      	adds	r7, #32
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	08003cd3 	.word	0x08003cd3
 8003bcc:	cccccccd 	.word	0xcccccccd
 8003bd0:	08003de9 	.word	0x08003de9
 8003bd4:	40003800 	.word	0x40003800
 8003bd8:	40003400 	.word	0x40003400

08003bdc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	881a      	ldrh	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	1c9a      	adds	r2, r3, #2
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10e      	bne.n	8003c6c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c5c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff ffb8 	bl	8003bdc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	b292      	uxth	r2, r2
 8003c88:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8e:	1c9a      	adds	r2, r3, #2
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10e      	bne.n	8003cca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f7ff ff93 	bl	8003bf0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b086      	sub	sp, #24
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d13a      	bne.n	8003d64 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d109      	bne.n	8003d0c <I2S_IRQHandler+0x3a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d02:	2b40      	cmp	r3, #64	@ 0x40
 8003d04:	d102      	bne.n	8003d0c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff ffb4 	bl	8003c74 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d12:	2b40      	cmp	r3, #64	@ 0x40
 8003d14:	d126      	bne.n	8003d64 <I2S_IRQHandler+0x92>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d11f      	bne.n	8003d64 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d34:	2300      	movs	r3, #0
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	613b      	str	r3, [r7, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d56:	f043 0202 	orr.w	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff ff50 	bl	8003c04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d136      	bne.n	8003dde <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d109      	bne.n	8003d8e <I2S_IRQHandler+0xbc>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d84:	2b80      	cmp	r3, #128	@ 0x80
 8003d86:	d102      	bne.n	8003d8e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff45 	bl	8003c18 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	d122      	bne.n	8003dde <I2S_IRQHandler+0x10c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d11b      	bne.n	8003dde <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003db4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd0:	f043 0204 	orr.w	r2, r3, #4
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7ff ff13 	bl	8003c04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dde:	bf00      	nop
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a92      	ldr	r2, [pc, #584]	@ (8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d101      	bne.n	8003e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e02:	4b92      	ldr	r3, [pc, #584]	@ (800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e04:	e001      	b.n	8003e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a8b      	ldr	r2, [pc, #556]	@ (8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e20:	4b8a      	ldr	r3, [pc, #552]	@ (800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e22:	e001      	b.n	8003e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e34:	d004      	beq.n	8003e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f040 8099 	bne.w	8003f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d107      	bne.n	8003e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f925 	bl	80040a4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d107      	bne.n	8003e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f9c8 	bl	8004204 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7a:	2b40      	cmp	r3, #64	@ 0x40
 8003e7c:	d13a      	bne.n	8003ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d035      	beq.n	8003ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a6e      	ldr	r2, [pc, #440]	@ (8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d101      	bne.n	8003e96 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e92:	4b6e      	ldr	r3, [pc, #440]	@ (800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e94:	e001      	b.n	8003e9a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4969      	ldr	r1, [pc, #420]	@ (8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ea2:	428b      	cmp	r3, r1
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ea6:	4b69      	ldr	r3, [pc, #420]	@ (800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea8:	e001      	b.n	8003eae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003eaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eb2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ec2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	f043 0202 	orr.w	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fe88 	bl	8003c04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	f040 80c3 	bne.w	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 80bd 	beq.w	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a49      	ldr	r2, [pc, #292]	@ (8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d101      	bne.n	8003f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f26:	4b49      	ldr	r3, [pc, #292]	@ (800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f28:	e001      	b.n	8003f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4944      	ldr	r1, [pc, #272]	@ (8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f36:	428b      	cmp	r3, r1
 8003f38:	d101      	bne.n	8003f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f3a:	4b44      	ldr	r3, [pc, #272]	@ (800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f3c:	e001      	b.n	8003f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f46:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60bb      	str	r3, [r7, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	f043 0204 	orr.w	r2, r3, #4
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff fe4a 	bl	8003c04 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f70:	e089      	b.n	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d107      	bne.n	8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8be 	bl	8004108 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d107      	bne.n	8003fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f8fd 	bl	80041a0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fac:	2b40      	cmp	r3, #64	@ 0x40
 8003fae:	d12f      	bne.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d02a      	beq.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fc8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1e      	ldr	r2, [pc, #120]	@ (8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d101      	bne.n	8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fd6:	e001      	b.n	8003fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4919      	ldr	r1, [pc, #100]	@ (8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fe4:	428b      	cmp	r3, r1
 8003fe6:	d101      	bne.n	8003fec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003fe8:	4b18      	ldr	r3, [pc, #96]	@ (800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fea:	e001      	b.n	8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003fec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ff0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ff4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	f043 0202 	orr.w	r2, r3, #2
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fdfa 	bl	8003c04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b08      	cmp	r3, #8
 8004018:	d136      	bne.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d031      	beq.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a07      	ldr	r2, [pc, #28]	@ (8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d101      	bne.n	8004032 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800402e:	4b07      	ldr	r3, [pc, #28]	@ (800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004030:	e001      	b.n	8004036 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004032:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4902      	ldr	r1, [pc, #8]	@ (8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800403e:	428b      	cmp	r3, r1
 8004040:	d106      	bne.n	8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004042:	4b02      	ldr	r3, [pc, #8]	@ (800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004044:	e006      	b.n	8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004046:	bf00      	nop
 8004048:	40003800 	.word	0x40003800
 800404c:	40003400 	.word	0x40003400
 8004050:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004054:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004058:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004068:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004076:	f043 0204 	orr.w	r2, r3, #4
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff fdc0 	bl	8003c04 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004084:	e000      	b.n	8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004086:	bf00      	nop
}
 8004088:	bf00      	nop
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	1c99      	adds	r1, r3, #2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6251      	str	r1, [r2, #36]	@ 0x24
 80040b6:	881a      	ldrh	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d113      	bne.n	80040fe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d106      	bne.n	80040fe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff ffc9 	bl	8004090 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004114:	1c99      	adds	r1, r3, #2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6251      	str	r1, [r2, #36]	@ 0x24
 800411a:	8819      	ldrh	r1, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1d      	ldr	r2, [pc, #116]	@ (8004198 <I2SEx_TxISR_I2SExt+0x90>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d101      	bne.n	800412a <I2SEx_TxISR_I2SExt+0x22>
 8004126:	4b1d      	ldr	r3, [pc, #116]	@ (800419c <I2SEx_TxISR_I2SExt+0x94>)
 8004128:	e001      	b.n	800412e <I2SEx_TxISR_I2SExt+0x26>
 800412a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800412e:	460a      	mov	r2, r1
 8004130:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d121      	bne.n	800418e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a12      	ldr	r2, [pc, #72]	@ (8004198 <I2SEx_TxISR_I2SExt+0x90>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d101      	bne.n	8004158 <I2SEx_TxISR_I2SExt+0x50>
 8004154:	4b11      	ldr	r3, [pc, #68]	@ (800419c <I2SEx_TxISR_I2SExt+0x94>)
 8004156:	e001      	b.n	800415c <I2SEx_TxISR_I2SExt+0x54>
 8004158:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	490d      	ldr	r1, [pc, #52]	@ (8004198 <I2SEx_TxISR_I2SExt+0x90>)
 8004164:	428b      	cmp	r3, r1
 8004166:	d101      	bne.n	800416c <I2SEx_TxISR_I2SExt+0x64>
 8004168:	4b0c      	ldr	r3, [pc, #48]	@ (800419c <I2SEx_TxISR_I2SExt+0x94>)
 800416a:	e001      	b.n	8004170 <I2SEx_TxISR_I2SExt+0x68>
 800416c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004170:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004174:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b00      	cmp	r3, #0
 800417e:	d106      	bne.n	800418e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ff81 	bl	8004090 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800418e:	bf00      	nop
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40003800 	.word	0x40003800
 800419c:	40003400 	.word	0x40003400

080041a0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68d8      	ldr	r0, [r3, #12]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b2:	1c99      	adds	r1, r3, #2
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80041b8:	b282      	uxth	r2, r0
 80041ba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d113      	bne.n	80041fc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041e2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff ff4a 	bl	8004090 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041fc:	bf00      	nop
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a20      	ldr	r2, [pc, #128]	@ (8004294 <I2SEx_RxISR_I2SExt+0x90>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d101      	bne.n	800421a <I2SEx_RxISR_I2SExt+0x16>
 8004216:	4b20      	ldr	r3, [pc, #128]	@ (8004298 <I2SEx_RxISR_I2SExt+0x94>)
 8004218:	e001      	b.n	800421e <I2SEx_RxISR_I2SExt+0x1a>
 800421a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800421e:	68d8      	ldr	r0, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004224:	1c99      	adds	r1, r3, #2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800422a:	b282      	uxth	r2, r0
 800422c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d121      	bne.n	800428a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a12      	ldr	r2, [pc, #72]	@ (8004294 <I2SEx_RxISR_I2SExt+0x90>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d101      	bne.n	8004254 <I2SEx_RxISR_I2SExt+0x50>
 8004250:	4b11      	ldr	r3, [pc, #68]	@ (8004298 <I2SEx_RxISR_I2SExt+0x94>)
 8004252:	e001      	b.n	8004258 <I2SEx_RxISR_I2SExt+0x54>
 8004254:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	490d      	ldr	r1, [pc, #52]	@ (8004294 <I2SEx_RxISR_I2SExt+0x90>)
 8004260:	428b      	cmp	r3, r1
 8004262:	d101      	bne.n	8004268 <I2SEx_RxISR_I2SExt+0x64>
 8004264:	4b0c      	ldr	r3, [pc, #48]	@ (8004298 <I2SEx_RxISR_I2SExt+0x94>)
 8004266:	e001      	b.n	800426c <I2SEx_RxISR_I2SExt+0x68>
 8004268:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800426c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004270:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff ff03 	bl	8004090 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40003800 	.word	0x40003800
 8004298:	40003400 	.word	0x40003400

0800429c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e267      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d075      	beq.n	80043a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042ba:	4b88      	ldr	r3, [pc, #544]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 030c 	and.w	r3, r3, #12
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d00c      	beq.n	80042e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c6:	4b85      	ldr	r3, [pc, #532]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d112      	bne.n	80042f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042d2:	4b82      	ldr	r3, [pc, #520]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042de:	d10b      	bne.n	80042f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	4b7e      	ldr	r3, [pc, #504]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d05b      	beq.n	80043a4 <HAL_RCC_OscConfig+0x108>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d157      	bne.n	80043a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e242      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004300:	d106      	bne.n	8004310 <HAL_RCC_OscConfig+0x74>
 8004302:	4b76      	ldr	r3, [pc, #472]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a75      	ldr	r2, [pc, #468]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e01d      	b.n	800434c <HAL_RCC_OscConfig+0xb0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004318:	d10c      	bne.n	8004334 <HAL_RCC_OscConfig+0x98>
 800431a:	4b70      	ldr	r3, [pc, #448]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a6f      	ldr	r2, [pc, #444]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 8004320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b6d      	ldr	r3, [pc, #436]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a6c      	ldr	r2, [pc, #432]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e00b      	b.n	800434c <HAL_RCC_OscConfig+0xb0>
 8004334:	4b69      	ldr	r3, [pc, #420]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a68      	ldr	r2, [pc, #416]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 800433a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	4b66      	ldr	r3, [pc, #408]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a65      	ldr	r2, [pc, #404]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 8004346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800434a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004354:	f7fc fd9c 	bl	8000e90 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800435c:	f7fc fd98 	bl	8000e90 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	@ 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e207      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	4b5b      	ldr	r3, [pc, #364]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0xc0>
 800437a:	e014      	b.n	80043a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fc fd88 	bl	8000e90 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004384:	f7fc fd84 	bl	8000e90 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	@ 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e1f3      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	4b51      	ldr	r3, [pc, #324]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0xe8>
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d063      	beq.n	800447a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043b2:	4b4a      	ldr	r3, [pc, #296]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00b      	beq.n	80043d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043be:	4b47      	ldr	r3, [pc, #284]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d11c      	bne.n	8004404 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ca:	4b44      	ldr	r3, [pc, #272]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d116      	bne.n	8004404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d6:	4b41      	ldr	r3, [pc, #260]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <HAL_RCC_OscConfig+0x152>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d001      	beq.n	80043ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e1c7      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ee:	4b3b      	ldr	r3, [pc, #236]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4937      	ldr	r1, [pc, #220]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004402:	e03a      	b.n	800447a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d020      	beq.n	800444e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800440c:	4b34      	ldr	r3, [pc, #208]	@ (80044e0 <HAL_RCC_OscConfig+0x244>)
 800440e:	2201      	movs	r2, #1
 8004410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004412:	f7fc fd3d 	bl	8000e90 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441a:	f7fc fd39 	bl	8000e90 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e1a8      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442c:	4b2b      	ldr	r3, [pc, #172]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004438:	4b28      	ldr	r3, [pc, #160]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4925      	ldr	r1, [pc, #148]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 8004448:	4313      	orrs	r3, r2
 800444a:	600b      	str	r3, [r1, #0]
 800444c:	e015      	b.n	800447a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800444e:	4b24      	ldr	r3, [pc, #144]	@ (80044e0 <HAL_RCC_OscConfig+0x244>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004454:	f7fc fd1c 	bl	8000e90 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445c:	f7fc fd18 	bl	8000e90 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e187      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446e:	4b1b      	ldr	r3, [pc, #108]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d036      	beq.n	80044f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d016      	beq.n	80044bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800448e:	4b15      	ldr	r3, [pc, #84]	@ (80044e4 <HAL_RCC_OscConfig+0x248>)
 8004490:	2201      	movs	r2, #1
 8004492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fc fcfc 	bl	8000e90 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800449c:	f7fc fcf8 	bl	8000e90 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e167      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ae:	4b0b      	ldr	r3, [pc, #44]	@ (80044dc <HAL_RCC_OscConfig+0x240>)
 80044b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0x200>
 80044ba:	e01b      	b.n	80044f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044bc:	4b09      	ldr	r3, [pc, #36]	@ (80044e4 <HAL_RCC_OscConfig+0x248>)
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c2:	f7fc fce5 	bl	8000e90 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c8:	e00e      	b.n	80044e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ca:	f7fc fce1 	bl	8000e90 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d907      	bls.n	80044e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e150      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
 80044dc:	40023800 	.word	0x40023800
 80044e0:	42470000 	.word	0x42470000
 80044e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e8:	4b88      	ldr	r3, [pc, #544]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 80044ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1ea      	bne.n	80044ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8097 	beq.w	8004630 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004506:	4b81      	ldr	r3, [pc, #516]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	4b7d      	ldr	r3, [pc, #500]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	4a7c      	ldr	r2, [pc, #496]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 800451c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004520:	6413      	str	r3, [r2, #64]	@ 0x40
 8004522:	4b7a      	ldr	r3, [pc, #488]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452e:	2301      	movs	r3, #1
 8004530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004532:	4b77      	ldr	r3, [pc, #476]	@ (8004710 <HAL_RCC_OscConfig+0x474>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d118      	bne.n	8004570 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800453e:	4b74      	ldr	r3, [pc, #464]	@ (8004710 <HAL_RCC_OscConfig+0x474>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a73      	ldr	r2, [pc, #460]	@ (8004710 <HAL_RCC_OscConfig+0x474>)
 8004544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454a:	f7fc fca1 	bl	8000e90 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004552:	f7fc fc9d 	bl	8000e90 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e10c      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004564:	4b6a      	ldr	r3, [pc, #424]	@ (8004710 <HAL_RCC_OscConfig+0x474>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d106      	bne.n	8004586 <HAL_RCC_OscConfig+0x2ea>
 8004578:	4b64      	ldr	r3, [pc, #400]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457c:	4a63      	ldr	r2, [pc, #396]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6713      	str	r3, [r2, #112]	@ 0x70
 8004584:	e01c      	b.n	80045c0 <HAL_RCC_OscConfig+0x324>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b05      	cmp	r3, #5
 800458c:	d10c      	bne.n	80045a8 <HAL_RCC_OscConfig+0x30c>
 800458e:	4b5f      	ldr	r3, [pc, #380]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004592:	4a5e      	ldr	r2, [pc, #376]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 8004594:	f043 0304 	orr.w	r3, r3, #4
 8004598:	6713      	str	r3, [r2, #112]	@ 0x70
 800459a:	4b5c      	ldr	r3, [pc, #368]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459e:	4a5b      	ldr	r2, [pc, #364]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a6:	e00b      	b.n	80045c0 <HAL_RCC_OscConfig+0x324>
 80045a8:	4b58      	ldr	r3, [pc, #352]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 80045aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ac:	4a57      	ldr	r2, [pc, #348]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b4:	4b55      	ldr	r3, [pc, #340]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 80045b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b8:	4a54      	ldr	r2, [pc, #336]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 80045ba:	f023 0304 	bic.w	r3, r3, #4
 80045be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d015      	beq.n	80045f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c8:	f7fc fc62 	bl	8000e90 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ce:	e00a      	b.n	80045e6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d0:	f7fc fc5e 	bl	8000e90 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e0cb      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e6:	4b49      	ldr	r3, [pc, #292]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0ee      	beq.n	80045d0 <HAL_RCC_OscConfig+0x334>
 80045f2:	e014      	b.n	800461e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f4:	f7fc fc4c 	bl	8000e90 <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fc:	f7fc fc48 	bl	8000e90 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e0b5      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004612:	4b3e      	ldr	r3, [pc, #248]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1ee      	bne.n	80045fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800461e:	7dfb      	ldrb	r3, [r7, #23]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d105      	bne.n	8004630 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004624:	4b39      	ldr	r3, [pc, #228]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 8004626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004628:	4a38      	ldr	r2, [pc, #224]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 800462a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800462e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80a1 	beq.w	800477c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800463a:	4b34      	ldr	r3, [pc, #208]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b08      	cmp	r3, #8
 8004644:	d05c      	beq.n	8004700 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d141      	bne.n	80046d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464e:	4b31      	ldr	r3, [pc, #196]	@ (8004714 <HAL_RCC_OscConfig+0x478>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fc fc1c 	bl	8000e90 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465c:	f7fc fc18 	bl	8000e90 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e087      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466e:	4b27      	ldr	r3, [pc, #156]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69da      	ldr	r2, [r3, #28]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	019b      	lsls	r3, r3, #6
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	3b01      	subs	r3, #1
 8004694:	041b      	lsls	r3, r3, #16
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469c:	061b      	lsls	r3, r3, #24
 800469e:	491b      	ldr	r1, [pc, #108]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004714 <HAL_RCC_OscConfig+0x478>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046aa:	f7fc fbf1 	bl	8000e90 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b2:	f7fc fbed 	bl	8000e90 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e05c      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c4:	4b11      	ldr	r3, [pc, #68]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0f0      	beq.n	80046b2 <HAL_RCC_OscConfig+0x416>
 80046d0:	e054      	b.n	800477c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d2:	4b10      	ldr	r3, [pc, #64]	@ (8004714 <HAL_RCC_OscConfig+0x478>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fc fbda 	bl	8000e90 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e0:	f7fc fbd6 	bl	8000e90 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e045      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	4b06      	ldr	r3, [pc, #24]	@ (800470c <HAL_RCC_OscConfig+0x470>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x444>
 80046fe:	e03d      	b.n	800477c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d107      	bne.n	8004718 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e038      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
 800470c:	40023800 	.word	0x40023800
 8004710:	40007000 	.word	0x40007000
 8004714:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004718:	4b1b      	ldr	r3, [pc, #108]	@ (8004788 <HAL_RCC_OscConfig+0x4ec>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d028      	beq.n	8004778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d121      	bne.n	8004778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d11a      	bne.n	8004778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004748:	4013      	ands	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800474e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004750:	4293      	cmp	r3, r2
 8004752:	d111      	bne.n	8004778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475e:	085b      	lsrs	r3, r3, #1
 8004760:	3b01      	subs	r3, #1
 8004762:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d107      	bne.n	8004778 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d001      	beq.n	800477c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40023800 	.word	0x40023800

0800478c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0cc      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047a0:	4b68      	ldr	r3, [pc, #416]	@ (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d90c      	bls.n	80047c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ae:	4b65      	ldr	r3, [pc, #404]	@ (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b6:	4b63      	ldr	r3, [pc, #396]	@ (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d001      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0b8      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e0:	4b59      	ldr	r3, [pc, #356]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a58      	ldr	r2, [pc, #352]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f8:	4b53      	ldr	r3, [pc, #332]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4a52      	ldr	r2, [pc, #328]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80047fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004804:	4b50      	ldr	r3, [pc, #320]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	494d      	ldr	r1, [pc, #308]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d044      	beq.n	80048ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d107      	bne.n	800483a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482a:	4b47      	ldr	r3, [pc, #284]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d119      	bne.n	800486a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e07f      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d003      	beq.n	800484a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004846:	2b03      	cmp	r3, #3
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484a:	4b3f      	ldr	r3, [pc, #252]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e06f      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485a:	4b3b      	ldr	r3, [pc, #236]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e067      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800486a:	4b37      	ldr	r3, [pc, #220]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f023 0203 	bic.w	r2, r3, #3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	4934      	ldr	r1, [pc, #208]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	4313      	orrs	r3, r2
 800487a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800487c:	f7fc fb08 	bl	8000e90 <HAL_GetTick>
 8004880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004882:	e00a      	b.n	800489a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004884:	f7fc fb04 	bl	8000e90 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004892:	4293      	cmp	r3, r2
 8004894:	d901      	bls.n	800489a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e04f      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	4b2b      	ldr	r3, [pc, #172]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 020c 	and.w	r2, r3, #12
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d1eb      	bne.n	8004884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048ac:	4b25      	ldr	r3, [pc, #148]	@ (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d20c      	bcs.n	80048d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b22      	ldr	r3, [pc, #136]	@ (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b20      	ldr	r3, [pc, #128]	@ (8004944 <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e032      	b.n	800493a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e0:	4b19      	ldr	r3, [pc, #100]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	4916      	ldr	r1, [pc, #88]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048fe:	4b12      	ldr	r3, [pc, #72]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	490e      	ldr	r1, [pc, #56]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004912:	f000 f821 	bl	8004958 <HAL_RCC_GetSysClockFreq>
 8004916:	4602      	mov	r2, r0
 8004918:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	490a      	ldr	r1, [pc, #40]	@ (800494c <HAL_RCC_ClockConfig+0x1c0>)
 8004924:	5ccb      	ldrb	r3, [r1, r3]
 8004926:	fa22 f303 	lsr.w	r3, r2, r3
 800492a:	4a09      	ldr	r2, [pc, #36]	@ (8004950 <HAL_RCC_ClockConfig+0x1c4>)
 800492c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800492e:	4b09      	ldr	r3, [pc, #36]	@ (8004954 <HAL_RCC_ClockConfig+0x1c8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fc fa68 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40023c00 	.word	0x40023c00
 8004948:	40023800 	.word	0x40023800
 800494c:	08008bd4 	.word	0x08008bd4
 8004950:	20000000 	.word	0x20000000
 8004954:	20000004 	.word	0x20000004

08004958 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800495c:	b094      	sub	sp, #80	@ 0x50
 800495e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004970:	4b79      	ldr	r3, [pc, #484]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b08      	cmp	r3, #8
 800497a:	d00d      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x40>
 800497c:	2b08      	cmp	r3, #8
 800497e:	f200 80e1 	bhi.w	8004b44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_RCC_GetSysClockFreq+0x34>
 8004986:	2b04      	cmp	r3, #4
 8004988:	d003      	beq.n	8004992 <HAL_RCC_GetSysClockFreq+0x3a>
 800498a:	e0db      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800498c:	4b73      	ldr	r3, [pc, #460]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x204>)
 800498e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004990:	e0db      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004992:	4b73      	ldr	r3, [pc, #460]	@ (8004b60 <HAL_RCC_GetSysClockFreq+0x208>)
 8004994:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004996:	e0d8      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004998:	4b6f      	ldr	r3, [pc, #444]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x200>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d063      	beq.n	8004a76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ae:	4b6a      	ldr	r3, [pc, #424]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	099b      	lsrs	r3, r3, #6
 80049b4:	2200      	movs	r2, #0
 80049b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049c2:	2300      	movs	r3, #0
 80049c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049ca:	4622      	mov	r2, r4
 80049cc:	462b      	mov	r3, r5
 80049ce:	f04f 0000 	mov.w	r0, #0
 80049d2:	f04f 0100 	mov.w	r1, #0
 80049d6:	0159      	lsls	r1, r3, #5
 80049d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049dc:	0150      	lsls	r0, r2, #5
 80049de:	4602      	mov	r2, r0
 80049e0:	460b      	mov	r3, r1
 80049e2:	4621      	mov	r1, r4
 80049e4:	1a51      	subs	r1, r2, r1
 80049e6:	6139      	str	r1, [r7, #16]
 80049e8:	4629      	mov	r1, r5
 80049ea:	eb63 0301 	sbc.w	r3, r3, r1
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049fc:	4659      	mov	r1, fp
 80049fe:	018b      	lsls	r3, r1, #6
 8004a00:	4651      	mov	r1, sl
 8004a02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a06:	4651      	mov	r1, sl
 8004a08:	018a      	lsls	r2, r1, #6
 8004a0a:	4651      	mov	r1, sl
 8004a0c:	ebb2 0801 	subs.w	r8, r2, r1
 8004a10:	4659      	mov	r1, fp
 8004a12:	eb63 0901 	sbc.w	r9, r3, r1
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a2a:	4690      	mov	r8, r2
 8004a2c:	4699      	mov	r9, r3
 8004a2e:	4623      	mov	r3, r4
 8004a30:	eb18 0303 	adds.w	r3, r8, r3
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	462b      	mov	r3, r5
 8004a38:	eb49 0303 	adc.w	r3, r9, r3
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	f04f 0200 	mov.w	r2, #0
 8004a42:	f04f 0300 	mov.w	r3, #0
 8004a46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a4a:	4629      	mov	r1, r5
 8004a4c:	024b      	lsls	r3, r1, #9
 8004a4e:	4621      	mov	r1, r4
 8004a50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a54:	4621      	mov	r1, r4
 8004a56:	024a      	lsls	r2, r1, #9
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a5e:	2200      	movs	r2, #0
 8004a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a68:	f7fb fbae 	bl	80001c8 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4613      	mov	r3, r2
 8004a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a74:	e058      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a76:	4b38      	ldr	r3, [pc, #224]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	099b      	lsrs	r3, r3, #6
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	4618      	mov	r0, r3
 8004a80:	4611      	mov	r1, r2
 8004a82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a86:	623b      	str	r3, [r7, #32]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a90:	4642      	mov	r2, r8
 8004a92:	464b      	mov	r3, r9
 8004a94:	f04f 0000 	mov.w	r0, #0
 8004a98:	f04f 0100 	mov.w	r1, #0
 8004a9c:	0159      	lsls	r1, r3, #5
 8004a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aa2:	0150      	lsls	r0, r2, #5
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4641      	mov	r1, r8
 8004aaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8004aae:	4649      	mov	r1, r9
 8004ab0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ac0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ac4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ac8:	ebb2 040a 	subs.w	r4, r2, sl
 8004acc:	eb63 050b 	sbc.w	r5, r3, fp
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	f04f 0300 	mov.w	r3, #0
 8004ad8:	00eb      	lsls	r3, r5, #3
 8004ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ade:	00e2      	lsls	r2, r4, #3
 8004ae0:	4614      	mov	r4, r2
 8004ae2:	461d      	mov	r5, r3
 8004ae4:	4643      	mov	r3, r8
 8004ae6:	18e3      	adds	r3, r4, r3
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	464b      	mov	r3, r9
 8004aec:	eb45 0303 	adc.w	r3, r5, r3
 8004af0:	607b      	str	r3, [r7, #4]
 8004af2:	f04f 0200 	mov.w	r2, #0
 8004af6:	f04f 0300 	mov.w	r3, #0
 8004afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004afe:	4629      	mov	r1, r5
 8004b00:	028b      	lsls	r3, r1, #10
 8004b02:	4621      	mov	r1, r4
 8004b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b08:	4621      	mov	r1, r4
 8004b0a:	028a      	lsls	r2, r1, #10
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b12:	2200      	movs	r2, #0
 8004b14:	61bb      	str	r3, [r7, #24]
 8004b16:	61fa      	str	r2, [r7, #28]
 8004b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b1c:	f7fb fb54 	bl	80001c8 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4613      	mov	r3, r2
 8004b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b28:	4b0b      	ldr	r3, [pc, #44]	@ (8004b58 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	0c1b      	lsrs	r3, r3, #16
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	3301      	adds	r3, #1
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b42:	e002      	b.n	8004b4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b44:	4b05      	ldr	r3, [pc, #20]	@ (8004b5c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3750      	adds	r7, #80	@ 0x50
 8004b50:	46bd      	mov	sp, r7
 8004b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	00f42400 	.word	0x00f42400
 8004b60:	007a1200 	.word	0x007a1200

08004b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b68:	4b03      	ldr	r3, [pc, #12]	@ (8004b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	20000000 	.word	0x20000000

08004b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b80:	f7ff fff0 	bl	8004b64 <HAL_RCC_GetHCLKFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	0a9b      	lsrs	r3, r3, #10
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	4903      	ldr	r1, [pc, #12]	@ (8004ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	08008be4 	.word	0x08008be4

08004ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d105      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d035      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bcc:	4b62      	ldr	r3, [pc, #392]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bd2:	f7fc f95d 	bl	8000e90 <HAL_GetTick>
 8004bd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bd8:	e008      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bda:	f7fc f959 	bl	8000e90 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d901      	bls.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0b0      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bec:	4b5b      	ldr	r3, [pc, #364]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1f0      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	019a      	lsls	r2, r3, #6
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	071b      	lsls	r3, r3, #28
 8004c04:	4955      	ldr	r1, [pc, #340]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c0c:	4b52      	ldr	r3, [pc, #328]	@ (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c12:	f7fc f93d 	bl	8000e90 <HAL_GetTick>
 8004c16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c18:	e008      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c1a:	f7fc f939 	bl	8000e90 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e090      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d0f0      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8083 	beq.w	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	4b44      	ldr	r3, [pc, #272]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	4a43      	ldr	r2, [pc, #268]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c56:	4b41      	ldr	r3, [pc, #260]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c62:	4b3f      	ldr	r3, [pc, #252]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a3e      	ldr	r2, [pc, #248]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c6c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c6e:	f7fc f90f 	bl	8000e90 <HAL_GetTick>
 8004c72:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c74:	e008      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c76:	f7fc f90b 	bl	8000e90 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e062      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c88:	4b35      	ldr	r3, [pc, #212]	@ (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0f0      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c94:	4b31      	ldr	r3, [pc, #196]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c9c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d02f      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d028      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cbc:	4b29      	ldr	r3, [pc, #164]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc2:	4b28      	ldr	r3, [pc, #160]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cc8:	4a24      	ldr	r2, [pc, #144]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cce:	4b23      	ldr	r3, [pc, #140]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d114      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fc f8d9 	bl	8000e90 <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce2:	f7fc f8d5 	bl	8000e90 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e02a      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf8:	4b18      	ldr	r3, [pc, #96]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0ee      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d10:	d10d      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d12:	4b12      	ldr	r3, [pc, #72]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d26:	490d      	ldr	r1, [pc, #52]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	608b      	str	r3, [r1, #8]
 8004d2c:	e005      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	4a0a      	ldr	r2, [pc, #40]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d34:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d38:	6093      	str	r3, [r2, #8]
 8004d3a:	4b08      	ldr	r3, [pc, #32]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d46:	4905      	ldr	r1, [pc, #20]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	42470068 	.word	0x42470068
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	40007000 	.word	0x40007000
 8004d64:	42470e40 	.word	0x42470e40

08004d68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d13f      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d86:	4b24      	ldr	r3, [pc, #144]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d8e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d006      	beq.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d9c:	d12f      	bne.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004da0:	617b      	str	r3, [r7, #20]
          break;
 8004da2:	e02f      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004da4:	4b1c      	ldr	r3, [pc, #112]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004db0:	d108      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004db2:	4b19      	ldr	r3, [pc, #100]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dba:	4a19      	ldr	r2, [pc, #100]	@ (8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	e007      	b.n	8004dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dc4:	4b14      	ldr	r3, [pc, #80]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dcc:	4a15      	ldr	r2, [pc, #84]	@ (8004e24 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004dd4:	4b10      	ldr	r3, [pc, #64]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dda:	099b      	lsrs	r3, r3, #6
 8004ddc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	fb02 f303 	mul.w	r3, r2, r3
 8004de6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004de8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dee:	0f1b      	lsrs	r3, r3, #28
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfa:	617b      	str	r3, [r7, #20]
          break;
 8004dfc:	e002      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
          break;
 8004e02:	bf00      	nop
        }
      }
      break;
 8004e04:	e000      	b.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004e06:	bf00      	nop
    }
  }
  return frequency;
 8004e08:	697b      	ldr	r3, [r7, #20]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	371c      	adds	r7, #28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	00bb8000 	.word	0x00bb8000
 8004e20:	007a1200 	.word	0x007a1200
 8004e24:	00f42400 	.word	0x00f42400

08004e28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e07b      	b.n	8004f32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d108      	bne.n	8004e54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e4a:	d009      	beq.n	8004e60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	61da      	str	r2, [r3, #28]
 8004e52:	e005      	b.n	8004e60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fb fea8 	bl	8000bd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ee4:	ea42 0103 	orr.w	r1, r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	f003 0104 	and.w	r1, r3, #4
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	f003 0210 	and.w	r2, r3, #16
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	f107 001c 	add.w	r0, r7, #28
 8004f48:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f4c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d123      	bne.n	8004f9c <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f58:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f7c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d105      	bne.n	8004f90 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f9dc 	bl	800534e <USB_CoreReset>
 8004f96:	4603      	mov	r3, r0
 8004f98:	73fb      	strb	r3, [r7, #15]
 8004f9a:	e01b      	b.n	8004fd4 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f9d0 	bl	800534e <USB_CoreReset>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fb2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fbe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fc6:	e005      	b.n	8004fd4 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004fd4:	7fbb      	ldrb	r3, [r7, #30]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d10b      	bne.n	8004ff2 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f043 0206 	orr.w	r2, r3, #6
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f043 0220 	orr.w	r2, r3, #32
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ffe:	b004      	add	sp, #16
 8005000:	4770      	bx	lr

08005002 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f043 0201 	orr.w	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f023 0201 	bic.w	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	460b      	mov	r3, r1
 8005050:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005052:	2300      	movs	r3, #0
 8005054:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d115      	bne.n	8005094 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005074:	200a      	movs	r0, #10
 8005076:	f7fb ff17 	bl	8000ea8 <HAL_Delay>
      ms += 10U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	330a      	adds	r3, #10
 800507e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f956 	bl	8005332 <USB_GetMode>
 8005086:	4603      	mov	r3, r0
 8005088:	2b01      	cmp	r3, #1
 800508a:	d01e      	beq.n	80050ca <USB_SetCurrentMode+0x84>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005090:	d9f0      	bls.n	8005074 <USB_SetCurrentMode+0x2e>
 8005092:	e01a      	b.n	80050ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d115      	bne.n	80050c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050a6:	200a      	movs	r0, #10
 80050a8:	f7fb fefe 	bl	8000ea8 <HAL_Delay>
      ms += 10U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	330a      	adds	r3, #10
 80050b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f93d 	bl	8005332 <USB_GetMode>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d005      	beq.n	80050ca <USB_SetCurrentMode+0x84>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80050c2:	d9f0      	bls.n	80050a6 <USB_SetCurrentMode+0x60>
 80050c4:	e001      	b.n	80050ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e005      	b.n	80050d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2bc8      	cmp	r3, #200	@ 0xc8
 80050ce:	d101      	bne.n	80050d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	3301      	adds	r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050f8:	d901      	bls.n	80050fe <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e01b      	b.n	8005136 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	daf2      	bge.n	80050ec <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	019b      	lsls	r3, r3, #6
 800510e:	f043 0220 	orr.w	r2, r3, #32
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3301      	adds	r3, #1
 800511a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005122:	d901      	bls.n	8005128 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e006      	b.n	8005136 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b20      	cmp	r3, #32
 8005132:	d0f0      	beq.n	8005116 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005142:	b480      	push	{r7}
 8005144:	b085      	sub	sp, #20
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	3301      	adds	r3, #1
 8005152:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800515a:	d901      	bls.n	8005160 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e018      	b.n	8005192 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	daf2      	bge.n	800514e <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2210      	movs	r2, #16
 8005170:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3301      	adds	r3, #1
 8005176:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800517e:	d901      	bls.n	8005184 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e006      	b.n	8005192 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	f003 0310 	and.w	r3, r3, #16
 800518c:	2b10      	cmp	r3, #16
 800518e:	d0f0      	beq.n	8005172 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800519e:	b480      	push	{r7}
 80051a0:	b089      	sub	sp, #36	@ 0x24
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	4611      	mov	r1, r2
 80051aa:	461a      	mov	r2, r3
 80051ac:	460b      	mov	r3, r1
 80051ae:	71fb      	strb	r3, [r7, #7]
 80051b0:	4613      	mov	r3, r2
 80051b2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d123      	bne.n	800520c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051c4:	88bb      	ldrh	r3, [r7, #4]
 80051c6:	3303      	adds	r3, #3
 80051c8:	089b      	lsrs	r3, r3, #2
 80051ca:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051cc:	2300      	movs	r3, #0
 80051ce:	61bb      	str	r3, [r7, #24]
 80051d0:	e018      	b.n	8005204 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	031a      	lsls	r2, r3, #12
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051de:	461a      	mov	r2, r3
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	3301      	adds	r3, #1
 80051ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	3301      	adds	r3, #1
 80051f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3301      	adds	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	3301      	adds	r3, #1
 80051fc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	3301      	adds	r3, #1
 8005202:	61bb      	str	r3, [r7, #24]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	429a      	cmp	r2, r3
 800520a:	d3e2      	bcc.n	80051d2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3724      	adds	r7, #36	@ 0x24
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800521a:	b480      	push	{r7}
 800521c:	b08b      	sub	sp, #44	@ 0x2c
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	4613      	mov	r3, r2
 8005226:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	089b      	lsrs	r3, r3, #2
 8005234:	b29b      	uxth	r3, r3
 8005236:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005238:	88fb      	ldrh	r3, [r7, #6]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005240:	2300      	movs	r3, #0
 8005242:	623b      	str	r3, [r7, #32]
 8005244:	e014      	b.n	8005270 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	601a      	str	r2, [r3, #0]
    pDest++;
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	3301      	adds	r3, #1
 8005256:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	3301      	adds	r3, #1
 800525c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	3301      	adds	r3, #1
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	3301      	adds	r3, #1
 8005268:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	3301      	adds	r3, #1
 800526e:	623b      	str	r3, [r7, #32]
 8005270:	6a3a      	ldr	r2, [r7, #32]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	429a      	cmp	r2, r3
 8005276:	d3e6      	bcc.n	8005246 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005278:	8bfb      	ldrh	r3, [r7, #30]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01e      	beq.n	80052bc <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005288:	461a      	mov	r2, r3
 800528a:	f107 0310 	add.w	r3, r7, #16
 800528e:	6812      	ldr	r2, [r2, #0]
 8005290:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	fa22 f303 	lsr.w	r3, r2, r3
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	701a      	strb	r2, [r3, #0]
      i++;
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	3301      	adds	r3, #1
 80052a8:	623b      	str	r3, [r7, #32]
      pDest++;
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	3301      	adds	r3, #1
 80052ae:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80052b0:	8bfb      	ldrh	r3, [r7, #30]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052b6:	8bfb      	ldrh	r3, [r7, #30]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1ea      	bne.n	8005292 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052be:	4618      	mov	r0, r3
 80052c0:	372c      	adds	r7, #44	@ 0x2c
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4013      	ands	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052e2:	68fb      	ldr	r3, [r7, #12]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	4013      	ands	r3, r2
 8005322:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005324:	68bb      	ldr	r3, [r7, #8]
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f003 0301 	and.w	r3, r3, #1
}
 8005342:	4618      	mov	r0, r3
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3301      	adds	r3, #1
 800535e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005366:	d901      	bls.n	800536c <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e022      	b.n	80053b2 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	daf2      	bge.n	800535a <USB_CoreReset+0xc>

  count = 10U;
 8005374:	230a      	movs	r3, #10
 8005376:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005378:	e002      	b.n	8005380 <USB_CoreReset+0x32>
  {
    count--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3b01      	subs	r3, #1
 800537e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1f9      	bne.n	800537a <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f043 0201 	orr.w	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3301      	adds	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800539e:	d901      	bls.n	80053a4 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e006      	b.n	80053b2 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d0f0      	beq.n	8005392 <USB_CoreReset+0x44>

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053c0:	b084      	sub	sp, #16
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b086      	sub	sp, #24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80053ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053e0:	461a      	mov	r2, r3
 80053e2:	2300      	movs	r3, #0
 80053e4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005402:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d119      	bne.n	800544a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005416:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800541a:	2b01      	cmp	r3, #1
 800541c:	d10a      	bne.n	8005434 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800542c:	f043 0304 	orr.w	r3, r3, #4
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e014      	b.n	800545e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005442:	f023 0304 	bic.w	r3, r3, #4
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	e009      	b.n	800545e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005458:	f023 0304 	bic.w	r3, r3, #4
 800545c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800545e:	2110      	movs	r1, #16
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff fe3c 	bl	80050de <USB_FlushTxFifo>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff fe66 	bl	8005142 <USB_FlushRxFifo>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005480:	2300      	movs	r3, #0
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	e015      	b.n	80054b2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4413      	add	r3, r2
 800548e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005492:	461a      	mov	r2, r3
 8005494:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005498:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054a6:	461a      	mov	r2, r3
 80054a8:	2300      	movs	r3, #0
 80054aa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	3301      	adds	r3, #1
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80054b6:	461a      	mov	r2, r3
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d3e3      	bcc.n	8005486 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054ca:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a18      	ldr	r2, [pc, #96]	@ (8005530 <USB_HostInit+0x170>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d10b      	bne.n	80054ec <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054da:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a15      	ldr	r2, [pc, #84]	@ (8005534 <USB_HostInit+0x174>)
 80054e0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a14      	ldr	r2, [pc, #80]	@ (8005538 <USB_HostInit+0x178>)
 80054e6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80054ea:	e009      	b.n	8005500 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2280      	movs	r2, #128	@ 0x80
 80054f0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a11      	ldr	r2, [pc, #68]	@ (800553c <USB_HostInit+0x17c>)
 80054f6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a11      	ldr	r2, [pc, #68]	@ (8005540 <USB_HostInit+0x180>)
 80054fc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005500:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f043 0210 	orr.w	r2, r3, #16
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	4b0a      	ldr	r3, [pc, #40]	@ (8005544 <USB_HostInit+0x184>)
 800551a:	4313      	orrs	r3, r2
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800552c:	b004      	add	sp, #16
 800552e:	4770      	bx	lr
 8005530:	40040000 	.word	0x40040000
 8005534:	01000200 	.word	0x01000200
 8005538:	00e00300 	.word	0x00e00300
 800553c:	00600080 	.word	0x00600080
 8005540:	004000e0 	.word	0x004000e0
 8005544:	a3200008 	.word	0xa3200008

08005548 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005566:	f023 0303 	bic.w	r3, r3, #3
 800556a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	68f9      	ldr	r1, [r7, #12]
 800557c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005580:	4313      	orrs	r3, r2
 8005582:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005590:	461a      	mov	r2, r3
 8005592:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005596:	6053      	str	r3, [r2, #4]
 8005598:	e00c      	b.n	80055b4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800559a:	78fb      	ldrb	r3, [r7, #3]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d107      	bne.n	80055b0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055a6:	461a      	mov	r2, r3
 80055a8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80055ac:	6053      	str	r3, [r2, #4]
 80055ae:	e001      	b.n	80055b4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80055e2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80055f2:	2064      	movs	r0, #100	@ 0x64
 80055f4:	f7fb fc58 	bl	8000ea8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005604:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005606:	200a      	movs	r0, #10
 8005608:	f7fb fc4e 	bl	8000ea8 <HAL_Delay>

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	460b      	mov	r3, r1
 8005620:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800563a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <USB_DriveVbus+0x44>
 8005646:	78fb      	ldrb	r3, [r7, #3]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d106      	bne.n	800565a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005654:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005658:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005664:	d109      	bne.n	800567a <USB_DriveVbus+0x64>
 8005666:	78fb      	ldrb	r3, [r7, #3]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d106      	bne.n	800567a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005674:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005678:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	0c5b      	lsrs	r3, r3, #17
 80056a6:	f003 0303 	and.w	r3, r3, #3
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	b29b      	uxth	r3, r3
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b088      	sub	sp, #32
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	4608      	mov	r0, r1
 80056e2:	4611      	mov	r1, r2
 80056e4:	461a      	mov	r2, r3
 80056e6:	4603      	mov	r3, r0
 80056e8:	70fb      	strb	r3, [r7, #3]
 80056ea:	460b      	mov	r3, r1
 80056ec:	70bb      	strb	r3, [r7, #2]
 80056ee:	4613      	mov	r3, r2
 80056f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80056fa:	78fb      	ldrb	r3, [r7, #3]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	4413      	add	r3, r2
 8005702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005706:	461a      	mov	r2, r3
 8005708:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800570c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800570e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005712:	2b03      	cmp	r3, #3
 8005714:	d87c      	bhi.n	8005810 <USB_HC_Init+0x138>
 8005716:	a201      	add	r2, pc, #4	@ (adr r2, 800571c <USB_HC_Init+0x44>)
 8005718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571c:	0800572d 	.word	0x0800572d
 8005720:	080057d3 	.word	0x080057d3
 8005724:	0800572d 	.word	0x0800572d
 8005728:	08005795 	.word	0x08005795
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	4413      	add	r3, r2
 8005734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005738:	461a      	mov	r2, r3
 800573a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800573e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005740:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005744:	2b00      	cmp	r3, #0
 8005746:	da10      	bge.n	800576a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4413      	add	r3, r2
 8005750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	78fa      	ldrb	r2, [r7, #3]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	440a      	add	r2, r1
 800575e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005766:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005768:	e055      	b.n	8005816 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a6f      	ldr	r2, [pc, #444]	@ (800592c <USB_HC_Init+0x254>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d151      	bne.n	8005816 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	4413      	add	r3, r2
 800577a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	78fa      	ldrb	r2, [r7, #3]
 8005782:	0151      	lsls	r1, r2, #5
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	440a      	add	r2, r1
 8005788:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800578c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005790:	60d3      	str	r3, [r2, #12]
      break;
 8005792:	e040      	b.n	8005816 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	4413      	add	r3, r2
 800579c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057a0:	461a      	mov	r2, r3
 80057a2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80057a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	da34      	bge.n	800581a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057b0:	78fb      	ldrb	r3, [r7, #3]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	78fa      	ldrb	r2, [r7, #3]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057ce:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057d0:	e023      	b.n	800581a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057de:	461a      	mov	r2, r3
 80057e0:	f240 2325 	movw	r3, #549	@ 0x225
 80057e4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	da17      	bge.n	800581e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	78fa      	ldrb	r2, [r7, #3]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	440a      	add	r2, r1
 8005804:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005808:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800580c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800580e:	e006      	b.n	800581e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	77fb      	strb	r3, [r7, #31]
      break;
 8005814:	e004      	b.n	8005820 <USB_HC_Init+0x148>
      break;
 8005816:	bf00      	nop
 8005818:	e002      	b.n	8005820 <USB_HC_Init+0x148>
      break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <USB_HC_Init+0x148>
      break;
 800581e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	4413      	add	r3, r2
 8005828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800582c:	461a      	mov	r2, r3
 800582e:	2300      	movs	r3, #0
 8005830:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	78fa      	ldrb	r2, [r7, #3]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	440a      	add	r2, r1
 8005848:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800584c:	f043 0302 	orr.w	r3, r3, #2
 8005850:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005858:	699a      	ldr	r2, [r3, #24]
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	2101      	movs	r1, #1
 8005862:	fa01 f303 	lsl.w	r3, r1, r3
 8005866:	6939      	ldr	r1, [r7, #16]
 8005868:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800586c:	4313      	orrs	r3, r2
 800586e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800587c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005880:	2b00      	cmp	r3, #0
 8005882:	da03      	bge.n	800588c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005884:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e001      	b.n	8005890 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fef9 	bl	8005688 <USB_GetHostSpeed>
 8005896:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005898:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800589c:	2b02      	cmp	r3, #2
 800589e:	d106      	bne.n	80058ae <USB_HC_Init+0x1d6>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d003      	beq.n	80058ae <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058aa:	617b      	str	r3, [r7, #20]
 80058ac:	e001      	b.n	80058b2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058b2:	787b      	ldrb	r3, [r7, #1]
 80058b4:	059b      	lsls	r3, r3, #22
 80058b6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058ba:	78bb      	ldrb	r3, [r7, #2]
 80058bc:	02db      	lsls	r3, r3, #11
 80058be:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058c2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058c8:	049b      	lsls	r3, r3, #18
 80058ca:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058ce:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80058d0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80058d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058d6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	431a      	orrs	r2, r3
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058e0:	78fa      	ldrb	r2, [r7, #3]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80058ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058f0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80058f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d003      	beq.n	8005902 <USB_HC_Init+0x22a>
 80058fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d10f      	bne.n	8005922 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005902:	78fb      	ldrb	r3, [r7, #3]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	0151      	lsls	r1, r2, #5
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	440a      	add	r2, r1
 8005918:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800591c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005920:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005922:	7ffb      	ldrb	r3, [r7, #31]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3720      	adds	r7, #32
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40040000 	.word	0x40040000

08005930 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08c      	sub	sp, #48	@ 0x30
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005948:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800594c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a5d      	ldr	r2, [pc, #372]	@ (8005ac8 <USB_HC_StartXfer+0x198>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d12f      	bne.n	80059b6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005956:	79fb      	ldrb	r3, [r7, #7]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d11c      	bne.n	8005996 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	7c9b      	ldrb	r3, [r3, #18]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <USB_HC_StartXfer+0x3c>
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	7c9b      	ldrb	r3, [r3, #18]
 8005968:	2b02      	cmp	r3, #2
 800596a:	d124      	bne.n	80059b6 <USB_HC_StartXfer+0x86>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	799b      	ldrb	r3, [r3, #6]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d120      	bne.n	80059b6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	4413      	add	r3, r2
 800597c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	0151      	lsls	r1, r2, #5
 8005986:	6a3a      	ldr	r2, [r7, #32]
 8005988:	440a      	add	r2, r1
 800598a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800598e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005992:	60d3      	str	r3, [r2, #12]
 8005994:	e00f      	b.n	80059b6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	791b      	ldrb	r3, [r3, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <USB_HC_StartXfer+0x86>
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	795b      	ldrb	r3, [r3, #5]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d107      	bne.n	80059b6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	4619      	mov	r1, r3
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fb6b 	bl	8006088 <USB_DoPing>
        return HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e232      	b.n	8005e1c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	799b      	ldrb	r3, [r3, #6]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d158      	bne.n	8005a70 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80059be:	2301      	movs	r3, #1
 80059c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	78db      	ldrb	r3, [r3, #3]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	8a92      	ldrh	r2, [r2, #20]
 80059d0:	fb03 f202 	mul.w	r2, r3, r2
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	61da      	str	r2, [r3, #28]
 80059d8:	e07c      	b.n	8005ad4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	7c9b      	ldrb	r3, [r3, #18]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d130      	bne.n	8005a44 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	2bbc      	cmp	r3, #188	@ 0xbc
 80059e8:	d918      	bls.n	8005a1c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	8a9b      	ldrh	r3, [r3, #20]
 80059ee:	461a      	mov	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d003      	beq.n	8005a0c <USB_HC_StartXfer+0xdc>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d103      	bne.n	8005a14 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	60da      	str	r2, [r3, #12]
 8005a12:	e05f      	b.n	8005ad4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2201      	movs	r2, #1
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	e05b      	b.n	8005ad4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6a1a      	ldr	r2, [r3, #32]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d007      	beq.n	8005a3c <USB_HC_StartXfer+0x10c>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d003      	beq.n	8005a3c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2204      	movs	r2, #4
 8005a38:	60da      	str	r2, [r3, #12]
 8005a3a:	e04b      	b.n	8005ad4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2203      	movs	r2, #3
 8005a40:	60da      	str	r2, [r3, #12]
 8005a42:	e047      	b.n	8005ad4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d10d      	bne.n	8005a66 <USB_HC_StartXfer+0x136>
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	8a92      	ldrh	r2, [r2, #20]
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d907      	bls.n	8005a66 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	8a92      	ldrh	r2, [r2, #20]
 8005a5c:	fb03 f202 	mul.w	r2, r3, r2
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	61da      	str	r2, [r3, #28]
 8005a64:	e036      	b.n	8005ad4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6a1a      	ldr	r2, [r3, #32]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	61da      	str	r2, [r3, #28]
 8005a6e:	e031      	b.n	8005ad4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d018      	beq.n	8005aaa <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	8a92      	ldrh	r2, [r2, #20]
 8005a80:	4413      	add	r3, r2
 8005a82:	3b01      	subs	r3, #1
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	8a92      	ldrh	r2, [r2, #20]
 8005a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a8c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005a8e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005a90:	8b7b      	ldrh	r3, [r7, #26]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d90b      	bls.n	8005aae <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005a96:	8b7b      	ldrh	r3, [r7, #26]
 8005a98:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	8a92      	ldrh	r2, [r2, #20]
 8005aa0:	fb03 f202 	mul.w	r2, r3, r2
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	61da      	str	r2, [r3, #28]
 8005aa8:	e001      	b.n	8005aae <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	78db      	ldrb	r3, [r3, #3]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ab6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	8a92      	ldrh	r2, [r2, #20]
 8005abc:	fb03 f202 	mul.w	r2, r3, r2
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	61da      	str	r2, [r3, #28]
 8005ac4:	e006      	b.n	8005ad4 <USB_HC_StartXfer+0x1a4>
 8005ac6:	bf00      	nop
 8005ac8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	6a1a      	ldr	r2, [r3, #32]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005adc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ade:	04d9      	lsls	r1, r3, #19
 8005ae0:	4ba3      	ldr	r3, [pc, #652]	@ (8005d70 <USB_HC_StartXfer+0x440>)
 8005ae2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ae4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	7d9b      	ldrb	r3, [r3, #22]
 8005aea:	075b      	lsls	r3, r3, #29
 8005aec:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005af0:	69f9      	ldr	r1, [r7, #28]
 8005af2:	0148      	lsls	r0, r1, #5
 8005af4:	6a39      	ldr	r1, [r7, #32]
 8005af6:	4401      	add	r1, r0
 8005af8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005afc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005afe:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d009      	beq.n	8005b1a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6999      	ldr	r1, [r3, #24]
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b16:	460a      	mov	r2, r1
 8005b18:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	bf0c      	ite	eq
 8005b2a:	2301      	moveq	r3, #1
 8005b2c:	2300      	movne	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	69fa      	ldr	r2, [r7, #28]
 8005b42:	0151      	lsls	r1, r2, #5
 8005b44:	6a3a      	ldr	r2, [r7, #32]
 8005b46:	440a      	add	r2, r1
 8005b48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b4c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b50:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	7e7b      	ldrb	r3, [r7, #25]
 8005b62:	075b      	lsls	r3, r3, #29
 8005b64:	69f9      	ldr	r1, [r7, #28]
 8005b66:	0148      	lsls	r0, r1, #5
 8005b68:	6a39      	ldr	r1, [r7, #32]
 8005b6a:	4401      	add	r1, r0
 8005b6c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005b70:	4313      	orrs	r3, r2
 8005b72:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	799b      	ldrb	r3, [r3, #6]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	f040 80c3 	bne.w	8005d04 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	7c5b      	ldrb	r3, [r3, #17]
 8005b82:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	6a3a      	ldr	r2, [r7, #32]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b9a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	6a3a      	ldr	r2, [r7, #32]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bb6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005bba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	79db      	ldrb	r3, [r3, #7]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d123      	bne.n	8005c0c <USB_HC_StartXfer+0x2dc>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	78db      	ldrb	r3, [r3, #3]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d11f      	bne.n	8005c0c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	6a3a      	ldr	r2, [r7, #32]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005be6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bea:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	6a3a      	ldr	r2, [r7, #32]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c0a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	7c9b      	ldrb	r3, [r3, #18]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d003      	beq.n	8005c1c <USB_HC_StartXfer+0x2ec>
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	7c9b      	ldrb	r3, [r3, #18]
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d117      	bne.n	8005c4c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d113      	bne.n	8005c4c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	78db      	ldrb	r3, [r3, #3]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d10f      	bne.n	8005c4c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	6a3a      	ldr	r2, [r7, #32]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c4a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	7c9b      	ldrb	r3, [r3, #18]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d162      	bne.n	8005d1a <USB_HC_StartXfer+0x3ea>
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	78db      	ldrb	r3, [r3, #3]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d15e      	bne.n	8005d1a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d858      	bhi.n	8005d18 <USB_HC_StartXfer+0x3e8>
 8005c66:	a201      	add	r2, pc, #4	@ (adr r2, 8005c6c <USB_HC_StartXfer+0x33c>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005c7d 	.word	0x08005c7d
 8005c70:	08005c9f 	.word	0x08005c9f
 8005c74:	08005cc1 	.word	0x08005cc1
 8005c78:	08005ce3 	.word	0x08005ce3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	0151      	lsls	r1, r2, #5
 8005c8e:	6a3a      	ldr	r2, [r7, #32]
 8005c90:	440a      	add	r2, r1
 8005c92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c9a:	6053      	str	r3, [r2, #4]
          break;
 8005c9c:	e03d      	b.n	8005d1a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	0151      	lsls	r1, r2, #5
 8005cb0:	6a3a      	ldr	r2, [r7, #32]
 8005cb2:	440a      	add	r2, r1
 8005cb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cb8:	f043 030e 	orr.w	r3, r3, #14
 8005cbc:	6053      	str	r3, [r2, #4]
          break;
 8005cbe:	e02c      	b.n	8005d1a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	6a3a      	ldr	r2, [r7, #32]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cde:	6053      	str	r3, [r2, #4]
          break;
 8005ce0:	e01b      	b.n	8005d1a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	6a3a      	ldr	r2, [r7, #32]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d00:	6053      	str	r3, [r2, #4]
          break;
 8005d02:	e00a      	b.n	8005d1a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d10:	461a      	mov	r2, r3
 8005d12:	2300      	movs	r3, #0
 8005d14:	6053      	str	r3, [r2, #4]
 8005d16:	e000      	b.n	8005d1a <USB_HC_StartXfer+0x3ea>
          break;
 8005d18:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d30:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	78db      	ldrb	r3, [r3, #3]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d004      	beq.n	8005d44 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d40:	613b      	str	r3, [r7, #16]
 8005d42:	e003      	b.n	8005d4c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d4a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d52:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d60:	461a      	mov	r2, r3
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	e055      	b.n	8005e1c <USB_HC_StartXfer+0x4ec>
 8005d70:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	78db      	ldrb	r3, [r3, #3]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d14e      	bne.n	8005e1a <USB_HC_StartXfer+0x4ea>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d04a      	beq.n	8005e1a <USB_HC_StartXfer+0x4ea>
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	79db      	ldrb	r3, [r3, #7]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d146      	bne.n	8005e1a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	7c9b      	ldrb	r3, [r3, #18]
 8005d90:	2b03      	cmp	r3, #3
 8005d92:	d831      	bhi.n	8005df8 <USB_HC_StartXfer+0x4c8>
 8005d94:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <USB_HC_StartXfer+0x46c>)
 8005d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9a:	bf00      	nop
 8005d9c:	08005dad 	.word	0x08005dad
 8005da0:	08005dd1 	.word	0x08005dd1
 8005da4:	08005dad 	.word	0x08005dad
 8005da8:	08005dd1 	.word	0x08005dd1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	3303      	adds	r3, #3
 8005db2:	089b      	lsrs	r3, r3, #2
 8005db4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005db6:	8afa      	ldrh	r2, [r7, #22]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d91c      	bls.n	8005dfc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	f043 0220 	orr.w	r2, r3, #32
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	619a      	str	r2, [r3, #24]
        }
        break;
 8005dce:	e015      	b.n	8005dfc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	3303      	adds	r3, #3
 8005dd6:	089b      	lsrs	r3, r3, #2
 8005dd8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005dda:	8afa      	ldrh	r2, [r7, #22]
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d90a      	bls.n	8005e00 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005df6:	e003      	b.n	8005e00 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005df8:	bf00      	nop
 8005dfa:	e002      	b.n	8005e02 <USB_HC_StartXfer+0x4d2>
        break;
 8005dfc:	bf00      	nop
 8005dfe:	e000      	b.n	8005e02 <USB_HC_StartXfer+0x4d2>
        break;
 8005e00:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	6999      	ldr	r1, [r3, #24]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	785a      	ldrb	r2, [r3, #1]
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2000      	movs	r0, #0
 8005e12:	9000      	str	r0, [sp, #0]
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff f9c2 	bl	800519e <USB_WritePacket>
  }

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3728      	adds	r7, #40	@ 0x28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	b29b      	uxth	r3, r3
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b089      	sub	sp, #36	@ 0x24
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	0c9b      	lsrs	r3, r3, #18
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	0fdb      	lsrs	r3, r3, #31
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	0fdb      	lsrs	r3, r3, #31
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 0320 	and.w	r3, r3, #32
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d10d      	bne.n	8005ec8 <USB_HC_Halt+0x82>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10a      	bne.n	8005ec8 <USB_HC_Halt+0x82>
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d002      	beq.n	8005ec4 <USB_HC_Halt+0x7e>
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d101      	bne.n	8005ec8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e0d8      	b.n	800607a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <USB_HC_Halt+0x8e>
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d173      	bne.n	8005fbc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	69fa      	ldr	r2, [r7, #28]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ef2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d14a      	bne.n	8005f96 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d133      	bne.n	8005f74 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f2a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	0151      	lsls	r1, r2, #5
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	440a      	add	r2, r1
 8005f42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f4a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f58:	d82e      	bhi.n	8005fb8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f70:	d0ec      	beq.n	8005f4c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f72:	e081      	b.n	8006078 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f92:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f94:	e070      	b.n	8006078 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fb4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fb6:	e05f      	b.n	8006078 <USB_HC_Halt+0x232>
            break;
 8005fb8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fba:	e05d      	b.n	8006078 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fda:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d133      	bne.n	8006054 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	440a      	add	r2, r1
 8006002:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006006:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800600a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	0151      	lsls	r1, r2, #5
 800601e:	69fa      	ldr	r2, [r7, #28]
 8006020:	440a      	add	r2, r1
 8006022:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006026:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800602a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	3301      	adds	r3, #1
 8006030:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006038:	d81d      	bhi.n	8006076 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800604c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006050:	d0ec      	beq.n	800602c <USB_HC_Halt+0x1e6>
 8006052:	e011      	b.n	8006078 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	440a      	add	r2, r1
 800606a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800606e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	e000      	b.n	8006078 <USB_HC_Halt+0x232>
          break;
 8006076:	bf00      	nop
    }
  }

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3724      	adds	r7, #36	@ 0x24
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
	...

08006088 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800609c:	2301      	movs	r3, #1
 800609e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	04da      	lsls	r2, r3, #19
 80060a4:	4b15      	ldr	r3, [pc, #84]	@ (80060fc <USB_DoPing+0x74>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060b8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060d0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060d8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e6:	461a      	mov	r2, r3
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	371c      	adds	r7, #28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	1ff80000 	.word	0x1ff80000

08006100 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b088      	sub	sp, #32
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7fe ff85 	bl	8005024 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800611a:	2110      	movs	r1, #16
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fe ffde 	bl	80050de <USB_FlushTxFifo>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff f808 	bl	8005142 <USB_FlushRxFifo>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800613c:	2300      	movs	r3, #0
 800613e:	61bb      	str	r3, [r7, #24]
 8006140:	e01f      	b.n	8006182 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	4413      	add	r3, r2
 800614a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006158:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006160:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006168:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006176:	461a      	mov	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	3301      	adds	r3, #1
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	2b0f      	cmp	r3, #15
 8006186:	d9dc      	bls.n	8006142 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006188:	2300      	movs	r3, #0
 800618a:	61bb      	str	r3, [r7, #24]
 800618c:	e034      	b.n	80061f8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061a4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061ac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061b4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061c2:	461a      	mov	r2, r3
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3301      	adds	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061d4:	d80c      	bhi.n	80061f0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061ec:	d0ec      	beq.n	80061c8 <USB_StopHost+0xc8>
 80061ee:	e000      	b.n	80061f2 <USB_StopHost+0xf2>
        break;
 80061f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	3301      	adds	r3, #1
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	2b0f      	cmp	r3, #15
 80061fc:	d9c7      	bls.n	800618e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006204:	461a      	mov	r2, r3
 8006206:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800620a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006212:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7fe fef4 	bl	8005002 <USB_EnableGlobalInt>

  return ret;
 800621a:	7ffb      	ldrb	r3, [r7, #31]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3720      	adds	r7, #32
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006224:	b590      	push	{r4, r7, lr}
 8006226:	b089      	sub	sp, #36	@ 0x24
 8006228:	af04      	add	r7, sp, #16
 800622a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800622c:	2301      	movs	r3, #1
 800622e:	2202      	movs	r2, #2
 8006230:	2102      	movs	r1, #2
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fc83 	bl	8006b3e <USBH_FindInterface>
 8006238:	4603      	mov	r3, r0
 800623a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	2bff      	cmp	r3, #255	@ 0xff
 8006240:	d002      	beq.n	8006248 <USBH_CDC_InterfaceInit+0x24>
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d901      	bls.n	800624c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006248:	2302      	movs	r3, #2
 800624a:	e13d      	b.n	80064c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	4619      	mov	r1, r3
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fc58 	bl	8006b06 <USBH_SelectInterface>
 8006256:	4603      	mov	r3, r0
 8006258:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800625a:	7bbb      	ldrb	r3, [r7, #14]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006260:	2302      	movs	r3, #2
 8006262:	e131      	b.n	80064c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800626a:	2050      	movs	r0, #80	@ 0x50
 800626c:	f002 fb58 	bl	8008920 <malloc>
 8006270:	4603      	mov	r3, r0
 8006272:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006284:	2302      	movs	r3, #2
 8006286:	e11f      	b.n	80064c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006288:	2250      	movs	r2, #80	@ 0x50
 800628a:	2100      	movs	r1, #0
 800628c:	68b8      	ldr	r0, [r7, #8]
 800628e:	f002 fc05 	bl	8008a9c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006292:	7bfb      	ldrb	r3, [r7, #15]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	211a      	movs	r1, #26
 8006298:	fb01 f303 	mul.w	r3, r1, r3
 800629c:	4413      	add	r3, r2
 800629e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	b25b      	sxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	da15      	bge.n	80062d6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	211a      	movs	r1, #26
 80062b0:	fb01 f303 	mul.w	r3, r1, r3
 80062b4:	4413      	add	r3, r2
 80062b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062ba:	781a      	ldrb	r2, [r3, #0]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	687a      	ldr	r2, [r7, #4]
 80062c4:	211a      	movs	r1, #26
 80062c6:	fb01 f303 	mul.w	r3, r1, r3
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062d0:	881a      	ldrh	r2, [r3, #0]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	785b      	ldrb	r3, [r3, #1]
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 ffc4 	bl	800826a <USBH_AllocPipe>
 80062e2:	4603      	mov	r3, r0
 80062e4:	461a      	mov	r2, r3
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	7819      	ldrb	r1, [r3, #0]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	7858      	ldrb	r0, [r3, #1]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	8952      	ldrh	r2, [r2, #10]
 8006302:	9202      	str	r2, [sp, #8]
 8006304:	2203      	movs	r2, #3
 8006306:	9201      	str	r2, [sp, #4]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	4623      	mov	r3, r4
 800630c:	4602      	mov	r2, r0
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f001 ff7c 	bl	800820c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2200      	movs	r2, #0
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f002 fa79 	bl	8008814 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006322:	2300      	movs	r3, #0
 8006324:	2200      	movs	r2, #0
 8006326:	210a      	movs	r1, #10
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fc08 	bl	8006b3e <USBH_FindInterface>
 800632e:	4603      	mov	r3, r0
 8006330:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	2bff      	cmp	r3, #255	@ 0xff
 8006336:	d002      	beq.n	800633e <USBH_CDC_InterfaceInit+0x11a>
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d901      	bls.n	8006342 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800633e:	2302      	movs	r3, #2
 8006340:	e0c2      	b.n	80064c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	211a      	movs	r1, #26
 8006348:	fb01 f303 	mul.w	r3, r1, r3
 800634c:	4413      	add	r3, r2
 800634e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	b25b      	sxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	da16      	bge.n	8006388 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	211a      	movs	r1, #26
 8006360:	fb01 f303 	mul.w	r3, r1, r3
 8006364:	4413      	add	r3, r2
 8006366:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800636a:	781a      	ldrb	r2, [r3, #0]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	211a      	movs	r1, #26
 8006376:	fb01 f303 	mul.w	r3, r1, r3
 800637a:	4413      	add	r3, r2
 800637c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006380:	881a      	ldrh	r2, [r3, #0]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	835a      	strh	r2, [r3, #26]
 8006386:	e015      	b.n	80063b4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	211a      	movs	r1, #26
 800638e:	fb01 f303 	mul.w	r3, r1, r3
 8006392:	4413      	add	r3, r2
 8006394:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006398:	781a      	ldrb	r2, [r3, #0]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	211a      	movs	r1, #26
 80063a4:	fb01 f303 	mul.w	r3, r1, r3
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063ae:	881a      	ldrh	r2, [r3, #0]
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	211a      	movs	r1, #26
 80063ba:	fb01 f303 	mul.w	r3, r1, r3
 80063be:	4413      	add	r3, r2
 80063c0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	b25b      	sxtb	r3, r3
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	da16      	bge.n	80063fa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	211a      	movs	r1, #26
 80063d2:	fb01 f303 	mul.w	r3, r1, r3
 80063d6:	4413      	add	r3, r2
 80063d8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	211a      	movs	r1, #26
 80063e8:	fb01 f303 	mul.w	r3, r1, r3
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80063f2:	881a      	ldrh	r2, [r3, #0]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	835a      	strh	r2, [r3, #26]
 80063f8:	e015      	b.n	8006426 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	211a      	movs	r1, #26
 8006400:	fb01 f303 	mul.w	r3, r1, r3
 8006404:	4413      	add	r3, r2
 8006406:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800640a:	781a      	ldrb	r2, [r3, #0]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	211a      	movs	r1, #26
 8006416:	fb01 f303 	mul.w	r3, r1, r3
 800641a:	4413      	add	r3, r2
 800641c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006420:	881a      	ldrh	r2, [r3, #0]
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	7b9b      	ldrb	r3, [r3, #14]
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 ff1c 	bl	800826a <USBH_AllocPipe>
 8006432:	4603      	mov	r3, r0
 8006434:	461a      	mov	r2, r3
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	7bdb      	ldrb	r3, [r3, #15]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 ff12 	bl	800826a <USBH_AllocPipe>
 8006446:	4603      	mov	r3, r0
 8006448:	461a      	mov	r2, r3
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	7b59      	ldrb	r1, [r3, #13]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	7b98      	ldrb	r0, [r3, #14]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	8b12      	ldrh	r2, [r2, #24]
 8006466:	9202      	str	r2, [sp, #8]
 8006468:	2202      	movs	r2, #2
 800646a:	9201      	str	r2, [sp, #4]
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	4623      	mov	r3, r4
 8006470:	4602      	mov	r2, r0
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 feca 	bl	800820c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	7b19      	ldrb	r1, [r3, #12]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	7bd8      	ldrb	r0, [r3, #15]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	8b52      	ldrh	r2, [r2, #26]
 8006490:	9202      	str	r2, [sp, #8]
 8006492:	2202      	movs	r2, #2
 8006494:	9201      	str	r2, [sp, #4]
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	4623      	mov	r3, r4
 800649a:	4602      	mov	r2, r0
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f001 feb5 	bl	800820c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	7b5b      	ldrb	r3, [r3, #13]
 80064ae:	2200      	movs	r2, #0
 80064b0:	4619      	mov	r1, r3
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f002 f9ae 	bl	8008814 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	7b1b      	ldrb	r3, [r3, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f002 f9a7 	bl	8008814 <USBH_LL_SetToggle>

  return USBH_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd90      	pop	{r4, r7, pc}

080064d0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00e      	beq.n	8006508 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f001 feaa 	bl	800824a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 fed5 	bl	80082ac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	7b1b      	ldrb	r3, [r3, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00e      	beq.n	800652e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	7b1b      	ldrb	r3, [r3, #12]
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f001 fe97 	bl	800824a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	7b1b      	ldrb	r3, [r3, #12]
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f001 fec2 	bl	80082ac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	7b5b      	ldrb	r3, [r3, #13]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00e      	beq.n	8006554 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	7b5b      	ldrb	r3, [r3, #13]
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 fe84 	bl	800824a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	7b5b      	ldrb	r3, [r3, #13]
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f001 feaf 	bl	80082ac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00b      	beq.n	8006578 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	4618      	mov	r0, r3
 800656a:	f002 f9e1 	bl	8008930 <free>
    phost->pActiveClass->pData = 0U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006574:	2200      	movs	r2, #0
 8006576:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	3340      	adds	r3, #64	@ 0x40
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f8b1 	bl	8006702 <GetLineCoding>
 80065a0:	4603      	mov	r3, r0
 80065a2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065a4:	7afb      	ldrb	r3, [r7, #11]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d105      	bne.n	80065b6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80065b0:	2102      	movs	r1, #2
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065b6:	7afb      	ldrb	r3, [r7, #11]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065c8:	2301      	movs	r3, #1
 80065ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d877      	bhi.n	80066d4 <USBH_CDC_Process+0x114>
 80065e4:	a201      	add	r2, pc, #4	@ (adr r2, 80065ec <USBH_CDC_Process+0x2c>)
 80065e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ea:	bf00      	nop
 80065ec:	08006601 	.word	0x08006601
 80065f0:	08006607 	.word	0x08006607
 80065f4:	08006637 	.word	0x08006637
 80065f8:	080066ab 	.word	0x080066ab
 80065fc:	080066b9 	.word	0x080066b9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	73fb      	strb	r3, [r7, #15]
      break;
 8006604:	e06d      	b.n	80066e2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f897 	bl	8006740 <SetLineCoding>
 8006612:	4603      	mov	r3, r0
 8006614:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006616:	7bbb      	ldrb	r3, [r7, #14]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d104      	bne.n	8006626 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006624:	e058      	b.n	80066d8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d055      	beq.n	80066d8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2204      	movs	r2, #4
 8006630:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006634:	e050      	b.n	80066d8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	3340      	adds	r3, #64	@ 0x40
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f860 	bl	8006702 <GetLineCoding>
 8006642:	4603      	mov	r3, r0
 8006644:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d126      	bne.n	800669a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800665e:	791b      	ldrb	r3, [r3, #4]
 8006660:	429a      	cmp	r2, r3
 8006662:	d13b      	bne.n	80066dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800666e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006670:	429a      	cmp	r2, r3
 8006672:	d133      	bne.n	80066dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800667e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006680:	429a      	cmp	r2, r3
 8006682:	d12b      	bne.n	80066dc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800668c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800668e:	429a      	cmp	r2, r3
 8006690:	d124      	bne.n	80066dc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f958 	bl	8006948 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006698:	e020      	b.n	80066dc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800669a:	7bbb      	ldrb	r3, [r7, #14]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d01d      	beq.n	80066dc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2204      	movs	r2, #4
 80066a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80066a8:	e018      	b.n	80066dc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f867 	bl	800677e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f8da 	bl	800686a <CDC_ProcessReception>
      break;
 80066b6:	e014      	b.n	80066e2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066b8:	2100      	movs	r1, #0
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 f81e 	bl	80076fc <USBH_ClrFeature>
 80066c0:	4603      	mov	r3, r0
 80066c2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80066d2:	e005      	b.n	80066e0 <USBH_CDC_Process+0x120>

    default:
      break;
 80066d4:	bf00      	nop
 80066d6:	e004      	b.n	80066e2 <USBH_CDC_Process+0x122>
      break;
 80066d8:	bf00      	nop
 80066da:	e002      	b.n	80066e2 <USBH_CDC_Process+0x122>
      break;
 80066dc:	bf00      	nop
 80066de:	e000      	b.n	80066e2 <USBH_CDC_Process+0x122>
      break;
 80066e0:	bf00      	nop

  }

  return status;
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	22a1      	movs	r2, #161	@ 0xa1
 8006710:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2221      	movs	r2, #33	@ 0x21
 8006716:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2207      	movs	r2, #7
 8006728:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2207      	movs	r2, #7
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 fb17 	bl	8007d64 <USBH_CtlReq>
 8006736:	4603      	mov	r3, r0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2221      	movs	r2, #33	@ 0x21
 800674e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2220      	movs	r2, #32
 8006754:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2207      	movs	r2, #7
 8006766:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2207      	movs	r2, #7
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f001 faf8 	bl	8007d64 <USBH_CtlReq>
 8006774:	4603      	mov	r3, r0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af02      	add	r7, sp, #8
 8006784:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006790:	2300      	movs	r3, #0
 8006792:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800679a:	2b01      	cmp	r3, #1
 800679c:	d002      	beq.n	80067a4 <CDC_ProcessTransmission+0x26>
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d023      	beq.n	80067ea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067a2:	e05e      	b.n	8006862 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	8b12      	ldrh	r2, [r2, #24]
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d90b      	bls.n	80067c8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	69d9      	ldr	r1, [r3, #28]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8b1a      	ldrh	r2, [r3, #24]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	7b5b      	ldrb	r3, [r3, #13]
 80067bc:	2001      	movs	r0, #1
 80067be:	9000      	str	r0, [sp, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 fce0 	bl	8008186 <USBH_BulkSendData>
 80067c6:	e00b      	b.n	80067e0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	7b5b      	ldrb	r3, [r3, #13]
 80067d6:	2001      	movs	r0, #1
 80067d8:	9000      	str	r0, [sp, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 fcd3 	bl	8008186 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80067e8:	e03b      	b.n	8006862 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	7b5b      	ldrb	r3, [r3, #13]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 ffe5 	bl	80087c0 <USBH_LL_GetURBState>
 80067f6:	4603      	mov	r3, r0
 80067f8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80067fa:	7afb      	ldrb	r3, [r7, #11]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d128      	bne.n	8006852 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	8b12      	ldrh	r2, [r2, #24]
 8006808:	4293      	cmp	r3, r2
 800680a:	d90e      	bls.n	800682a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	8b12      	ldrh	r2, [r2, #24]
 8006814:	1a9a      	subs	r2, r3, r2
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	8b12      	ldrh	r2, [r2, #24]
 8006822:	441a      	add	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	61da      	str	r2, [r3, #28]
 8006828:	e002      	b.n	8006830 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006834:	2b00      	cmp	r3, #0
 8006836:	d004      	beq.n	8006842 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006840:	e00e      	b.n	8006860 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f868 	bl	8006920 <USBH_CDC_TransmitCallback>
      break;
 8006850:	e006      	b.n	8006860 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	2b02      	cmp	r3, #2
 8006856:	d103      	bne.n	8006860 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006860:	bf00      	nop
  }
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b086      	sub	sp, #24
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800687c:	2300      	movs	r3, #0
 800687e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006886:	2b03      	cmp	r3, #3
 8006888:	d002      	beq.n	8006890 <CDC_ProcessReception+0x26>
 800688a:	2b04      	cmp	r3, #4
 800688c:	d00e      	beq.n	80068ac <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 800688e:	e043      	b.n	8006918 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	6a19      	ldr	r1, [r3, #32]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	8b5a      	ldrh	r2, [r3, #26]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	7b1b      	ldrb	r3, [r3, #12]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 fc97 	bl	80081d0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2204      	movs	r2, #4
 80068a6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80068aa:	e035      	b.n	8006918 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	7b1b      	ldrb	r3, [r3, #12]
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 ff84 	bl	80087c0 <USBH_LL_GetURBState>
 80068b8:	4603      	mov	r3, r0
 80068ba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80068bc:	7cfb      	ldrb	r3, [r7, #19]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d129      	bne.n	8006916 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	7b1b      	ldrb	r3, [r3, #12]
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 fef9 	bl	80086c0 <USBH_LL_GetLastXferSize>
 80068ce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d016      	beq.n	8006908 <CDC_ProcessReception+0x9e>
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	8b5b      	ldrh	r3, [r3, #26]
 80068de:	461a      	mov	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d110      	bne.n	8006908 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	1ad2      	subs	r2, r2, r3
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	6a1a      	ldr	r2, [r3, #32]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	441a      	add	r2, r3
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2203      	movs	r2, #3
 8006902:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006906:	e006      	b.n	8006916 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f80f 	bl	8006934 <USBH_CDC_ReceiveCallback>
      break;
 8006916:	bf00      	nop
  }
}
 8006918:	bf00      	nop
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4613      	mov	r3, r2
 8006968:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006970:	2302      	movs	r3, #2
 8006972:	e029      	b.n	80069c8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	79fa      	ldrb	r2, [r7, #7]
 8006978:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 f81f 	bl	80069d0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f001 fdc9 	bl	8008558 <USBH_LL_Init>

  return USBH_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	e009      	b.n	80069f2 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	33e0      	adds	r3, #224	@ 0xe0
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	2200      	movs	r2, #0
 80069ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b0f      	cmp	r3, #15
 80069f6:	d9f2      	bls.n	80069de <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80069f8:	2300      	movs	r3, #0
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	e009      	b.n	8006a12 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006a08:	2200      	movs	r2, #0
 8006a0a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a18:	d3f1      	bcc.n	80069fe <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2240      	movs	r2, #64	@ 0x40
 8006a3e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	331c      	adds	r3, #28
 8006a6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f002 f813 	bl	8008a9c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006a7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a80:	2100      	movs	r1, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f002 f80a 	bl	8008a9c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006a8e:	2212      	movs	r2, #18
 8006a90:	2100      	movs	r1, #0
 8006a92:	4618      	mov	r0, r3
 8006a94:	f002 f802 	bl	8008a9c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006a9e:	223e      	movs	r2, #62	@ 0x3e
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f001 fffa 	bl	8008a9c <memset>

  return USBH_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d016      	beq.n	8006af4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10e      	bne.n	8006aee <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006ad6:	1c59      	adds	r1, r3, #1
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	33de      	adds	r3, #222	@ 0xde
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73fb      	strb	r3, [r7, #15]
 8006aec:	e004      	b.n	8006af8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006aee:	2302      	movs	r3, #2
 8006af0:	73fb      	strb	r3, [r7, #15]
 8006af2:	e001      	b.n	8006af8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006af4:	2302      	movs	r3, #2
 8006af6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006b1c:	78fa      	ldrb	r2, [r7, #3]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d204      	bcs.n	8006b2c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	78fa      	ldrb	r2, [r7, #3]
 8006b26:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006b2a:	e001      	b.n	8006b30 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b087      	sub	sp, #28
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	4608      	mov	r0, r1
 8006b48:	4611      	mov	r1, r2
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	70fb      	strb	r3, [r7, #3]
 8006b50:	460b      	mov	r3, r1
 8006b52:	70bb      	strb	r3, [r7, #2]
 8006b54:	4613      	mov	r3, r2
 8006b56:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006b66:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b68:	e025      	b.n	8006bb6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	221a      	movs	r2, #26
 8006b6e:	fb02 f303 	mul.w	r3, r2, r3
 8006b72:	3308      	adds	r3, #8
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	3302      	adds	r3, #2
 8006b7a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	795b      	ldrb	r3, [r3, #5]
 8006b80:	78fa      	ldrb	r2, [r7, #3]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d002      	beq.n	8006b8c <USBH_FindInterface+0x4e>
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	2bff      	cmp	r3, #255	@ 0xff
 8006b8a:	d111      	bne.n	8006bb0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b90:	78ba      	ldrb	r2, [r7, #2]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d002      	beq.n	8006b9c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b96:	78bb      	ldrb	r3, [r7, #2]
 8006b98:	2bff      	cmp	r3, #255	@ 0xff
 8006b9a:	d109      	bne.n	8006bb0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ba0:	787a      	ldrb	r2, [r7, #1]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d002      	beq.n	8006bac <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006ba6:	787b      	ldrb	r3, [r7, #1]
 8006ba8:	2bff      	cmp	r3, #255	@ 0xff
 8006baa:	d101      	bne.n	8006bb0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	e006      	b.n	8006bbe <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d9d6      	bls.n	8006b6a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006bbc:	23ff      	movs	r3, #255	@ 0xff
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b082      	sub	sp, #8
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 fcfc 	bl	80085d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006bd8:	2101      	movs	r1, #1
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f001 fe03 	bl	80087e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b088      	sub	sp, #32
 8006bf0:	af04      	add	r7, sp, #16
 8006bf2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d102      	bne.n	8006c0e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2203      	movs	r2, #3
 8006c0c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b0b      	cmp	r3, #11
 8006c16:	f200 81bc 	bhi.w	8006f92 <USBH_Process+0x3a6>
 8006c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c20 <USBH_Process+0x34>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c51 	.word	0x08006c51
 8006c24:	08006c83 	.word	0x08006c83
 8006c28:	08006ced 	.word	0x08006ced
 8006c2c:	08006f2d 	.word	0x08006f2d
 8006c30:	08006f93 	.word	0x08006f93
 8006c34:	08006d8d 	.word	0x08006d8d
 8006c38:	08006ed3 	.word	0x08006ed3
 8006c3c:	08006dc3 	.word	0x08006dc3
 8006c40:	08006de3 	.word	0x08006de3
 8006c44:	08006e01 	.word	0x08006e01
 8006c48:	08006e45 	.word	0x08006e45
 8006c4c:	08006f15 	.word	0x08006f15
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 819c 	beq.w	8006f96 <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c64:	20c8      	movs	r0, #200	@ 0xc8
 8006c66:	f001 fe08 	bl	800887a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 fd0d 	bl	800868a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8006c80:	e189      	b.n	8006f96 <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d107      	bne.n	8006c9e <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006c9c:	e18a      	b.n	8006fb4 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006ca4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ca8:	d914      	bls.n	8006cd4 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d903      	bls.n	8006ccc <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	220d      	movs	r2, #13
 8006cc8:	701a      	strb	r2, [r3, #0]
      break;
 8006cca:	e173      	b.n	8006fb4 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	701a      	strb	r2, [r3, #0]
      break;
 8006cd2:	e16f      	b.n	8006fb4 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006cda:	f103 020a 	add.w	r2, r3, #10
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006ce4:	200a      	movs	r0, #10
 8006ce6:	f001 fdc8 	bl	800887a <USBH_Delay>
      break;
 8006cea:	e163      	b.n	8006fb4 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006cfc:	2104      	movs	r1, #4
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006d02:	2064      	movs	r0, #100	@ 0x64
 8006d04:	f001 fdb9 	bl	800887a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 fc97 	bl	800863c <USBH_LL_GetSpeed>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	461a      	mov	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2205      	movs	r2, #5
 8006d1c:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d1e:	2100      	movs	r1, #0
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 faa2 	bl	800826a <USBH_AllocPipe>
 8006d26:	4603      	mov	r3, r0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d2e:	2180      	movs	r1, #128	@ 0x80
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f001 fa9a 	bl	800826a <USBH_AllocPipe>
 8006d36:	4603      	mov	r3, r0
 8006d38:	461a      	mov	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7919      	ldrb	r1, [r3, #4]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d52:	9202      	str	r2, [sp, #8]
 8006d54:	2200      	movs	r2, #0
 8006d56:	9201      	str	r2, [sp, #4]
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2280      	movs	r2, #128	@ 0x80
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 fa54 	bl	800820c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	7959      	ldrb	r1, [r3, #5]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d78:	9202      	str	r2, [sp, #8]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	9201      	str	r2, [sp, #4]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	4603      	mov	r3, r0
 8006d82:	2200      	movs	r2, #0
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 fa41 	bl	800820c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006d8a:	e113      	b.n	8006fb4 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f917 	bl	8006fc0 <USBH_HandleEnum>
 8006d92:	4603      	mov	r3, r0
 8006d94:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f040 80fd 	bne.w	8006f9a <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d103      	bne.n	8006dba <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2208      	movs	r2, #8
 8006db6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8006db8:	e0ef      	b.n	8006f9a <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2207      	movs	r2, #7
 8006dbe:	701a      	strb	r2, [r3, #0]
      break;
 8006dc0:	e0eb      	b.n	8006f9a <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f000 80e8 	beq.w	8006f9e <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2208      	movs	r2, #8
 8006dde:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8006de0:	e0dd      	b.n	8006f9e <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fc3f 	bl	800766e <USBH_SetCfg>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f040 80d5 	bne.w	8006fa2 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2209      	movs	r2, #9
 8006dfc:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006dfe:	e0d0      	b.n	8006fa2 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d016      	beq.n	8006e3c <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006e0e:	2101      	movs	r1, #1
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fc4f 	bl	80076b4 <USBH_SetFeature>
 8006e16:	4603      	mov	r3, r0
 8006e18:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e1a:	7bbb      	ldrb	r3, [r7, #14]
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d103      	bne.n	8006e2a <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	220a      	movs	r2, #10
 8006e26:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006e28:	e0bd      	b.n	8006fa6 <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8006e2a:	7bbb      	ldrb	r3, [r7, #14]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	f040 80b9 	bne.w	8006fa6 <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	220a      	movs	r2, #10
 8006e38:	701a      	strb	r2, [r3, #0]
      break;
 8006e3a:	e0b4      	b.n	8006fa6 <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	220a      	movs	r2, #10
 8006e40:	701a      	strb	r2, [r3, #0]
      break;
 8006e42:	e0b0      	b.n	8006fa6 <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 80ad 	beq.w	8006faa <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
 8006e5c:	e016      	b.n	8006e8c <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e5e:	7bfa      	ldrb	r2, [r7, #15]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	32de      	adds	r2, #222	@ 0xde
 8006e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e68:	791a      	ldrb	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d108      	bne.n	8006e86 <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e74:	7bfa      	ldrb	r2, [r7, #15]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	32de      	adds	r2, #222	@ 0xde
 8006e7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006e84:	e005      	b.n	8006e92 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	73fb      	strb	r3, [r7, #15]
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0e5      	beq.n	8006e5e <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d016      	beq.n	8006eca <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d109      	bne.n	8006ec2 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2206      	movs	r2, #6
 8006eb2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006eba:	2103      	movs	r1, #3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006ec0:	e073      	b.n	8006faa <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	220d      	movs	r2, #13
 8006ec6:	701a      	strb	r2, [r3, #0]
      break;
 8006ec8:	e06f      	b.n	8006faa <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	220d      	movs	r2, #13
 8006ece:	701a      	strb	r2, [r3, #0]
      break;
 8006ed0:	e06b      	b.n	8006faa <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d017      	beq.n	8006f0c <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
 8006ee8:	4603      	mov	r3, r0
 8006eea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d103      	bne.n	8006efc <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	220b      	movs	r2, #11
 8006ef8:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006efa:	e058      	b.n	8006fae <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d154      	bne.n	8006fae <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	220d      	movs	r2, #13
 8006f08:	701a      	strb	r2, [r3, #0]
      break;
 8006f0a:	e050      	b.n	8006fae <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	220d      	movs	r2, #13
 8006f10:	701a      	strb	r2, [r3, #0]
      break;
 8006f12:	e04c      	b.n	8006fae <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d049      	beq.n	8006fb2 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	4798      	blx	r3
      }
      break;
 8006f2a:	e042      	b.n	8006fb2 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff fd4b 	bl	80069d0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d009      	beq.n	8006f58 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d005      	beq.n	8006f6e <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f68:	2105      	movs	r1, #5
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d107      	bne.n	8006f8a <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7ff fe21 	bl	8006bca <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006f88:	e014      	b.n	8006fb4 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f001 fb20 	bl	80085d0 <USBH_LL_Start>
      break;
 8006f90:	e010      	b.n	8006fb4 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8006f92:	bf00      	nop
 8006f94:	e00e      	b.n	8006fb4 <USBH_Process+0x3c8>
      break;
 8006f96:	bf00      	nop
 8006f98:	e00c      	b.n	8006fb4 <USBH_Process+0x3c8>
      break;
 8006f9a:	bf00      	nop
 8006f9c:	e00a      	b.n	8006fb4 <USBH_Process+0x3c8>
    break;
 8006f9e:	bf00      	nop
 8006fa0:	e008      	b.n	8006fb4 <USBH_Process+0x3c8>
      break;
 8006fa2:	bf00      	nop
 8006fa4:	e006      	b.n	8006fb4 <USBH_Process+0x3c8>
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e004      	b.n	8006fb4 <USBH_Process+0x3c8>
      break;
 8006faa:	bf00      	nop
 8006fac:	e002      	b.n	8006fb4 <USBH_Process+0x3c8>
      break;
 8006fae:	bf00      	nop
 8006fb0:	e000      	b.n	8006fb4 <USBH_Process+0x3c8>
      break;
 8006fb2:	bf00      	nop
  }
  return USBH_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop

08006fc0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af04      	add	r7, sp, #16
 8006fc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	785b      	ldrb	r3, [r3, #1]
 8006fd4:	2b07      	cmp	r3, #7
 8006fd6:	f200 81bd 	bhi.w	8007354 <USBH_HandleEnum+0x394>
 8006fda:	a201      	add	r2, pc, #4	@ (adr r2, 8006fe0 <USBH_HandleEnum+0x20>)
 8006fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe0:	08007001 	.word	0x08007001
 8006fe4:	080070bb 	.word	0x080070bb
 8006fe8:	08007125 	.word	0x08007125
 8006fec:	080071af 	.word	0x080071af
 8006ff0:	08007219 	.word	0x08007219
 8006ff4:	08007289 	.word	0x08007289
 8006ff8:	080072cf 	.word	0x080072cf
 8006ffc:	08007315 	.word	0x08007315
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007000:	2108      	movs	r1, #8
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa50 	bl	80074a8 <USBH_Get_DevDesc>
 8007008:	4603      	mov	r3, r0
 800700a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d12e      	bne.n	8007070 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	7919      	ldrb	r1, [r3, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007036:	9202      	str	r2, [sp, #8]
 8007038:	2200      	movs	r2, #0
 800703a:	9201      	str	r2, [sp, #4]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	4603      	mov	r3, r0
 8007040:	2280      	movs	r2, #128	@ 0x80
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f001 f8e2 	bl	800820c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	7959      	ldrb	r1, [r3, #5]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800705c:	9202      	str	r2, [sp, #8]
 800705e:	2200      	movs	r2, #0
 8007060:	9201      	str	r2, [sp, #4]
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	4603      	mov	r3, r0
 8007066:	2200      	movs	r2, #0
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f001 f8cf 	bl	800820c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800706e:	e173      	b.n	8007358 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2b03      	cmp	r3, #3
 8007074:	f040 8170 	bne.w	8007358 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800707e:	3301      	adds	r3, #1
 8007080:	b2da      	uxtb	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800708e:	2b03      	cmp	r3, #3
 8007090:	d903      	bls.n	800709a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	220d      	movs	r2, #13
 8007096:	701a      	strb	r2, [r3, #0]
      break;
 8007098:	e15e      	b.n	8007358 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	795b      	ldrb	r3, [r3, #5]
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 f903 	bl	80082ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	791b      	ldrb	r3, [r3, #4]
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f001 f8fd 	bl	80082ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	701a      	strb	r2, [r3, #0]
      break;
 80070b8:	e14e      	b.n	8007358 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070ba:	2112      	movs	r1, #18
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f9f3 	bl	80074a8 <USBH_Get_DevDesc>
 80070c2:	4603      	mov	r3, r0
 80070c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070c6:	7bbb      	ldrb	r3, [r7, #14]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d103      	bne.n	80070d4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070d2:	e143      	b.n	800735c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	f040 8140 	bne.w	800735c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070e2:	3301      	adds	r3, #1
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070f2:	2b03      	cmp	r3, #3
 80070f4:	d903      	bls.n	80070fe <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	220d      	movs	r2, #13
 80070fa:	701a      	strb	r2, [r3, #0]
      break;
 80070fc:	e12e      	b.n	800735c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	795b      	ldrb	r3, [r3, #5]
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f001 f8d1 	bl	80082ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	791b      	ldrb	r3, [r3, #4]
 800710e:	4619      	mov	r1, r3
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 f8cb 	bl	80082ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	701a      	strb	r2, [r3, #0]
      break;
 8007122:	e11b      	b.n	800735c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007124:	2101      	movs	r1, #1
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fa7d 	bl	8007626 <USBH_SetAddress>
 800712c:	4603      	mov	r3, r0
 800712e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d130      	bne.n	8007198 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007136:	2002      	movs	r0, #2
 8007138:	f001 fb9f 	bl	800887a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2203      	movs	r2, #3
 8007148:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	7919      	ldrb	r1, [r3, #4]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800715e:	9202      	str	r2, [sp, #8]
 8007160:	2200      	movs	r2, #0
 8007162:	9201      	str	r2, [sp, #4]
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	4603      	mov	r3, r0
 8007168:	2280      	movs	r2, #128	@ 0x80
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f001 f84e 	bl	800820c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	7959      	ldrb	r1, [r3, #5]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007184:	9202      	str	r2, [sp, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	9201      	str	r2, [sp, #4]
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	4603      	mov	r3, r0
 800718e:	2200      	movs	r2, #0
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 f83b 	bl	800820c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007196:	e0e3      	b.n	8007360 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	2b03      	cmp	r3, #3
 800719c:	f040 80e0 	bne.w	8007360 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	220d      	movs	r2, #13
 80071a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	705a      	strb	r2, [r3, #1]
      break;
 80071ac:	e0d8      	b.n	8007360 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80071ae:	2109      	movs	r1, #9
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f9a5 	bl	8007500 <USBH_Get_CfgDesc>
 80071b6:	4603      	mov	r3, r0
 80071b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2204      	movs	r2, #4
 80071c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071c6:	e0cd      	b.n	8007364 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	f040 80ca 	bne.w	8007364 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071d6:	3301      	adds	r3, #1
 80071d8:	b2da      	uxtb	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d903      	bls.n	80071f2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	220d      	movs	r2, #13
 80071ee:	701a      	strb	r2, [r3, #0]
      break;
 80071f0:	e0b8      	b.n	8007364 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	795b      	ldrb	r3, [r3, #5]
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f001 f857 	bl	80082ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	791b      	ldrb	r3, [r3, #4]
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 f851 	bl	80082ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	701a      	strb	r2, [r3, #0]
      break;
 8007216:	e0a5      	b.n	8007364 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f96d 	bl	8007500 <USBH_Get_CfgDesc>
 8007226:	4603      	mov	r3, r0
 8007228:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d103      	bne.n	8007238 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2205      	movs	r2, #5
 8007234:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007236:	e097      	b.n	8007368 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	2b03      	cmp	r3, #3
 800723c:	f040 8094 	bne.w	8007368 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007246:	3301      	adds	r3, #1
 8007248:	b2da      	uxtb	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007256:	2b03      	cmp	r3, #3
 8007258:	d903      	bls.n	8007262 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	220d      	movs	r2, #13
 800725e:	701a      	strb	r2, [r3, #0]
      break;
 8007260:	e082      	b.n	8007368 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	795b      	ldrb	r3, [r3, #5]
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 f81f 	bl	80082ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	791b      	ldrb	r3, [r3, #4]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 f819 	bl	80082ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	701a      	strb	r2, [r3, #0]
      break;
 8007286:	e06f      	b.n	8007368 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800728e:	2b00      	cmp	r3, #0
 8007290:	d019      	beq.n	80072c6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800729e:	23ff      	movs	r3, #255	@ 0xff
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f957 	bl	8007554 <USBH_Get_StringDesc>
 80072a6:	4603      	mov	r3, r0
 80072a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072aa:	7bbb      	ldrb	r3, [r7, #14]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d103      	bne.n	80072b8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2206      	movs	r2, #6
 80072b4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80072b6:	e059      	b.n	800736c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	2b03      	cmp	r3, #3
 80072bc:	d156      	bne.n	800736c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2206      	movs	r2, #6
 80072c2:	705a      	strb	r2, [r3, #1]
      break;
 80072c4:	e052      	b.n	800736c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2206      	movs	r2, #6
 80072ca:	705a      	strb	r2, [r3, #1]
      break;
 80072cc:	e04e      	b.n	800736c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d019      	beq.n	800730c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072e4:	23ff      	movs	r3, #255	@ 0xff
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f934 	bl	8007554 <USBH_Get_StringDesc>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072f0:	7bbb      	ldrb	r3, [r7, #14]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d103      	bne.n	80072fe <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2207      	movs	r2, #7
 80072fa:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80072fc:	e038      	b.n	8007370 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	2b03      	cmp	r3, #3
 8007302:	d135      	bne.n	8007370 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2207      	movs	r2, #7
 8007308:	705a      	strb	r2, [r3, #1]
      break;
 800730a:	e031      	b.n	8007370 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2207      	movs	r2, #7
 8007310:	705a      	strb	r2, [r3, #1]
      break;
 8007312:	e02d      	b.n	8007370 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800731a:	2b00      	cmp	r3, #0
 800731c:	d017      	beq.n	800734e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800732a:	23ff      	movs	r3, #255	@ 0xff
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f911 	bl	8007554 <USBH_Get_StringDesc>
 8007332:	4603      	mov	r3, r0
 8007334:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007340:	e018      	b.n	8007374 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	2b03      	cmp	r3, #3
 8007346:	d115      	bne.n	8007374 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]
      break;
 800734c:	e012      	b.n	8007374 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
      break;
 8007352:	e00f      	b.n	8007374 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007354:	bf00      	nop
 8007356:	e00e      	b.n	8007376 <USBH_HandleEnum+0x3b6>
      break;
 8007358:	bf00      	nop
 800735a:	e00c      	b.n	8007376 <USBH_HandleEnum+0x3b6>
      break;
 800735c:	bf00      	nop
 800735e:	e00a      	b.n	8007376 <USBH_HandleEnum+0x3b6>
      break;
 8007360:	bf00      	nop
 8007362:	e008      	b.n	8007376 <USBH_HandleEnum+0x3b6>
      break;
 8007364:	bf00      	nop
 8007366:	e006      	b.n	8007376 <USBH_HandleEnum+0x3b6>
      break;
 8007368:	bf00      	nop
 800736a:	e004      	b.n	8007376 <USBH_HandleEnum+0x3b6>
      break;
 800736c:	bf00      	nop
 800736e:	e002      	b.n	8007376 <USBH_HandleEnum+0x3b6>
      break;
 8007370:	bf00      	nop
 8007372:	e000      	b.n	8007376 <USBH_HandleEnum+0x3b6>
      break;
 8007374:	bf00      	nop
  }
  return Status;
 8007376:	7bfb      	ldrb	r3, [r7, #15]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007392:	bf00      	nop
 8007394:	370c      	adds	r7, #12
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b082      	sub	sp, #8
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f804 	bl	80073c2 <USBH_HandleSof>
}
 80073ba:	bf00      	nop
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b082      	sub	sp, #8
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b0b      	cmp	r3, #11
 80073d2:	d10a      	bne.n	80073ea <USBH_HandleSof+0x28>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
  }
}
 80073ea:	bf00      	nop
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8007402:	bf00      	nop
}
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8007426:	bf00      	nop
}
 8007428:	370c      	adds	r7, #12
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f001 f8c0 	bl	8008606 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	791b      	ldrb	r3, [r3, #4]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 ff0d 	bl	80082ac <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	795b      	ldrb	r3, [r3, #5]
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 ff07 	bl	80082ac <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af02      	add	r7, sp, #8
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80074b4:	887b      	ldrh	r3, [r7, #2]
 80074b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074ba:	d901      	bls.n	80074c0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80074bc:	2303      	movs	r3, #3
 80074be:	e01b      	b.n	80074f8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80074c6:	887b      	ldrh	r3, [r7, #2]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	4613      	mov	r3, r2
 80074cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074d0:	2100      	movs	r1, #0
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f872 	bl	80075bc <USBH_GetDescriptor>
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80074e8:	887a      	ldrh	r2, [r7, #2]
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f929 	bl	8007744 <USBH_ParseDevDesc>
 80074f2:	4603      	mov	r3, r0
 80074f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af02      	add	r7, sp, #8
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	331c      	adds	r3, #28
 8007510:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007512:	887b      	ldrh	r3, [r7, #2]
 8007514:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007518:	d901      	bls.n	800751e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800751a:	2303      	movs	r3, #3
 800751c:	e016      	b.n	800754c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800751e:	887b      	ldrh	r3, [r7, #2]
 8007520:	9300      	str	r3, [sp, #0]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007528:	2100      	movs	r1, #0
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f846 	bl	80075bc <USBH_GetDescriptor>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d107      	bne.n	800754a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800753a:	887b      	ldrh	r3, [r7, #2]
 800753c:	461a      	mov	r2, r3
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f9af 	bl	80078a4 <USBH_ParseCfgDesc>
 8007546:	4603      	mov	r3, r0
 8007548:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800754a:	7bfb      	ldrb	r3, [r7, #15]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af02      	add	r7, sp, #8
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	607a      	str	r2, [r7, #4]
 800755e:	461a      	mov	r2, r3
 8007560:	460b      	mov	r3, r1
 8007562:	72fb      	strb	r3, [r7, #11]
 8007564:	4613      	mov	r3, r2
 8007566:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007568:	893b      	ldrh	r3, [r7, #8]
 800756a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800756e:	d802      	bhi.n	8007576 <USBH_Get_StringDesc+0x22>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007576:	2303      	movs	r3, #3
 8007578:	e01c      	b.n	80075b4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800757a:	7afb      	ldrb	r3, [r7, #11]
 800757c:	b29b      	uxth	r3, r3
 800757e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007582:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800758a:	893b      	ldrh	r3, [r7, #8]
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	460b      	mov	r3, r1
 8007590:	2100      	movs	r1, #0
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f812 	bl	80075bc <USBH_GetDescriptor>
 8007598:	4603      	mov	r3, r0
 800759a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d107      	bne.n	80075b2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80075a8:	893a      	ldrh	r2, [r7, #8]
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fb8c 	bl	8007cca <USBH_ParseStringDesc>
  }

  return status;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	607b      	str	r3, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	72fb      	strb	r3, [r7, #11]
 80075ca:	4613      	mov	r3, r2
 80075cc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	789b      	ldrb	r3, [r3, #2]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d11c      	bne.n	8007610 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075d6:	7afb      	ldrb	r3, [r7, #11]
 80075d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2206      	movs	r2, #6
 80075e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	893a      	ldrh	r2, [r7, #8]
 80075ec:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075ee:	893b      	ldrh	r3, [r7, #8]
 80075f0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80075f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075f8:	d104      	bne.n	8007604 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f240 4209 	movw	r2, #1033	@ 0x409
 8007600:	829a      	strh	r2, [r3, #20]
 8007602:	e002      	b.n	800760a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8b3a      	ldrh	r2, [r7, #24]
 800760e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007610:	8b3b      	ldrh	r3, [r7, #24]
 8007612:	461a      	mov	r2, r3
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f000 fba4 	bl	8007d64 <USBH_CtlReq>
 800761c:	4603      	mov	r3, r0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	460b      	mov	r3, r1
 8007630:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	789b      	ldrb	r3, [r3, #2]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d10f      	bne.n	800765a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2205      	movs	r2, #5
 8007644:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	b29a      	uxth	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800765a:	2200      	movs	r2, #0
 800765c:	2100      	movs	r1, #0
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fb80 	bl	8007d64 <USBH_CtlReq>
 8007664:	4603      	mov	r3, r0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	789b      	ldrb	r3, [r3, #2]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d10e      	bne.n	80076a0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2209      	movs	r2, #9
 800768c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	887a      	ldrh	r2, [r7, #2]
 8007692:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076a0:	2200      	movs	r2, #0
 80076a2:	2100      	movs	r1, #0
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 fb5d 	bl	8007d64 <USBH_CtlReq>
 80076aa:	4603      	mov	r3, r0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	789b      	ldrb	r3, [r3, #2]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d10f      	bne.n	80076e8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2203      	movs	r2, #3
 80076d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076d4:	78fb      	ldrb	r3, [r7, #3]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076e8:	2200      	movs	r2, #0
 80076ea:	2100      	movs	r1, #0
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fb39 	bl	8007d64 <USBH_CtlReq>
 80076f2:	4603      	mov	r3, r0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	789b      	ldrb	r3, [r3, #2]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d10f      	bne.n	8007730 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	b29a      	uxth	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007730:	2200      	movs	r2, #0
 8007732:	2100      	movs	r1, #0
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fb15 	bl	8007d64 <USBH_CtlReq>
 800773a:	4603      	mov	r3, r0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	4613      	mov	r3, r2
 8007750:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007758:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007764:	2302      	movs	r3, #2
 8007766:	e094      	b.n	8007892 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	781a      	ldrb	r2, [r3, #0]
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	785a      	ldrb	r2, [r3, #1]
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	3302      	adds	r3, #2
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	3303      	adds	r3, #3
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	021b      	lsls	r3, r3, #8
 8007788:	b29b      	uxth	r3, r3
 800778a:	4313      	orrs	r3, r2
 800778c:	b29a      	uxth	r2, r3
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	791a      	ldrb	r2, [r3, #4]
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	795a      	ldrb	r2, [r3, #5]
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	799a      	ldrb	r2, [r3, #6]
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	79da      	ldrb	r2, [r3, #7]
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d004      	beq.n	80077c6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d11b      	bne.n	80077fe <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	79db      	ldrb	r3, [r3, #7]
 80077ca:	2b20      	cmp	r3, #32
 80077cc:	dc0f      	bgt.n	80077ee <USBH_ParseDevDesc+0xaa>
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	db0f      	blt.n	80077f2 <USBH_ParseDevDesc+0xae>
 80077d2:	3b08      	subs	r3, #8
 80077d4:	4a32      	ldr	r2, [pc, #200]	@ (80078a0 <USBH_ParseDevDesc+0x15c>)
 80077d6:	fa22 f303 	lsr.w	r3, r2, r3
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bf14      	ite	ne
 80077e2:	2301      	movne	r3, #1
 80077e4:	2300      	moveq	r3, #0
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d106      	bne.n	80077fa <USBH_ParseDevDesc+0xb6>
 80077ec:	e001      	b.n	80077f2 <USBH_ParseDevDesc+0xae>
 80077ee:	2b40      	cmp	r3, #64	@ 0x40
 80077f0:	d003      	beq.n	80077fa <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	2208      	movs	r2, #8
 80077f6:	71da      	strb	r2, [r3, #7]
        break;
 80077f8:	e000      	b.n	80077fc <USBH_ParseDevDesc+0xb8>
        break;
 80077fa:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80077fc:	e00e      	b.n	800781c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007804:	2b02      	cmp	r3, #2
 8007806:	d107      	bne.n	8007818 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	79db      	ldrb	r3, [r3, #7]
 800780c:	2b08      	cmp	r3, #8
 800780e:	d005      	beq.n	800781c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	2208      	movs	r2, #8
 8007814:	71da      	strb	r2, [r3, #7]
 8007816:	e001      	b.n	800781c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007818:	2303      	movs	r3, #3
 800781a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800781c:	88fb      	ldrh	r3, [r7, #6]
 800781e:	2b08      	cmp	r3, #8
 8007820:	d936      	bls.n	8007890 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	3308      	adds	r3, #8
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	3309      	adds	r3, #9
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	b29b      	uxth	r3, r3
 8007834:	4313      	orrs	r3, r2
 8007836:	b29a      	uxth	r2, r3
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	330a      	adds	r3, #10
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	330b      	adds	r3, #11
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	021b      	lsls	r3, r3, #8
 800784c:	b29b      	uxth	r3, r3
 800784e:	4313      	orrs	r3, r2
 8007850:	b29a      	uxth	r2, r3
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	330c      	adds	r3, #12
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	461a      	mov	r2, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	330d      	adds	r3, #13
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	b29b      	uxth	r3, r3
 8007868:	4313      	orrs	r3, r2
 800786a:	b29a      	uxth	r2, r3
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	7b9a      	ldrb	r2, [r3, #14]
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	7bda      	ldrb	r2, [r3, #15]
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	7c1a      	ldrb	r2, [r3, #16]
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	7c5a      	ldrb	r2, [r3, #17]
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
}
 8007892:	4618      	mov	r0, r3
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	01000101 	.word	0x01000101

080078a4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b08c      	sub	sp, #48	@ 0x30
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80078b8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80078ba:	2300      	movs	r3, #0
 80078bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80078c0:	2300      	movs	r3, #0
 80078c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80078d2:	2302      	movs	r3, #2
 80078d4:	e0de      	b.n	8007a94 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80078da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b09      	cmp	r3, #9
 80078e0:	d002      	beq.n	80078e8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80078e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e4:	2209      	movs	r2, #9
 80078e6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	781a      	ldrb	r2, [r3, #0]
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	785a      	ldrb	r2, [r3, #1]
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	3302      	adds	r3, #2
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	3303      	adds	r3, #3
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	021b      	lsls	r3, r3, #8
 8007908:	b29b      	uxth	r3, r3
 800790a:	4313      	orrs	r3, r2
 800790c:	b29b      	uxth	r3, r3
 800790e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007912:	bf28      	it	cs
 8007914:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007918:	b29a      	uxth	r2, r3
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	791a      	ldrb	r2, [r3, #4]
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	795a      	ldrb	r2, [r3, #5]
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	799a      	ldrb	r2, [r3, #6]
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	79da      	ldrb	r2, [r3, #7]
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	7a1a      	ldrb	r2, [r3, #8]
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	2b09      	cmp	r3, #9
 800794a:	f240 80a1 	bls.w	8007a90 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 800794e:	2309      	movs	r3, #9
 8007950:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007952:	2300      	movs	r3, #0
 8007954:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007956:	e085      	b.n	8007a64 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007958:	f107 0316 	add.w	r3, r7, #22
 800795c:	4619      	mov	r1, r3
 800795e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007960:	f000 f9e6 	bl	8007d30 <USBH_GetNextDesc>
 8007964:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007968:	785b      	ldrb	r3, [r3, #1]
 800796a:	2b04      	cmp	r3, #4
 800796c:	d17a      	bne.n	8007a64 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800796e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b09      	cmp	r3, #9
 8007974:	d002      	beq.n	800797c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007978:	2209      	movs	r2, #9
 800797a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800797c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007980:	221a      	movs	r2, #26
 8007982:	fb02 f303 	mul.w	r3, r2, r3
 8007986:	3308      	adds	r3, #8
 8007988:	6a3a      	ldr	r2, [r7, #32]
 800798a:	4413      	add	r3, r2
 800798c:	3302      	adds	r3, #2
 800798e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007990:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007992:	69f8      	ldr	r0, [r7, #28]
 8007994:	f000 f882 	bl	8007a9c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800799e:	2300      	movs	r3, #0
 80079a0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079a2:	e043      	b.n	8007a2c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079a4:	f107 0316 	add.w	r3, r7, #22
 80079a8:	4619      	mov	r1, r3
 80079aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079ac:	f000 f9c0 	bl	8007d30 <USBH_GetNextDesc>
 80079b0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b4:	785b      	ldrb	r3, [r3, #1]
 80079b6:	2b05      	cmp	r3, #5
 80079b8:	d138      	bne.n	8007a2c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80079ba:	69fb      	ldr	r3, [r7, #28]
 80079bc:	795b      	ldrb	r3, [r3, #5]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d113      	bne.n	80079ea <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d003      	beq.n	80079d2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	799b      	ldrb	r3, [r3, #6]
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d10b      	bne.n	80079ea <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	79db      	ldrb	r3, [r3, #7]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10b      	bne.n	80079f2 <USBH_ParseCfgDesc+0x14e>
 80079da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b09      	cmp	r3, #9
 80079e0:	d007      	beq.n	80079f2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80079e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e4:	2209      	movs	r2, #9
 80079e6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079e8:	e003      	b.n	80079f2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80079ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ec:	2207      	movs	r2, #7
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	e000      	b.n	80079f4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079f2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80079f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80079fc:	3201      	adds	r2, #1
 80079fe:	00d2      	lsls	r2, r2, #3
 8007a00:	211a      	movs	r1, #26
 8007a02:	fb01 f303 	mul.w	r3, r1, r3
 8007a06:	4413      	add	r3, r2
 8007a08:	3308      	adds	r3, #8
 8007a0a:	6a3a      	ldr	r2, [r7, #32]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3304      	adds	r3, #4
 8007a10:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a14:	69b9      	ldr	r1, [r7, #24]
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 f86f 	bl	8007afa <USBH_ParseEPDesc>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007a22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a26:	3301      	adds	r3, #1
 8007a28:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d80a      	bhi.n	8007a4a <USBH_ParseCfgDesc+0x1a6>
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	791b      	ldrb	r3, [r3, #4]
 8007a38:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d204      	bcs.n	8007a4a <USBH_ParseCfgDesc+0x1a6>
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	885a      	ldrh	r2, [r3, #2]
 8007a44:	8afb      	ldrh	r3, [r7, #22]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d8ac      	bhi.n	80079a4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	791b      	ldrb	r3, [r3, #4]
 8007a4e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d201      	bcs.n	8007a5a <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e01c      	b.n	8007a94 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8007a5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a5e:	3301      	adds	r3, #1
 8007a60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d805      	bhi.n	8007a78 <USBH_ParseCfgDesc+0x1d4>
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	885a      	ldrh	r2, [r3, #2]
 8007a70:	8afb      	ldrh	r3, [r7, #22]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	f63f af70 	bhi.w	8007958 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a78:	6a3b      	ldr	r3, [r7, #32]
 8007a7a:	791b      	ldrb	r3, [r3, #4]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	bf28      	it	cs
 8007a80:	2302      	movcs	r3, #2
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d201      	bcs.n	8007a90 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e001      	b.n	8007a94 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8007a90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3730      	adds	r7, #48	@ 0x30
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	781a      	ldrb	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	785a      	ldrb	r2, [r3, #1]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	789a      	ldrb	r2, [r3, #2]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	78da      	ldrb	r2, [r3, #3]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	791a      	ldrb	r2, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	795a      	ldrb	r2, [r3, #5]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	799a      	ldrb	r2, [r3, #6]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	79da      	ldrb	r2, [r3, #7]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	7a1a      	ldrb	r2, [r3, #8]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	721a      	strb	r2, [r3, #8]
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b087      	sub	sp, #28
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	781a      	ldrb	r2, [r3, #0]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	785a      	ldrb	r2, [r3, #1]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	789a      	ldrb	r2, [r3, #2]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	78da      	ldrb	r2, [r3, #3]
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3305      	adds	r3, #5
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	021b      	lsls	r3, r3, #8
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	799a      	ldrb	r2, [r3, #6]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	889b      	ldrh	r3, [r3, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d009      	beq.n	8007b68 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b5c:	d804      	bhi.n	8007b68 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b66:	d901      	bls.n	8007b6c <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d136      	bne.n	8007be4 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	78db      	ldrb	r3, [r3, #3]
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d108      	bne.n	8007b94 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	889b      	ldrh	r3, [r3, #4]
 8007b86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b8a:	f240 8097 	bls.w	8007cbc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	75fb      	strb	r3, [r7, #23]
 8007b92:	e093      	b.n	8007cbc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	78db      	ldrb	r3, [r3, #3]
 8007b98:	f003 0303 	and.w	r3, r3, #3
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d107      	bne.n	8007bb0 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	889b      	ldrh	r3, [r3, #4]
 8007ba4:	2b40      	cmp	r3, #64	@ 0x40
 8007ba6:	f240 8089 	bls.w	8007cbc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007baa:	2303      	movs	r3, #3
 8007bac:	75fb      	strb	r3, [r7, #23]
 8007bae:	e085      	b.n	8007cbc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	78db      	ldrb	r3, [r3, #3]
 8007bb4:	f003 0303 	and.w	r3, r3, #3
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d005      	beq.n	8007bc8 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	78db      	ldrb	r3, [r3, #3]
 8007bc0:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bc4:	2b03      	cmp	r3, #3
 8007bc6:	d10a      	bne.n	8007bde <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	799b      	ldrb	r3, [r3, #6]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d003      	beq.n	8007bd8 <USBH_ParseEPDesc+0xde>
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	799b      	ldrb	r3, [r3, #6]
 8007bd4:	2b10      	cmp	r3, #16
 8007bd6:	d970      	bls.n	8007cba <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bdc:	e06d      	b.n	8007cba <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007bde:	2303      	movs	r3, #3
 8007be0:	75fb      	strb	r3, [r7, #23]
 8007be2:	e06b      	b.n	8007cbc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d13c      	bne.n	8007c68 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	78db      	ldrb	r3, [r3, #3]
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d005      	beq.n	8007c06 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	78db      	ldrb	r3, [r3, #3]
 8007bfe:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d106      	bne.n	8007c14 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	889b      	ldrh	r3, [r3, #4]
 8007c0a:	2b40      	cmp	r3, #64	@ 0x40
 8007c0c:	d956      	bls.n	8007cbc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c12:	e053      	b.n	8007cbc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	78db      	ldrb	r3, [r3, #3]
 8007c18:	f003 0303 	and.w	r3, r3, #3
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d10e      	bne.n	8007c3e <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	799b      	ldrb	r3, [r3, #6]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007c2c:	2b10      	cmp	r3, #16
 8007c2e:	d803      	bhi.n	8007c38 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007c34:	2b40      	cmp	r3, #64	@ 0x40
 8007c36:	d941      	bls.n	8007cbc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	75fb      	strb	r3, [r7, #23]
 8007c3c:	e03e      	b.n	8007cbc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	78db      	ldrb	r3, [r3, #3]
 8007c42:	f003 0303 	and.w	r3, r3, #3
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d10b      	bne.n	8007c62 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	799b      	ldrb	r3, [r3, #6]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d004      	beq.n	8007c5c <USBH_ParseEPDesc+0x162>
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	889b      	ldrh	r3, [r3, #4]
 8007c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c5a:	d32f      	bcc.n	8007cbc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	75fb      	strb	r3, [r7, #23]
 8007c60:	e02c      	b.n	8007cbc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c62:	2303      	movs	r3, #3
 8007c64:	75fb      	strb	r3, [r7, #23]
 8007c66:	e029      	b.n	8007cbc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d120      	bne.n	8007cb4 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	78db      	ldrb	r3, [r3, #3]
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d106      	bne.n	8007c8c <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	889b      	ldrh	r3, [r3, #4]
 8007c82:	2b08      	cmp	r3, #8
 8007c84:	d01a      	beq.n	8007cbc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c86:	2303      	movs	r3, #3
 8007c88:	75fb      	strb	r3, [r7, #23]
 8007c8a:	e017      	b.n	8007cbc <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	78db      	ldrb	r3, [r3, #3]
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d10a      	bne.n	8007cae <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	799b      	ldrb	r3, [r3, #6]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d003      	beq.n	8007ca8 <USBH_ParseEPDesc+0x1ae>
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	889b      	ldrh	r3, [r3, #4]
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d909      	bls.n	8007cbc <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	75fb      	strb	r3, [r7, #23]
 8007cac:	e006      	b.n	8007cbc <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	75fb      	strb	r3, [r7, #23]
 8007cb2:	e003      	b.n	8007cbc <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	75fb      	strb	r3, [r7, #23]
 8007cb8:	e000      	b.n	8007cbc <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007cba:	bf00      	nop
  }

  return status;
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	371c      	adds	r7, #28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b087      	sub	sp, #28
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d120      	bne.n	8007d24 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	1e9a      	subs	r2, r3, #2
 8007ce8:	88fb      	ldrh	r3, [r7, #6]
 8007cea:	4293      	cmp	r3, r2
 8007cec:	bf28      	it	cs
 8007cee:	4613      	movcs	r3, r2
 8007cf0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3302      	adds	r3, #2
 8007cf6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	82fb      	strh	r3, [r7, #22]
 8007cfc:	e00b      	b.n	8007d16 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007cfe:	8afb      	ldrh	r3, [r7, #22]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4413      	add	r3, r2
 8007d04:	781a      	ldrb	r2, [r3, #0]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007d10:	8afb      	ldrh	r3, [r7, #22]
 8007d12:	3302      	adds	r3, #2
 8007d14:	82fb      	strh	r3, [r7, #22]
 8007d16:	8afa      	ldrh	r2, [r7, #22]
 8007d18:	8abb      	ldrh	r3, [r7, #20]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d3ef      	bcc.n	8007cfe <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
  }
}
 8007d24:	bf00      	nop
 8007d26:	371c      	adds	r7, #28
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	7812      	ldrb	r2, [r2, #0]
 8007d42:	4413      	add	r3, r2
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4413      	add	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d56:	68fb      	ldr	r3, [r7, #12]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d72:	2301      	movs	r3, #1
 8007d74:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	789b      	ldrb	r3, [r3, #2]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d002      	beq.n	8007d84 <USBH_CtlReq+0x20>
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d00f      	beq.n	8007da2 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8007d82:	e027      	b.n	8007dd4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	88fa      	ldrh	r2, [r7, #6]
 8007d8e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2201      	movs	r2, #1
 8007d94:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2202      	movs	r2, #2
 8007d9a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007da0:	e018      	b.n	8007dd4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 f81c 	bl	8007de0 <USBH_HandleControl>
 8007da8:	4603      	mov	r3, r0
 8007daa:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d002      	beq.n	8007db8 <USBH_CtlReq+0x54>
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	2b03      	cmp	r3, #3
 8007db6:	d106      	bne.n	8007dc6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	761a      	strb	r2, [r3, #24]
      break;
 8007dc4:	e005      	b.n	8007dd2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d102      	bne.n	8007dd2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	709a      	strb	r2, [r3, #2]
      break;
 8007dd2:	bf00      	nop
  }
  return status;
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007de8:	2301      	movs	r3, #1
 8007dea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	7e1b      	ldrb	r3, [r3, #24]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	2b0a      	cmp	r3, #10
 8007df8:	f200 8157 	bhi.w	80080aa <USBH_HandleControl+0x2ca>
 8007dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8007e04 <USBH_HandleControl+0x24>)
 8007dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e02:	bf00      	nop
 8007e04:	08007e31 	.word	0x08007e31
 8007e08:	08007e4b 	.word	0x08007e4b
 8007e0c:	08007eb5 	.word	0x08007eb5
 8007e10:	08007edb 	.word	0x08007edb
 8007e14:	08007f15 	.word	0x08007f15
 8007e18:	08007f3f 	.word	0x08007f3f
 8007e1c:	08007f91 	.word	0x08007f91
 8007e20:	08007fb3 	.word	0x08007fb3
 8007e24:	08007fef 	.word	0x08007fef
 8007e28:	08008015 	.word	0x08008015
 8007e2c:	08008053 	.word	0x08008053
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f103 0110 	add.w	r1, r3, #16
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	795b      	ldrb	r3, [r3, #5]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f945 	bl	80080cc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2202      	movs	r2, #2
 8007e46:	761a      	strb	r2, [r3, #24]
      break;
 8007e48:	e13a      	b.n	80080c0 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	795b      	ldrb	r3, [r3, #5]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fcb5 	bl	80087c0 <USBH_LL_GetURBState>
 8007e56:	4603      	mov	r3, r0
 8007e58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e5a:	7bbb      	ldrb	r3, [r7, #14]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d11e      	bne.n	8007e9e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	7c1b      	ldrb	r3, [r3, #16]
 8007e64:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007e68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	8adb      	ldrh	r3, [r3, #22]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e72:	7b7b      	ldrb	r3, [r7, #13]
 8007e74:	2b80      	cmp	r3, #128	@ 0x80
 8007e76:	d103      	bne.n	8007e80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007e7e:	e116      	b.n	80080ae <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2205      	movs	r2, #5
 8007e84:	761a      	strb	r2, [r3, #24]
      break;
 8007e86:	e112      	b.n	80080ae <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8007e88:	7b7b      	ldrb	r3, [r7, #13]
 8007e8a:	2b80      	cmp	r3, #128	@ 0x80
 8007e8c:	d103      	bne.n	8007e96 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2209      	movs	r2, #9
 8007e92:	761a      	strb	r2, [r3, #24]
      break;
 8007e94:	e10b      	b.n	80080ae <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2207      	movs	r2, #7
 8007e9a:	761a      	strb	r2, [r3, #24]
      break;
 8007e9c:	e107      	b.n	80080ae <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d003      	beq.n	8007eac <USBH_HandleControl+0xcc>
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	f040 8101 	bne.w	80080ae <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	220b      	movs	r2, #11
 8007eb0:	761a      	strb	r2, [r3, #24]
      break;
 8007eb2:	e0fc      	b.n	80080ae <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6899      	ldr	r1, [r3, #8]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	899a      	ldrh	r2, [r3, #12]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	791b      	ldrb	r3, [r3, #4]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f93c 	bl	800814a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2204      	movs	r2, #4
 8007ed6:	761a      	strb	r2, [r3, #24]
      break;
 8007ed8:	e0f2      	b.n	80080c0 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	791b      	ldrb	r3, [r3, #4]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fc6d 	bl	80087c0 <USBH_LL_GetURBState>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d103      	bne.n	8007ef8 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2209      	movs	r2, #9
 8007ef4:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007ef6:	e0dc      	b.n	80080b2 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b05      	cmp	r3, #5
 8007efc:	d102      	bne.n	8007f04 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8007efe:	2303      	movs	r3, #3
 8007f00:	73fb      	strb	r3, [r7, #15]
      break;
 8007f02:	e0d6      	b.n	80080b2 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	f040 80d3 	bne.w	80080b2 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	220b      	movs	r2, #11
 8007f10:	761a      	strb	r2, [r3, #24]
      break;
 8007f12:	e0ce      	b.n	80080b2 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6899      	ldr	r1, [r3, #8]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	899a      	ldrh	r2, [r3, #12]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	795b      	ldrb	r3, [r3, #5]
 8007f20:	2001      	movs	r0, #1
 8007f22:	9000      	str	r0, [sp, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f8eb 	bl	8008100 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2206      	movs	r2, #6
 8007f3a:	761a      	strb	r2, [r3, #24]
      break;
 8007f3c:	e0c0      	b.n	80080c0 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	795b      	ldrb	r3, [r3, #5]
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fc3b 	bl	80087c0 <USBH_LL_GetURBState>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d103      	bne.n	8007f5c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2207      	movs	r2, #7
 8007f58:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007f5a:	e0ac      	b.n	80080b6 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
 8007f5e:	2b05      	cmp	r3, #5
 8007f60:	d105      	bne.n	8007f6e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	220c      	movs	r2, #12
 8007f66:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f6c:	e0a3      	b.n	80080b6 <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f6e:	7bbb      	ldrb	r3, [r7, #14]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d103      	bne.n	8007f7c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2205      	movs	r2, #5
 8007f78:	761a      	strb	r2, [r3, #24]
      break;
 8007f7a:	e09c      	b.n	80080b6 <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	f040 8099 	bne.w	80080b6 <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	220b      	movs	r2, #11
 8007f88:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f8e:	e092      	b.n	80080b6 <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	791b      	ldrb	r3, [r3, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	2100      	movs	r1, #0
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f8d6 	bl	800814a <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2208      	movs	r2, #8
 8007fae:	761a      	strb	r2, [r3, #24]

      break;
 8007fb0:	e086      	b.n	80080c0 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	791b      	ldrb	r3, [r3, #4]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fc01 	bl	80087c0 <USBH_LL_GetURBState>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d105      	bne.n	8007fd4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	220d      	movs	r2, #13
 8007fcc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007fd2:	e072      	b.n	80080ba <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d103      	bne.n	8007fe2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	220b      	movs	r2, #11
 8007fde:	761a      	strb	r2, [r3, #24]
      break;
 8007fe0:	e06b      	b.n	80080ba <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	2b05      	cmp	r3, #5
 8007fe6:	d168      	bne.n	80080ba <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	73fb      	strb	r3, [r7, #15]
      break;
 8007fec:	e065      	b.n	80080ba <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	795b      	ldrb	r3, [r3, #5]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	9200      	str	r2, [sp, #0]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2100      	movs	r1, #0
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f880 	bl	8008100 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008006:	b29a      	uxth	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	220a      	movs	r2, #10
 8008010:	761a      	strb	r2, [r3, #24]
      break;
 8008012:	e055      	b.n	80080c0 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	795b      	ldrb	r3, [r3, #5]
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fbd0 	bl	80087c0 <USBH_LL_GetURBState>
 8008020:	4603      	mov	r3, r0
 8008022:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008024:	7bbb      	ldrb	r3, [r7, #14]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d105      	bne.n	8008036 <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	220d      	movs	r2, #13
 8008032:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008034:	e043      	b.n	80080be <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	2b02      	cmp	r3, #2
 800803a:	d103      	bne.n	8008044 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2209      	movs	r2, #9
 8008040:	761a      	strb	r2, [r3, #24]
      break;
 8008042:	e03c      	b.n	80080be <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b04      	cmp	r3, #4
 8008048:	d139      	bne.n	80080be <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	220b      	movs	r2, #11
 800804e:	761a      	strb	r2, [r3, #24]
      break;
 8008050:	e035      	b.n	80080be <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	7e5b      	ldrb	r3, [r3, #25]
 8008056:	3301      	adds	r3, #1
 8008058:	b2da      	uxtb	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	765a      	strb	r2, [r3, #25]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	7e5b      	ldrb	r3, [r3, #25]
 8008062:	2b02      	cmp	r3, #2
 8008064:	d806      	bhi.n	8008074 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008072:	e025      	b.n	80080c0 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800807a:	2106      	movs	r1, #6
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	795b      	ldrb	r3, [r3, #5]
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f90d 	bl	80082ac <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	791b      	ldrb	r3, [r3, #4]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 f907 	bl	80082ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80080a4:	2302      	movs	r3, #2
 80080a6:	73fb      	strb	r3, [r7, #15]
      break;
 80080a8:	e00a      	b.n	80080c0 <USBH_HandleControl+0x2e0>

    default:
      break;
 80080aa:	bf00      	nop
 80080ac:	e008      	b.n	80080c0 <USBH_HandleControl+0x2e0>
      break;
 80080ae:	bf00      	nop
 80080b0:	e006      	b.n	80080c0 <USBH_HandleControl+0x2e0>
      break;
 80080b2:	bf00      	nop
 80080b4:	e004      	b.n	80080c0 <USBH_HandleControl+0x2e0>
      break;
 80080b6:	bf00      	nop
 80080b8:	e002      	b.n	80080c0 <USBH_HandleControl+0x2e0>
      break;
 80080ba:	bf00      	nop
 80080bc:	e000      	b.n	80080c0 <USBH_HandleControl+0x2e0>
      break;
 80080be:	bf00      	nop
  }

  return status;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop

080080cc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b088      	sub	sp, #32
 80080d0:	af04      	add	r7, sp, #16
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	4613      	mov	r3, r2
 80080d8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080da:	79f9      	ldrb	r1, [r7, #7]
 80080dc:	2300      	movs	r3, #0
 80080de:	9303      	str	r3, [sp, #12]
 80080e0:	2308      	movs	r3, #8
 80080e2:	9302      	str	r3, [sp, #8]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	9301      	str	r3, [sp, #4]
 80080e8:	2300      	movs	r3, #0
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	2300      	movs	r3, #0
 80080ee:	2200      	movs	r2, #0
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 fb34 	bl	800875e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af04      	add	r7, sp, #16
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	4611      	mov	r1, r2
 800810c:	461a      	mov	r2, r3
 800810e:	460b      	mov	r3, r1
 8008110:	80fb      	strh	r3, [r7, #6]
 8008112:	4613      	mov	r3, r2
 8008114:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008124:	7979      	ldrb	r1, [r7, #5]
 8008126:	7e3b      	ldrb	r3, [r7, #24]
 8008128:	9303      	str	r3, [sp, #12]
 800812a:	88fb      	ldrh	r3, [r7, #6]
 800812c:	9302      	str	r3, [sp, #8]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	2301      	movs	r3, #1
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	2300      	movs	r3, #0
 8008138:	2200      	movs	r2, #0
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 fb0f 	bl	800875e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800814a:	b580      	push	{r7, lr}
 800814c:	b088      	sub	sp, #32
 800814e:	af04      	add	r7, sp, #16
 8008150:	60f8      	str	r0, [r7, #12]
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	4611      	mov	r1, r2
 8008156:	461a      	mov	r2, r3
 8008158:	460b      	mov	r3, r1
 800815a:	80fb      	strh	r3, [r7, #6]
 800815c:	4613      	mov	r3, r2
 800815e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008160:	7979      	ldrb	r1, [r7, #5]
 8008162:	2300      	movs	r3, #0
 8008164:	9303      	str	r3, [sp, #12]
 8008166:	88fb      	ldrh	r3, [r7, #6]
 8008168:	9302      	str	r3, [sp, #8]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	2301      	movs	r3, #1
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	2300      	movs	r3, #0
 8008174:	2201      	movs	r2, #1
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f000 faf1 	bl	800875e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800817c:	2300      	movs	r3, #0

}
 800817e:	4618      	mov	r0, r3
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b088      	sub	sp, #32
 800818a:	af04      	add	r7, sp, #16
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	60b9      	str	r1, [r7, #8]
 8008190:	4611      	mov	r1, r2
 8008192:	461a      	mov	r2, r3
 8008194:	460b      	mov	r3, r1
 8008196:	80fb      	strh	r3, [r7, #6]
 8008198:	4613      	mov	r3, r2
 800819a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081aa:	7979      	ldrb	r1, [r7, #5]
 80081ac:	7e3b      	ldrb	r3, [r7, #24]
 80081ae:	9303      	str	r3, [sp, #12]
 80081b0:	88fb      	ldrh	r3, [r7, #6]
 80081b2:	9302      	str	r3, [sp, #8]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	2301      	movs	r3, #1
 80081ba:	9300      	str	r3, [sp, #0]
 80081bc:	2302      	movs	r3, #2
 80081be:	2200      	movs	r2, #0
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 facc 	bl	800875e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af04      	add	r7, sp, #16
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	4611      	mov	r1, r2
 80081dc:	461a      	mov	r2, r3
 80081de:	460b      	mov	r3, r1
 80081e0:	80fb      	strh	r3, [r7, #6]
 80081e2:	4613      	mov	r3, r2
 80081e4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081e6:	7979      	ldrb	r1, [r7, #5]
 80081e8:	2300      	movs	r3, #0
 80081ea:	9303      	str	r3, [sp, #12]
 80081ec:	88fb      	ldrh	r3, [r7, #6]
 80081ee:	9302      	str	r3, [sp, #8]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	9301      	str	r3, [sp, #4]
 80081f4:	2301      	movs	r3, #1
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	2302      	movs	r3, #2
 80081fa:	2201      	movs	r2, #1
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 faae 	bl	800875e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af04      	add	r7, sp, #16
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	4608      	mov	r0, r1
 8008216:	4611      	mov	r1, r2
 8008218:	461a      	mov	r2, r3
 800821a:	4603      	mov	r3, r0
 800821c:	70fb      	strb	r3, [r7, #3]
 800821e:	460b      	mov	r3, r1
 8008220:	70bb      	strb	r3, [r7, #2]
 8008222:	4613      	mov	r3, r2
 8008224:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008226:	7878      	ldrb	r0, [r7, #1]
 8008228:	78ba      	ldrb	r2, [r7, #2]
 800822a:	78f9      	ldrb	r1, [r7, #3]
 800822c:	8b3b      	ldrh	r3, [r7, #24]
 800822e:	9302      	str	r3, [sp, #8]
 8008230:	7d3b      	ldrb	r3, [r7, #20]
 8008232:	9301      	str	r3, [sp, #4]
 8008234:	7c3b      	ldrb	r3, [r7, #16]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	4603      	mov	r3, r0
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa53 	bl	80086e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008240:	2300      	movs	r3, #0
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008256:	78fb      	ldrb	r3, [r7, #3]
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fa72 	bl	8008744 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	460b      	mov	r3, r1
 8008274:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f836 	bl	80082e8 <USBH_GetFreePipe>
 800827c:	4603      	mov	r3, r0
 800827e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008280:	89fb      	ldrh	r3, [r7, #14]
 8008282:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008286:	4293      	cmp	r3, r2
 8008288:	d00a      	beq.n	80082a0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800828a:	78fa      	ldrb	r2, [r7, #3]
 800828c:	89fb      	ldrh	r3, [r7, #14]
 800828e:	f003 030f 	and.w	r3, r3, #15
 8008292:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	33e0      	adds	r3, #224	@ 0xe0
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	440b      	add	r3, r1
 800829e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80082a0:	89fb      	ldrh	r3, [r7, #14]
 80082a2:	b2db      	uxtb	r3, r3
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80082b8:	78fb      	ldrb	r3, [r7, #3]
 80082ba:	2b0f      	cmp	r3, #15
 80082bc:	d80d      	bhi.n	80082da <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	33e0      	adds	r3, #224	@ 0xe0
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4413      	add	r3, r2
 80082c8:	685a      	ldr	r2, [r3, #4]
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	33e0      	adds	r3, #224	@ 0xe0
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	440b      	add	r3, r1
 80082d8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
 80082f8:	e00f      	b.n	800831a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	33e0      	adds	r3, #224	@ 0xe0
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4413      	add	r3, r2
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d102      	bne.n	8008314 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	b29b      	uxth	r3, r3
 8008312:	e007      	b.n	8008324 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	3301      	adds	r3, #1
 8008318:	73fb      	strb	r3, [r7, #15]
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	2b0f      	cmp	r3, #15
 800831e:	d9ec      	bls.n	80082fa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008320:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008324:	4618      	mov	r0, r3
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008334:	2201      	movs	r2, #1
 8008336:	490e      	ldr	r1, [pc, #56]	@ (8008370 <MX_USB_HOST_Init+0x40>)
 8008338:	480e      	ldr	r0, [pc, #56]	@ (8008374 <MX_USB_HOST_Init+0x44>)
 800833a:	f7fe fb0f 	bl	800695c <USBH_Init>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008344:	f7f8 fb4e 	bl	80009e4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008348:	490b      	ldr	r1, [pc, #44]	@ (8008378 <MX_USB_HOST_Init+0x48>)
 800834a:	480a      	ldr	r0, [pc, #40]	@ (8008374 <MX_USB_HOST_Init+0x44>)
 800834c:	f7fe fbb1 	bl	8006ab2 <USBH_RegisterClass>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008356:	f7f8 fb45 	bl	80009e4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800835a:	4806      	ldr	r0, [pc, #24]	@ (8008374 <MX_USB_HOST_Init+0x44>)
 800835c:	f7fe fc35 	bl	8006bca <USBH_Start>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008366:	f7f8 fb3d 	bl	80009e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800836a:	bf00      	nop
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	08008391 	.word	0x08008391
 8008374:	20000198 	.word	0x20000198
 8008378:	2000000c 	.word	0x2000000c

0800837c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008380:	4802      	ldr	r0, [pc, #8]	@ (800838c <MX_USB_HOST_Process+0x10>)
 8008382:	f7fe fc33 	bl	8006bec <USBH_Process>
}
 8008386:	bf00      	nop
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	20000198 	.word	0x20000198

08008390 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800839c:	78fb      	ldrb	r3, [r7, #3]
 800839e:	3b01      	subs	r3, #1
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d819      	bhi.n	80083d8 <USBH_UserProcess+0x48>
 80083a4:	a201      	add	r2, pc, #4	@ (adr r2, 80083ac <USBH_UserProcess+0x1c>)
 80083a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083aa:	bf00      	nop
 80083ac:	080083d9 	.word	0x080083d9
 80083b0:	080083c9 	.word	0x080083c9
 80083b4:	080083d9 	.word	0x080083d9
 80083b8:	080083d1 	.word	0x080083d1
 80083bc:	080083c1 	.word	0x080083c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80083c0:	4b09      	ldr	r3, [pc, #36]	@ (80083e8 <USBH_UserProcess+0x58>)
 80083c2:	2203      	movs	r2, #3
 80083c4:	701a      	strb	r2, [r3, #0]
  break;
 80083c6:	e008      	b.n	80083da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80083c8:	4b07      	ldr	r3, [pc, #28]	@ (80083e8 <USBH_UserProcess+0x58>)
 80083ca:	2202      	movs	r2, #2
 80083cc:	701a      	strb	r2, [r3, #0]
  break;
 80083ce:	e004      	b.n	80083da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80083d0:	4b05      	ldr	r3, [pc, #20]	@ (80083e8 <USBH_UserProcess+0x58>)
 80083d2:	2201      	movs	r2, #1
 80083d4:	701a      	strb	r2, [r3, #0]
  break;
 80083d6:	e000      	b.n	80083da <USBH_UserProcess+0x4a>

  default:
  break;
 80083d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80083da:	bf00      	nop
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	20000570 	.word	0x20000570

080083ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08a      	sub	sp, #40	@ 0x28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083f4:	f107 0314 	add.w	r3, r7, #20
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	605a      	str	r2, [r3, #4]
 80083fe:	609a      	str	r2, [r3, #8]
 8008400:	60da      	str	r2, [r3, #12]
 8008402:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800840c:	d147      	bne.n	800849e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800840e:	2300      	movs	r3, #0
 8008410:	613b      	str	r3, [r7, #16]
 8008412:	4b25      	ldr	r3, [pc, #148]	@ (80084a8 <HAL_HCD_MspInit+0xbc>)
 8008414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008416:	4a24      	ldr	r2, [pc, #144]	@ (80084a8 <HAL_HCD_MspInit+0xbc>)
 8008418:	f043 0301 	orr.w	r3, r3, #1
 800841c:	6313      	str	r3, [r2, #48]	@ 0x30
 800841e:	4b22      	ldr	r3, [pc, #136]	@ (80084a8 <HAL_HCD_MspInit+0xbc>)
 8008420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	613b      	str	r3, [r7, #16]
 8008428:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800842a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800842e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008430:	2300      	movs	r3, #0
 8008432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008434:	2300      	movs	r3, #0
 8008436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008438:	f107 0314 	add.w	r3, r7, #20
 800843c:	4619      	mov	r1, r3
 800843e:	481b      	ldr	r0, [pc, #108]	@ (80084ac <HAL_HCD_MspInit+0xc0>)
 8008440:	f7f8 fe68 	bl	8001114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008444:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800844a:	2302      	movs	r3, #2
 800844c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800844e:	2300      	movs	r3, #0
 8008450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008452:	2300      	movs	r3, #0
 8008454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008456:	230a      	movs	r3, #10
 8008458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800845a:	f107 0314 	add.w	r3, r7, #20
 800845e:	4619      	mov	r1, r3
 8008460:	4812      	ldr	r0, [pc, #72]	@ (80084ac <HAL_HCD_MspInit+0xc0>)
 8008462:	f7f8 fe57 	bl	8001114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008466:	4b10      	ldr	r3, [pc, #64]	@ (80084a8 <HAL_HCD_MspInit+0xbc>)
 8008468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800846a:	4a0f      	ldr	r2, [pc, #60]	@ (80084a8 <HAL_HCD_MspInit+0xbc>)
 800846c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008470:	6353      	str	r3, [r2, #52]	@ 0x34
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	4b0c      	ldr	r3, [pc, #48]	@ (80084a8 <HAL_HCD_MspInit+0xbc>)
 8008478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800847a:	4a0b      	ldr	r2, [pc, #44]	@ (80084a8 <HAL_HCD_MspInit+0xbc>)
 800847c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008480:	6453      	str	r3, [r2, #68]	@ 0x44
 8008482:	4b09      	ldr	r3, [pc, #36]	@ (80084a8 <HAL_HCD_MspInit+0xbc>)
 8008484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800848e:	2200      	movs	r2, #0
 8008490:	2100      	movs	r1, #0
 8008492:	2043      	movs	r0, #67	@ 0x43
 8008494:	f7f8 fe07 	bl	80010a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008498:	2043      	movs	r0, #67	@ 0x43
 800849a:	f7f8 fe20 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800849e:	bf00      	nop
 80084a0:	3728      	adds	r7, #40	@ 0x28
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	40023800 	.word	0x40023800
 80084ac:	40020000 	.word	0x40020000

080084b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084be:	4618      	mov	r0, r3
 80084c0:	f7fe ff6d 	bl	800739e <USBH_LL_IncTimer>
}
 80084c4:	bf00      	nop
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fe ffa9 	bl	8007432 <USBH_LL_Connect>
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fe ffb2 	bl	8007460 <USBH_LL_Disconnect>
}
 80084fc:	bf00      	nop
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
 8008510:	4613      	mov	r3, r2
 8008512:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe ff5f 	bl	80073f2 <USBH_LL_PortEnabled>
}
 8008534:	bf00      	nop
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800854a:	4618      	mov	r0, r3
 800854c:	f7fe ff5f 	bl	800740e <USBH_LL_PortDisabled>
}
 8008550:	bf00      	nop
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008566:	2b01      	cmp	r3, #1
 8008568:	d12a      	bne.n	80085c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800856a:	4a18      	ldr	r2, [pc, #96]	@ (80085cc <USBH_LL_Init+0x74>)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a15      	ldr	r2, [pc, #84]	@ (80085cc <USBH_LL_Init+0x74>)
 8008576:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800857a:	4b14      	ldr	r3, [pc, #80]	@ (80085cc <USBH_LL_Init+0x74>)
 800857c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008580:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008582:	4b12      	ldr	r3, [pc, #72]	@ (80085cc <USBH_LL_Init+0x74>)
 8008584:	2208      	movs	r2, #8
 8008586:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008588:	4b10      	ldr	r3, [pc, #64]	@ (80085cc <USBH_LL_Init+0x74>)
 800858a:	2201      	movs	r2, #1
 800858c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800858e:	4b0f      	ldr	r3, [pc, #60]	@ (80085cc <USBH_LL_Init+0x74>)
 8008590:	2200      	movs	r2, #0
 8008592:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008594:	4b0d      	ldr	r3, [pc, #52]	@ (80085cc <USBH_LL_Init+0x74>)
 8008596:	2202      	movs	r2, #2
 8008598:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800859a:	4b0c      	ldr	r3, [pc, #48]	@ (80085cc <USBH_LL_Init+0x74>)
 800859c:	2200      	movs	r2, #0
 800859e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80085a0:	480a      	ldr	r0, [pc, #40]	@ (80085cc <USBH_LL_Init+0x74>)
 80085a2:	f7f8 ff85 	bl	80014b0 <HAL_HCD_Init>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d001      	beq.n	80085b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80085ac:	f7f8 fa1a 	bl	80009e4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80085b0:	4806      	ldr	r0, [pc, #24]	@ (80085cc <USBH_LL_Init+0x74>)
 80085b2:	f7f9 fbc3 	bl	8001d3c <HAL_HCD_GetCurrentFrame>
 80085b6:	4603      	mov	r3, r0
 80085b8:	4619      	mov	r1, r3
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7fe fee0 	bl	8007380 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000574 	.word	0x20000574

080085d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7f9 fb30 	bl	8001c4c <HAL_HCD_Start>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 f94c 	bl	8008890 <USBH_Get_USB_Status>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800861c:	4618      	mov	r0, r3
 800861e:	f7f9 fb38 	bl	8001c92 <HAL_HCD_Stop>
 8008622:	4603      	mov	r3, r0
 8008624:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	4618      	mov	r0, r3
 800862a:	f000 f931 	bl	8008890 <USBH_Get_USB_Status>
 800862e:	4603      	mov	r3, r0
 8008630:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008632:	7bbb      	ldrb	r3, [r7, #14]
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008644:	2301      	movs	r3, #1
 8008646:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800864e:	4618      	mov	r0, r3
 8008650:	f7f9 fb82 	bl	8001d58 <HAL_HCD_GetCurrentSpeed>
 8008654:	4603      	mov	r3, r0
 8008656:	2b02      	cmp	r3, #2
 8008658:	d00c      	beq.n	8008674 <USBH_LL_GetSpeed+0x38>
 800865a:	2b02      	cmp	r3, #2
 800865c:	d80d      	bhi.n	800867a <USBH_LL_GetSpeed+0x3e>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d002      	beq.n	8008668 <USBH_LL_GetSpeed+0x2c>
 8008662:	2b01      	cmp	r3, #1
 8008664:	d003      	beq.n	800866e <USBH_LL_GetSpeed+0x32>
 8008666:	e008      	b.n	800867a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]
    break;
 800866c:	e008      	b.n	8008680 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800866e:	2301      	movs	r3, #1
 8008670:	73fb      	strb	r3, [r7, #15]
    break;
 8008672:	e005      	b.n	8008680 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008674:	2302      	movs	r3, #2
 8008676:	73fb      	strb	r3, [r7, #15]
    break;
 8008678:	e002      	b.n	8008680 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800867a:	2301      	movs	r3, #1
 800867c:	73fb      	strb	r3, [r7, #15]
    break;
 800867e:	bf00      	nop
  }
  return  speed;
 8008680:	7bfb      	ldrb	r3, [r7, #15]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008696:	2300      	movs	r3, #0
 8008698:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7f9 fb13 	bl	8001ccc <HAL_HCD_ResetPort>
 80086a6:	4603      	mov	r3, r0
 80086a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f000 f8ef 	bl	8008890 <USBH_Get_USB_Status>
 80086b2:	4603      	mov	r3, r0
 80086b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	4611      	mov	r1, r2
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7f9 fb1b 	bl	8001d12 <HAL_HCD_HC_GetXferCount>
 80086dc:	4603      	mov	r3, r0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 80086e6:	b590      	push	{r4, r7, lr}
 80086e8:	b089      	sub	sp, #36	@ 0x24
 80086ea:	af04      	add	r7, sp, #16
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	4608      	mov	r0, r1
 80086f0:	4611      	mov	r1, r2
 80086f2:	461a      	mov	r2, r3
 80086f4:	4603      	mov	r3, r0
 80086f6:	70fb      	strb	r3, [r7, #3]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70bb      	strb	r3, [r7, #2]
 80086fc:	4613      	mov	r3, r2
 80086fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800870e:	787c      	ldrb	r4, [r7, #1]
 8008710:	78ba      	ldrb	r2, [r7, #2]
 8008712:	78f9      	ldrb	r1, [r7, #3]
 8008714:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008716:	9302      	str	r3, [sp, #8]
 8008718:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	4623      	mov	r3, r4
 8008726:	f7f8 ff2a 	bl	800157e <HAL_HCD_HC_Init>
 800872a:	4603      	mov	r3, r0
 800872c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	4618      	mov	r0, r3
 8008732:	f000 f8ad 	bl	8008890 <USBH_Get_USB_Status>
 8008736:	4603      	mov	r3, r0
 8008738:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800873a:	7bbb      	ldrb	r3, [r7, #14]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3714      	adds	r7, #20
 8008740:	46bd      	mov	sp, r7
 8008742:	bd90      	pop	{r4, r7, pc}

08008744 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800875e:	b590      	push	{r4, r7, lr}
 8008760:	b089      	sub	sp, #36	@ 0x24
 8008762:	af04      	add	r7, sp, #16
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	4608      	mov	r0, r1
 8008768:	4611      	mov	r1, r2
 800876a:	461a      	mov	r2, r3
 800876c:	4603      	mov	r3, r0
 800876e:	70fb      	strb	r3, [r7, #3]
 8008770:	460b      	mov	r3, r1
 8008772:	70bb      	strb	r3, [r7, #2]
 8008774:	4613      	mov	r3, r2
 8008776:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008786:	787c      	ldrb	r4, [r7, #1]
 8008788:	78ba      	ldrb	r2, [r7, #2]
 800878a:	78f9      	ldrb	r1, [r7, #3]
 800878c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008790:	9303      	str	r3, [sp, #12]
 8008792:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008794:	9302      	str	r3, [sp, #8]
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	9301      	str	r3, [sp, #4]
 800879a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	4623      	mov	r3, r4
 80087a2:	f7f8 ffa5 	bl	80016f0 <HAL_HCD_HC_SubmitRequest>
 80087a6:	4603      	mov	r3, r0
 80087a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 f86f 	bl	8008890 <USBH_Get_USB_Status>
 80087b2:	4603      	mov	r3, r0
 80087b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd90      	pop	{r4, r7, pc}

080087c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	460b      	mov	r3, r1
 80087ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087d2:	78fa      	ldrb	r2, [r7, #3]
 80087d4:	4611      	mov	r1, r2
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7f9 fa86 	bl	8001ce8 <HAL_HCD_HC_GetURBState>
 80087dc:	4603      	mov	r3, r0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	460b      	mov	r3, r1
 80087f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d103      	bne.n	8008804 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80087fc:	78fb      	ldrb	r3, [r7, #3]
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 f872 	bl	80088e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008804:	20c8      	movs	r0, #200	@ 0xc8
 8008806:	f7f8 fb4f 	bl	8000ea8 <HAL_Delay>
  return USBH_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	70fb      	strb	r3, [r7, #3]
 8008820:	4613      	mov	r3, r2
 8008822:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800882a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800882c:	78fa      	ldrb	r2, [r7, #3]
 800882e:	68f9      	ldr	r1, [r7, #12]
 8008830:	4613      	mov	r3, r2
 8008832:	011b      	lsls	r3, r3, #4
 8008834:	1a9b      	subs	r3, r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	440b      	add	r3, r1
 800883a:	3317      	adds	r3, #23
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00a      	beq.n	8008858 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	68f9      	ldr	r1, [r7, #12]
 8008846:	4613      	mov	r3, r2
 8008848:	011b      	lsls	r3, r3, #4
 800884a:	1a9b      	subs	r3, r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	440b      	add	r3, r1
 8008850:	333c      	adds	r3, #60	@ 0x3c
 8008852:	78ba      	ldrb	r2, [r7, #2]
 8008854:	701a      	strb	r2, [r3, #0]
 8008856:	e009      	b.n	800886c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008858:	78fa      	ldrb	r2, [r7, #3]
 800885a:	68f9      	ldr	r1, [r7, #12]
 800885c:	4613      	mov	r3, r2
 800885e:	011b      	lsls	r3, r3, #4
 8008860:	1a9b      	subs	r3, r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	440b      	add	r3, r1
 8008866:	333d      	adds	r3, #61	@ 0x3d
 8008868:	78ba      	ldrb	r2, [r7, #2]
 800886a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b082      	sub	sp, #8
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f7f8 fb10 	bl	8000ea8 <HAL_Delay>
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	4603      	mov	r3, r0
 8008898:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800889e:	79fb      	ldrb	r3, [r7, #7]
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d817      	bhi.n	80088d4 <USBH_Get_USB_Status+0x44>
 80088a4:	a201      	add	r2, pc, #4	@ (adr r2, 80088ac <USBH_Get_USB_Status+0x1c>)
 80088a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088aa:	bf00      	nop
 80088ac:	080088bd 	.word	0x080088bd
 80088b0:	080088c3 	.word	0x080088c3
 80088b4:	080088c9 	.word	0x080088c9
 80088b8:	080088cf 	.word	0x080088cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	73fb      	strb	r3, [r7, #15]
    break;
 80088c0:	e00b      	b.n	80088da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80088c2:	2302      	movs	r3, #2
 80088c4:	73fb      	strb	r3, [r7, #15]
    break;
 80088c6:	e008      	b.n	80088da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
    break;
 80088cc:	e005      	b.n	80088da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80088ce:	2302      	movs	r3, #2
 80088d0:	73fb      	strb	r3, [r7, #15]
    break;
 80088d2:	e002      	b.n	80088da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80088d4:	2302      	movs	r3, #2
 80088d6:	73fb      	strb	r3, [r7, #15]
    break;
 80088d8:	bf00      	nop
  }
  return usb_status;
 80088da:	7bfb      	ldrb	r3, [r7, #15]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d102      	bne.n	8008902 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80088fc:	2300      	movs	r3, #0
 80088fe:	73fb      	strb	r3, [r7, #15]
 8008900:	e001      	b.n	8008906 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008902:	2301      	movs	r3, #1
 8008904:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	461a      	mov	r2, r3
 800890a:	2101      	movs	r1, #1
 800890c:	4803      	ldr	r0, [pc, #12]	@ (800891c <MX_DriverVbusFS+0x34>)
 800890e:	f7f8 fd9d 	bl	800144c <HAL_GPIO_WritePin>
}
 8008912:	bf00      	nop
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	40020800 	.word	0x40020800

08008920 <malloc>:
 8008920:	4b02      	ldr	r3, [pc, #8]	@ (800892c <malloc+0xc>)
 8008922:	4601      	mov	r1, r0
 8008924:	6818      	ldr	r0, [r3, #0]
 8008926:	f000 b82d 	b.w	8008984 <_malloc_r>
 800892a:	bf00      	nop
 800892c:	2000002c 	.word	0x2000002c

08008930 <free>:
 8008930:	4b02      	ldr	r3, [pc, #8]	@ (800893c <free+0xc>)
 8008932:	4601      	mov	r1, r0
 8008934:	6818      	ldr	r0, [r3, #0]
 8008936:	f000 b8f5 	b.w	8008b24 <_free_r>
 800893a:	bf00      	nop
 800893c:	2000002c 	.word	0x2000002c

08008940 <sbrk_aligned>:
 8008940:	b570      	push	{r4, r5, r6, lr}
 8008942:	4e0f      	ldr	r6, [pc, #60]	@ (8008980 <sbrk_aligned+0x40>)
 8008944:	460c      	mov	r4, r1
 8008946:	6831      	ldr	r1, [r6, #0]
 8008948:	4605      	mov	r5, r0
 800894a:	b911      	cbnz	r1, 8008952 <sbrk_aligned+0x12>
 800894c:	f000 f8ae 	bl	8008aac <_sbrk_r>
 8008950:	6030      	str	r0, [r6, #0]
 8008952:	4621      	mov	r1, r4
 8008954:	4628      	mov	r0, r5
 8008956:	f000 f8a9 	bl	8008aac <_sbrk_r>
 800895a:	1c43      	adds	r3, r0, #1
 800895c:	d103      	bne.n	8008966 <sbrk_aligned+0x26>
 800895e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008962:	4620      	mov	r0, r4
 8008964:	bd70      	pop	{r4, r5, r6, pc}
 8008966:	1cc4      	adds	r4, r0, #3
 8008968:	f024 0403 	bic.w	r4, r4, #3
 800896c:	42a0      	cmp	r0, r4
 800896e:	d0f8      	beq.n	8008962 <sbrk_aligned+0x22>
 8008970:	1a21      	subs	r1, r4, r0
 8008972:	4628      	mov	r0, r5
 8008974:	f000 f89a 	bl	8008aac <_sbrk_r>
 8008978:	3001      	adds	r0, #1
 800897a:	d1f2      	bne.n	8008962 <sbrk_aligned+0x22>
 800897c:	e7ef      	b.n	800895e <sbrk_aligned+0x1e>
 800897e:	bf00      	nop
 8008980:	20000954 	.word	0x20000954

08008984 <_malloc_r>:
 8008984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008988:	1ccd      	adds	r5, r1, #3
 800898a:	f025 0503 	bic.w	r5, r5, #3
 800898e:	3508      	adds	r5, #8
 8008990:	2d0c      	cmp	r5, #12
 8008992:	bf38      	it	cc
 8008994:	250c      	movcc	r5, #12
 8008996:	2d00      	cmp	r5, #0
 8008998:	4606      	mov	r6, r0
 800899a:	db01      	blt.n	80089a0 <_malloc_r+0x1c>
 800899c:	42a9      	cmp	r1, r5
 800899e:	d904      	bls.n	80089aa <_malloc_r+0x26>
 80089a0:	230c      	movs	r3, #12
 80089a2:	6033      	str	r3, [r6, #0]
 80089a4:	2000      	movs	r0, #0
 80089a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a80 <_malloc_r+0xfc>
 80089ae:	f000 f869 	bl	8008a84 <__malloc_lock>
 80089b2:	f8d8 3000 	ldr.w	r3, [r8]
 80089b6:	461c      	mov	r4, r3
 80089b8:	bb44      	cbnz	r4, 8008a0c <_malloc_r+0x88>
 80089ba:	4629      	mov	r1, r5
 80089bc:	4630      	mov	r0, r6
 80089be:	f7ff ffbf 	bl	8008940 <sbrk_aligned>
 80089c2:	1c43      	adds	r3, r0, #1
 80089c4:	4604      	mov	r4, r0
 80089c6:	d158      	bne.n	8008a7a <_malloc_r+0xf6>
 80089c8:	f8d8 4000 	ldr.w	r4, [r8]
 80089cc:	4627      	mov	r7, r4
 80089ce:	2f00      	cmp	r7, #0
 80089d0:	d143      	bne.n	8008a5a <_malloc_r+0xd6>
 80089d2:	2c00      	cmp	r4, #0
 80089d4:	d04b      	beq.n	8008a6e <_malloc_r+0xea>
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	4639      	mov	r1, r7
 80089da:	4630      	mov	r0, r6
 80089dc:	eb04 0903 	add.w	r9, r4, r3
 80089e0:	f000 f864 	bl	8008aac <_sbrk_r>
 80089e4:	4581      	cmp	r9, r0
 80089e6:	d142      	bne.n	8008a6e <_malloc_r+0xea>
 80089e8:	6821      	ldr	r1, [r4, #0]
 80089ea:	1a6d      	subs	r5, r5, r1
 80089ec:	4629      	mov	r1, r5
 80089ee:	4630      	mov	r0, r6
 80089f0:	f7ff ffa6 	bl	8008940 <sbrk_aligned>
 80089f4:	3001      	adds	r0, #1
 80089f6:	d03a      	beq.n	8008a6e <_malloc_r+0xea>
 80089f8:	6823      	ldr	r3, [r4, #0]
 80089fa:	442b      	add	r3, r5
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	bb62      	cbnz	r2, 8008a60 <_malloc_r+0xdc>
 8008a06:	f8c8 7000 	str.w	r7, [r8]
 8008a0a:	e00f      	b.n	8008a2c <_malloc_r+0xa8>
 8008a0c:	6822      	ldr	r2, [r4, #0]
 8008a0e:	1b52      	subs	r2, r2, r5
 8008a10:	d420      	bmi.n	8008a54 <_malloc_r+0xd0>
 8008a12:	2a0b      	cmp	r2, #11
 8008a14:	d917      	bls.n	8008a46 <_malloc_r+0xc2>
 8008a16:	1961      	adds	r1, r4, r5
 8008a18:	42a3      	cmp	r3, r4
 8008a1a:	6025      	str	r5, [r4, #0]
 8008a1c:	bf18      	it	ne
 8008a1e:	6059      	strne	r1, [r3, #4]
 8008a20:	6863      	ldr	r3, [r4, #4]
 8008a22:	bf08      	it	eq
 8008a24:	f8c8 1000 	streq.w	r1, [r8]
 8008a28:	5162      	str	r2, [r4, r5]
 8008a2a:	604b      	str	r3, [r1, #4]
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f000 f82f 	bl	8008a90 <__malloc_unlock>
 8008a32:	f104 000b 	add.w	r0, r4, #11
 8008a36:	1d23      	adds	r3, r4, #4
 8008a38:	f020 0007 	bic.w	r0, r0, #7
 8008a3c:	1ac2      	subs	r2, r0, r3
 8008a3e:	bf1c      	itt	ne
 8008a40:	1a1b      	subne	r3, r3, r0
 8008a42:	50a3      	strne	r3, [r4, r2]
 8008a44:	e7af      	b.n	80089a6 <_malloc_r+0x22>
 8008a46:	6862      	ldr	r2, [r4, #4]
 8008a48:	42a3      	cmp	r3, r4
 8008a4a:	bf0c      	ite	eq
 8008a4c:	f8c8 2000 	streq.w	r2, [r8]
 8008a50:	605a      	strne	r2, [r3, #4]
 8008a52:	e7eb      	b.n	8008a2c <_malloc_r+0xa8>
 8008a54:	4623      	mov	r3, r4
 8008a56:	6864      	ldr	r4, [r4, #4]
 8008a58:	e7ae      	b.n	80089b8 <_malloc_r+0x34>
 8008a5a:	463c      	mov	r4, r7
 8008a5c:	687f      	ldr	r7, [r7, #4]
 8008a5e:	e7b6      	b.n	80089ce <_malloc_r+0x4a>
 8008a60:	461a      	mov	r2, r3
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	42a3      	cmp	r3, r4
 8008a66:	d1fb      	bne.n	8008a60 <_malloc_r+0xdc>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	6053      	str	r3, [r2, #4]
 8008a6c:	e7de      	b.n	8008a2c <_malloc_r+0xa8>
 8008a6e:	230c      	movs	r3, #12
 8008a70:	6033      	str	r3, [r6, #0]
 8008a72:	4630      	mov	r0, r6
 8008a74:	f000 f80c 	bl	8008a90 <__malloc_unlock>
 8008a78:	e794      	b.n	80089a4 <_malloc_r+0x20>
 8008a7a:	6005      	str	r5, [r0, #0]
 8008a7c:	e7d6      	b.n	8008a2c <_malloc_r+0xa8>
 8008a7e:	bf00      	nop
 8008a80:	20000958 	.word	0x20000958

08008a84 <__malloc_lock>:
 8008a84:	4801      	ldr	r0, [pc, #4]	@ (8008a8c <__malloc_lock+0x8>)
 8008a86:	f000 b84b 	b.w	8008b20 <__retarget_lock_acquire_recursive>
 8008a8a:	bf00      	nop
 8008a8c:	20000a98 	.word	0x20000a98

08008a90 <__malloc_unlock>:
 8008a90:	4801      	ldr	r0, [pc, #4]	@ (8008a98 <__malloc_unlock+0x8>)
 8008a92:	f000 b846 	b.w	8008b22 <__retarget_lock_release_recursive>
 8008a96:	bf00      	nop
 8008a98:	20000a98 	.word	0x20000a98

08008a9c <memset>:
 8008a9c:	4402      	add	r2, r0
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d100      	bne.n	8008aa6 <memset+0xa>
 8008aa4:	4770      	bx	lr
 8008aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8008aaa:	e7f9      	b.n	8008aa0 <memset+0x4>

08008aac <_sbrk_r>:
 8008aac:	b538      	push	{r3, r4, r5, lr}
 8008aae:	4d06      	ldr	r5, [pc, #24]	@ (8008ac8 <_sbrk_r+0x1c>)
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4608      	mov	r0, r1
 8008ab6:	602b      	str	r3, [r5, #0]
 8008ab8:	f7f8 f912 	bl	8000ce0 <_sbrk>
 8008abc:	1c43      	adds	r3, r0, #1
 8008abe:	d102      	bne.n	8008ac6 <_sbrk_r+0x1a>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	b103      	cbz	r3, 8008ac6 <_sbrk_r+0x1a>
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	20000a94 	.word	0x20000a94

08008acc <__errno>:
 8008acc:	4b01      	ldr	r3, [pc, #4]	@ (8008ad4 <__errno+0x8>)
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	2000002c 	.word	0x2000002c

08008ad8 <__libc_init_array>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	4d0d      	ldr	r5, [pc, #52]	@ (8008b10 <__libc_init_array+0x38>)
 8008adc:	4c0d      	ldr	r4, [pc, #52]	@ (8008b14 <__libc_init_array+0x3c>)
 8008ade:	1b64      	subs	r4, r4, r5
 8008ae0:	10a4      	asrs	r4, r4, #2
 8008ae2:	2600      	movs	r6, #0
 8008ae4:	42a6      	cmp	r6, r4
 8008ae6:	d109      	bne.n	8008afc <__libc_init_array+0x24>
 8008ae8:	4d0b      	ldr	r5, [pc, #44]	@ (8008b18 <__libc_init_array+0x40>)
 8008aea:	4c0c      	ldr	r4, [pc, #48]	@ (8008b1c <__libc_init_array+0x44>)
 8008aec:	f000 f864 	bl	8008bb8 <_init>
 8008af0:	1b64      	subs	r4, r4, r5
 8008af2:	10a4      	asrs	r4, r4, #2
 8008af4:	2600      	movs	r6, #0
 8008af6:	42a6      	cmp	r6, r4
 8008af8:	d105      	bne.n	8008b06 <__libc_init_array+0x2e>
 8008afa:	bd70      	pop	{r4, r5, r6, pc}
 8008afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b00:	4798      	blx	r3
 8008b02:	3601      	adds	r6, #1
 8008b04:	e7ee      	b.n	8008ae4 <__libc_init_array+0xc>
 8008b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b0a:	4798      	blx	r3
 8008b0c:	3601      	adds	r6, #1
 8008b0e:	e7f2      	b.n	8008af6 <__libc_init_array+0x1e>
 8008b10:	08008bf4 	.word	0x08008bf4
 8008b14:	08008bf4 	.word	0x08008bf4
 8008b18:	08008bf4 	.word	0x08008bf4
 8008b1c:	08008bf8 	.word	0x08008bf8

08008b20 <__retarget_lock_acquire_recursive>:
 8008b20:	4770      	bx	lr

08008b22 <__retarget_lock_release_recursive>:
 8008b22:	4770      	bx	lr

08008b24 <_free_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4605      	mov	r5, r0
 8008b28:	2900      	cmp	r1, #0
 8008b2a:	d041      	beq.n	8008bb0 <_free_r+0x8c>
 8008b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b30:	1f0c      	subs	r4, r1, #4
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	bfb8      	it	lt
 8008b36:	18e4      	addlt	r4, r4, r3
 8008b38:	f7ff ffa4 	bl	8008a84 <__malloc_lock>
 8008b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8008bb4 <_free_r+0x90>)
 8008b3e:	6813      	ldr	r3, [r2, #0]
 8008b40:	b933      	cbnz	r3, 8008b50 <_free_r+0x2c>
 8008b42:	6063      	str	r3, [r4, #4]
 8008b44:	6014      	str	r4, [r2, #0]
 8008b46:	4628      	mov	r0, r5
 8008b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b4c:	f7ff bfa0 	b.w	8008a90 <__malloc_unlock>
 8008b50:	42a3      	cmp	r3, r4
 8008b52:	d908      	bls.n	8008b66 <_free_r+0x42>
 8008b54:	6820      	ldr	r0, [r4, #0]
 8008b56:	1821      	adds	r1, r4, r0
 8008b58:	428b      	cmp	r3, r1
 8008b5a:	bf01      	itttt	eq
 8008b5c:	6819      	ldreq	r1, [r3, #0]
 8008b5e:	685b      	ldreq	r3, [r3, #4]
 8008b60:	1809      	addeq	r1, r1, r0
 8008b62:	6021      	streq	r1, [r4, #0]
 8008b64:	e7ed      	b.n	8008b42 <_free_r+0x1e>
 8008b66:	461a      	mov	r2, r3
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	b10b      	cbz	r3, 8008b70 <_free_r+0x4c>
 8008b6c:	42a3      	cmp	r3, r4
 8008b6e:	d9fa      	bls.n	8008b66 <_free_r+0x42>
 8008b70:	6811      	ldr	r1, [r2, #0]
 8008b72:	1850      	adds	r0, r2, r1
 8008b74:	42a0      	cmp	r0, r4
 8008b76:	d10b      	bne.n	8008b90 <_free_r+0x6c>
 8008b78:	6820      	ldr	r0, [r4, #0]
 8008b7a:	4401      	add	r1, r0
 8008b7c:	1850      	adds	r0, r2, r1
 8008b7e:	4283      	cmp	r3, r0
 8008b80:	6011      	str	r1, [r2, #0]
 8008b82:	d1e0      	bne.n	8008b46 <_free_r+0x22>
 8008b84:	6818      	ldr	r0, [r3, #0]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	6053      	str	r3, [r2, #4]
 8008b8a:	4408      	add	r0, r1
 8008b8c:	6010      	str	r0, [r2, #0]
 8008b8e:	e7da      	b.n	8008b46 <_free_r+0x22>
 8008b90:	d902      	bls.n	8008b98 <_free_r+0x74>
 8008b92:	230c      	movs	r3, #12
 8008b94:	602b      	str	r3, [r5, #0]
 8008b96:	e7d6      	b.n	8008b46 <_free_r+0x22>
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	1821      	adds	r1, r4, r0
 8008b9c:	428b      	cmp	r3, r1
 8008b9e:	bf04      	itt	eq
 8008ba0:	6819      	ldreq	r1, [r3, #0]
 8008ba2:	685b      	ldreq	r3, [r3, #4]
 8008ba4:	6063      	str	r3, [r4, #4]
 8008ba6:	bf04      	itt	eq
 8008ba8:	1809      	addeq	r1, r1, r0
 8008baa:	6021      	streq	r1, [r4, #0]
 8008bac:	6054      	str	r4, [r2, #4]
 8008bae:	e7ca      	b.n	8008b46 <_free_r+0x22>
 8008bb0:	bd38      	pop	{r3, r4, r5, pc}
 8008bb2:	bf00      	nop
 8008bb4:	20000958 	.word	0x20000958

08008bb8 <_init>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	bf00      	nop
 8008bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bbe:	bc08      	pop	{r3}
 8008bc0:	469e      	mov	lr, r3
 8008bc2:	4770      	bx	lr

08008bc4 <_fini>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr
