
Lab2-LEDs-Buttons-Interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d00  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008e88  08008e88  00009e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ea4  08008ea4  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008ea4  08008ea4  00009ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008eac  08008eac  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eac  08008eac  00009eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008eb0  08008eb0  00009eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008eb4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a20  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a9c  20000a9c  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d20  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038cd  00000000  00000000  0001edcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001170  00000000  00000000  000226a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d47  00000000  00000000  00023810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002348f  00000000  00000000  00024557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016c90  00000000  00000000  000479e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbb2a  00000000  00000000  0005e676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a1a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b84  00000000  00000000  0012a1e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0012ed68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e70 	.word	0x08008e70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008e70 	.word	0x08008e70

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <led_mode_0>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void led_mode_0() {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004fe:	481a      	ldr	r0, [pc, #104]	@ (8000568 <led_mode_0+0x74>)
 8000500:	f001 f8f6 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800050a:	4817      	ldr	r0, [pc, #92]	@ (8000568 <led_mode_0+0x74>)
 800050c:	f001 f8f0 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000516:	4814      	ldr	r0, [pc, #80]	@ (8000568 <led_mode_0+0x74>)
 8000518:	f001 f8ea 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000522:	4811      	ldr	r0, [pc, #68]	@ (8000568 <led_mode_0+0x74>)
 8000524:	f001 f8e4 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 8000528:	20c8      	movs	r0, #200	@ 0xc8
 800052a:	f000 fe0f 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000534:	480c      	ldr	r0, [pc, #48]	@ (8000568 <led_mode_0+0x74>)
 8000536:	f001 f8db 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000540:	4809      	ldr	r0, [pc, #36]	@ (8000568 <led_mode_0+0x74>)
 8000542:	f001 f8d5 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800054c:	4806      	ldr	r0, [pc, #24]	@ (8000568 <led_mode_0+0x74>)
 800054e:	f001 f8cf 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <led_mode_0+0x74>)
 800055a:	f001 f8c9 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 800055e:	20c8      	movs	r0, #200	@ 0xc8
 8000560:	f000 fdf4 	bl	800114c <HAL_Delay>
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40020c00 	.word	0x40020c00

0800056c <led_mode_1>:

void led_mode_1() {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000576:	4828      	ldr	r0, [pc, #160]	@ (8000618 <led_mode_1+0xac>)
 8000578:	f001 f8ba 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 800057c:	20c8      	movs	r0, #200	@ 0xc8
 800057e:	f000 fde5 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_SET);
 8000582:	2201      	movs	r2, #1
 8000584:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000588:	4823      	ldr	r0, [pc, #140]	@ (8000618 <led_mode_1+0xac>)
 800058a:	f001 f8b1 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 800058e:	20c8      	movs	r0, #200	@ 0xc8
 8000590:	f000 fddc 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800059a:	481f      	ldr	r0, [pc, #124]	@ (8000618 <led_mode_1+0xac>)
 800059c:	f001 f8a8 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 80005a0:	20c8      	movs	r0, #200	@ 0xc8
 80005a2:	f000 fdd3 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005ac:	481a      	ldr	r0, [pc, #104]	@ (8000618 <led_mode_1+0xac>)
 80005ae:	f001 f89f 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 80005b2:	20c8      	movs	r0, #200	@ 0xc8
 80005b4:	f000 fdca 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005be:	4816      	ldr	r0, [pc, #88]	@ (8000618 <led_mode_1+0xac>)
 80005c0:	f001 f896 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 80005c4:	20c8      	movs	r0, #200	@ 0xc8
 80005c6:	f000 fdc1 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005d0:	4811      	ldr	r0, [pc, #68]	@ (8000618 <led_mode_1+0xac>)
 80005d2:	f001 f88d 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 80005d6:	20c8      	movs	r0, #200	@ 0xc8
 80005d8:	f000 fdb8 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005e2:	480d      	ldr	r0, [pc, #52]	@ (8000618 <led_mode_1+0xac>)
 80005e4:	f001 f884 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 80005e8:	20c8      	movs	r0, #200	@ 0xc8
 80005ea:	f000 fdaf 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005f4:	4808      	ldr	r0, [pc, #32]	@ (8000618 <led_mode_1+0xac>)
 80005f6:	f001 f87b 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 80005fa:	20c8      	movs	r0, #200	@ 0xc8
 80005fc:	f000 fda6 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000606:	4804      	ldr	r0, [pc, #16]	@ (8000618 <led_mode_1+0xac>)
 8000608:	f001 f872 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 800060c:	20c8      	movs	r0, #200	@ 0xc8
 800060e:	f000 fd9d 	bl	800114c <HAL_Delay>
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40020c00 	.word	0x40020c00

0800061c <led_mode_2>:

void led_mode_2() {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000626:	4823      	ldr	r0, [pc, #140]	@ (80006b4 <led_mode_2+0x98>)
 8000628:	f001 f862 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 800062c:	20c8      	movs	r0, #200	@ 0xc8
 800062e:	f000 fd8d 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000638:	481e      	ldr	r0, [pc, #120]	@ (80006b4 <led_mode_2+0x98>)
 800063a:	f001 f859 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 800063e:	20c8      	movs	r0, #200	@ 0xc8
 8000640:	f000 fd84 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800064a:	481a      	ldr	r0, [pc, #104]	@ (80006b4 <led_mode_2+0x98>)
 800064c:	f001 f850 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 8000650:	20c8      	movs	r0, #200	@ 0xc8
 8000652:	f000 fd7b 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800065c:	4815      	ldr	r0, [pc, #84]	@ (80006b4 <led_mode_2+0x98>)
 800065e:	f001 f847 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 8000662:	20c8      	movs	r0, #200	@ 0xc8
 8000664:	f000 fd72 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800066e:	4811      	ldr	r0, [pc, #68]	@ (80006b4 <led_mode_2+0x98>)
 8000670:	f001 f83e 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 8000674:	20c8      	movs	r0, #200	@ 0xc8
 8000676:	f000 fd69 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000680:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <led_mode_2+0x98>)
 8000682:	f001 f835 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 8000686:	20c8      	movs	r0, #200	@ 0xc8
 8000688:	f000 fd60 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000692:	4808      	ldr	r0, [pc, #32]	@ (80006b4 <led_mode_2+0x98>)
 8000694:	f001 f82c 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 8000698:	20c8      	movs	r0, #200	@ 0xc8
 800069a:	f000 fd57 	bl	800114c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a4:	4803      	ldr	r0, [pc, #12]	@ (80006b4 <led_mode_2+0x98>)
 80006a6:	f001 f823 	bl	80016f0 <HAL_GPIO_WritePin>
	HAL_Delay(FQ_MS);
 80006aa:	20c8      	movs	r0, #200	@ 0xc8
 80006ac:	f000 fd4e 	bl	800114c <HAL_Delay>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40020c00 	.word	0x40020c00

080006b8 <led_mode_3>:

void led_mode_3() {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 3; i++) {
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	e014      	b.n	80006ee <led_mode_3+0x36>
		HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006ca:	4841      	ldr	r0, [pc, #260]	@ (80007d0 <led_mode_3+0x118>)
 80006cc:	f001 f810 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_Delay(FQ_MS/3);
 80006d0:	2042      	movs	r0, #66	@ 0x42
 80006d2:	f000 fd3b 	bl	800114c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006dc:	483c      	ldr	r0, [pc, #240]	@ (80007d0 <led_mode_3+0x118>)
 80006de:	f001 f807 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_Delay(FQ_MS/3);
 80006e2:	2042      	movs	r0, #66	@ 0x42
 80006e4:	f000 fd32 	bl	800114c <HAL_Delay>
	for (uint32_t i = 0; i < 3; i++) {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3301      	adds	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d9e7      	bls.n	80006c4 <led_mode_3+0xc>
	}
	HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006fa:	4835      	ldr	r0, [pc, #212]	@ (80007d0 <led_mode_3+0x118>)
 80006fc:	f000 fff8 	bl	80016f0 <HAL_GPIO_WritePin>
	for (uint32_t i = 0; i < 3; i++) {
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	e014      	b.n	8000730 <led_mode_3+0x78>
		HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800070c:	4830      	ldr	r0, [pc, #192]	@ (80007d0 <led_mode_3+0x118>)
 800070e:	f000 ffef 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_Delay(FQ_MS/3);
 8000712:	2042      	movs	r0, #66	@ 0x42
 8000714:	f000 fd1a 	bl	800114c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800071e:	482c      	ldr	r0, [pc, #176]	@ (80007d0 <led_mode_3+0x118>)
 8000720:	f000 ffe6 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_Delay(FQ_MS/3);
 8000724:	2042      	movs	r0, #66	@ 0x42
 8000726:	f000 fd11 	bl	800114c <HAL_Delay>
	for (uint32_t i = 0; i < 3; i++) {
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	3301      	adds	r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	2b02      	cmp	r3, #2
 8000734:	d9e7      	bls.n	8000706 <led_mode_3+0x4e>
	}
	HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800073c:	4824      	ldr	r0, [pc, #144]	@ (80007d0 <led_mode_3+0x118>)
 800073e:	f000 ffd7 	bl	80016f0 <HAL_GPIO_WritePin>
	for (uint32_t i = 0; i < 3; i++) {
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	e014      	b.n	8000772 <led_mode_3+0xba>
		HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800074e:	4820      	ldr	r0, [pc, #128]	@ (80007d0 <led_mode_3+0x118>)
 8000750:	f000 ffce 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_Delay(FQ_MS/3);
 8000754:	2042      	movs	r0, #66	@ 0x42
 8000756:	f000 fcf9 	bl	800114c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000760:	481b      	ldr	r0, [pc, #108]	@ (80007d0 <led_mode_3+0x118>)
 8000762:	f000 ffc5 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_Delay(FQ_MS/3);
 8000766:	2042      	movs	r0, #66	@ 0x42
 8000768:	f000 fcf0 	bl	800114c <HAL_Delay>
	for (uint32_t i = 0; i < 3; i++) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3301      	adds	r3, #1
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d9e7      	bls.n	8000748 <led_mode_3+0x90>
	}
	HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800077e:	4814      	ldr	r0, [pc, #80]	@ (80007d0 <led_mode_3+0x118>)
 8000780:	f000 ffb6 	bl	80016f0 <HAL_GPIO_WritePin>
	for (uint32_t i = 0; i < 3; i++) {
 8000784:	2300      	movs	r3, #0
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	e014      	b.n	80007b4 <led_mode_3+0xfc>
		HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000790:	480f      	ldr	r0, [pc, #60]	@ (80007d0 <led_mode_3+0x118>)
 8000792:	f000 ffad 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_Delay(FQ_MS/3);
 8000796:	2042      	movs	r0, #66	@ 0x42
 8000798:	f000 fcd8 	bl	800114c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007a2:	480b      	ldr	r0, [pc, #44]	@ (80007d0 <led_mode_3+0x118>)
 80007a4:	f000 ffa4 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_Delay(FQ_MS/3);
 80007a8:	2042      	movs	r0, #66	@ 0x42
 80007aa:	f000 fccf 	bl	800114c <HAL_Delay>
	for (uint32_t i = 0; i < 3; i++) {
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d9e7      	bls.n	800078a <led_mode_3+0xd2>
	}
	HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <led_mode_3+0x118>)
 80007c2:	f000 ff95 	bl	80016f0 <HAL_GPIO_WritePin>
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020c00 	.word	0x40020c00

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d8:	f000 fc46 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f840 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f000 f93c 	bl	8000a5c <MX_GPIO_Init>
  MX_I2C1_Init();
 80007e4:	f000 f8a6 	bl	8000934 <MX_I2C1_Init>
  MX_I2S3_Init();
 80007e8:	f000 f8d2 	bl	8000990 <MX_I2S3_Init>
  MX_SPI1_Init();
 80007ec:	f000 f900 	bl	80009f0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80007f0:	f007 fefa 	bl	80085e8 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007fa:	4817      	ldr	r0, [pc, #92]	@ (8000858 <main+0x84>)
 80007fc:	f000 ff78 	bl	80016f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000806:	4814      	ldr	r0, [pc, #80]	@ (8000858 <main+0x84>)
 8000808:	f000 ff72 	bl	80016f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000812:	4811      	ldr	r0, [pc, #68]	@ (8000858 <main+0x84>)
 8000814:	f000 ff6c 	bl	80016f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800081e:	480e      	ldr	r0, [pc, #56]	@ (8000858 <main+0x84>)
 8000820:	f000 ff66 	bl	80016f0 <HAL_GPIO_WritePin>

	  if (led_mode == 0) led_mode_0();
 8000824:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <main+0x88>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d102      	bne.n	8000832 <main+0x5e>
 800082c:	f7ff fe62 	bl	80004f4 <led_mode_0>
 8000830:	e00f      	b.n	8000852 <main+0x7e>
	  else if (led_mode == 1) led_mode_1();
 8000832:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <main+0x88>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d102      	bne.n	8000840 <main+0x6c>
 800083a:	f7ff fe97 	bl	800056c <led_mode_1>
 800083e:	e008      	b.n	8000852 <main+0x7e>
	  else if (led_mode == 2) led_mode_2();
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <main+0x88>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d102      	bne.n	800084e <main+0x7a>
 8000848:	f7ff fee8 	bl	800061c <led_mode_2>
 800084c:	e001      	b.n	8000852 <main+0x7e>
	  else led_mode_3();
 800084e:	f7ff ff33 	bl	80006b8 <led_mode_3>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000852:	f007 feef 	bl	8008634 <MX_USB_HOST_Process>
	  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000856:	e7cd      	b.n	80007f4 <main+0x20>
 8000858:	40020c00 	.word	0x40020c00
 800085c:	2000018c 	.word	0x2000018c

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b094      	sub	sp, #80	@ 0x50
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	2230      	movs	r2, #48	@ 0x30
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f008 fa70 	bl	8008d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	4b28      	ldr	r3, [pc, #160]	@ (800092c <SystemClock_Config+0xcc>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	4a27      	ldr	r2, [pc, #156]	@ (800092c <SystemClock_Config+0xcc>)
 800088e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000892:	6413      	str	r3, [r2, #64]	@ 0x40
 8000894:	4b25      	ldr	r3, [pc, #148]	@ (800092c <SystemClock_Config+0xcc>)
 8000896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a0:	2300      	movs	r3, #0
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <SystemClock_Config+0xd0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a21      	ldr	r2, [pc, #132]	@ (8000930 <SystemClock_Config+0xd0>)
 80008aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <SystemClock_Config+0xd0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008d0:	2308      	movs	r3, #8
 80008d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008d4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008da:	2302      	movs	r3, #2
 80008dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008de:	2307      	movs	r3, #7
 80008e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	4618      	mov	r0, r3
 80008e8:	f003 fe34 	bl	8004554 <HAL_RCC_OscConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008f2:	f000 f9b9 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	230f      	movs	r3, #15
 80008f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	2302      	movs	r3, #2
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000902:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000906:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2105      	movs	r1, #5
 8000914:	4618      	mov	r0, r3
 8000916:	f004 f895 	bl	8004a44 <HAL_RCC_ClockConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000920:	f000 f9a2 	bl	8000c68 <Error_Handler>
  }
}
 8000924:	bf00      	nop
 8000926:	3750      	adds	r7, #80	@ 0x50
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40007000 	.word	0x40007000

08000934 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <MX_I2C1_Init+0x50>)
 800093a:	4a13      	ldr	r2, [pc, #76]	@ (8000988 <MX_I2C1_Init+0x54>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800093e:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000940:	4a12      	ldr	r2, [pc, #72]	@ (800098c <MX_I2C1_Init+0x58>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000944:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_I2C1_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000950:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000956:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <MX_I2C1_Init+0x50>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_I2C1_Init+0x50>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_I2C1_Init+0x50>)
 8000972:	f003 f80b 	bl	800398c <HAL_I2C_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800097c:	f000 f974 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000098 	.word	0x20000098
 8000988:	40005400 	.word	0x40005400
 800098c:	000186a0 	.word	0x000186a0

08000990 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000994:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <MX_I2S3_Init+0x54>)
 8000996:	4a14      	ldr	r2, [pc, #80]	@ (80009e8 <MX_I2S3_Init+0x58>)
 8000998:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800099a:	4b12      	ldr	r3, [pc, #72]	@ (80009e4 <MX_I2S3_Init+0x54>)
 800099c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <MX_I2S3_Init+0x54>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009a8:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <MX_I2S3_Init+0x54>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <MX_I2S3_Init+0x54>)
 80009b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <MX_I2S3_Init+0x54>)
 80009b8:	4a0c      	ldr	r2, [pc, #48]	@ (80009ec <MX_I2S3_Init+0x5c>)
 80009ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_I2S3_Init+0x54>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <MX_I2S3_Init+0x54>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_I2S3_Init+0x54>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_I2S3_Init+0x54>)
 80009d0:	f003 f920 	bl	8003c14 <HAL_I2S_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009da:	f000 f945 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000ec 	.word	0x200000ec
 80009e8:	40003c00 	.word	0x40003c00
 80009ec:	00017700 	.word	0x00017700

080009f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <MX_SPI1_Init+0x64>)
 80009f6:	4a18      	ldr	r2, [pc, #96]	@ (8000a58 <MX_SPI1_Init+0x68>)
 80009f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <MX_SPI1_Init+0x64>)
 80009fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a02:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <MX_SPI1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <MX_SPI1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <MX_SPI1_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <MX_SPI1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_SPI1_Init+0x64>)
 8000a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <MX_SPI1_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	@ (8000a54 <MX_SPI1_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <MX_SPI1_Init+0x64>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a34:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <MX_SPI1_Init+0x64>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <MX_SPI1_Init+0x64>)
 8000a3c:	220a      	movs	r2, #10
 8000a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	@ (8000a54 <MX_SPI1_Init+0x64>)
 8000a42:	f004 fb4d 	bl	80050e0 <HAL_SPI_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a4c:	f000 f90c 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000134 	.word	0x20000134
 8000a58:	40013000 	.word	0x40013000

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	@ 0x30
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
 8000a76:	4b76      	ldr	r3, [pc, #472]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	4a75      	ldr	r2, [pc, #468]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000a7c:	f043 0310 	orr.w	r3, r3, #16
 8000a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a82:	4b73      	ldr	r3, [pc, #460]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	61bb      	str	r3, [r7, #24]
 8000a8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	4b6f      	ldr	r3, [pc, #444]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a6e      	ldr	r2, [pc, #440]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b6c      	ldr	r3, [pc, #432]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0304 	and.w	r3, r3, #4
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b68      	ldr	r3, [pc, #416]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a67      	ldr	r2, [pc, #412]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b65      	ldr	r3, [pc, #404]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b61      	ldr	r3, [pc, #388]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a60      	ldr	r2, [pc, #384]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b5e      	ldr	r3, [pc, #376]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	4b5a      	ldr	r3, [pc, #360]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a59      	ldr	r2, [pc, #356]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b57      	ldr	r3, [pc, #348]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b53      	ldr	r3, [pc, #332]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a52      	ldr	r2, [pc, #328]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b50      	ldr	r3, [pc, #320]	@ (8000c50 <MX_GPIO_Init+0x1f4>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0308 	and.w	r3, r3, #8
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2108      	movs	r1, #8
 8000b1e:	484d      	ldr	r0, [pc, #308]	@ (8000c54 <MX_GPIO_Init+0x1f8>)
 8000b20:	f000 fde6 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2101      	movs	r1, #1
 8000b28:	484b      	ldr	r0, [pc, #300]	@ (8000c58 <MX_GPIO_Init+0x1fc>)
 8000b2a:	f000 fde1 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000b34:	4849      	ldr	r0, [pc, #292]	@ (8000c5c <MX_GPIO_Init+0x200>)
 8000b36:	f000 fddb 	bl	80016f0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4840      	ldr	r0, [pc, #256]	@ (8000c54 <MX_GPIO_Init+0x1f8>)
 8000b52:	f000 fc31 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	483a      	ldr	r0, [pc, #232]	@ (8000c58 <MX_GPIO_Init+0x1fc>)
 8000b6e:	f000 fc23 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b72:	2308      	movs	r3, #8
 8000b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b82:	2305      	movs	r3, #5
 8000b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4832      	ldr	r0, [pc, #200]	@ (8000c58 <MX_GPIO_Init+0x1fc>)
 8000b8e:	f000 fc13 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b96:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	482e      	ldr	r0, [pc, #184]	@ (8000c60 <MX_GPIO_Init+0x204>)
 8000ba8:	f000 fc06 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bac:	2304      	movs	r3, #4
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4829      	ldr	r0, [pc, #164]	@ (8000c64 <MX_GPIO_Init+0x208>)
 8000bc0:	f000 fbfa 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4820      	ldr	r0, [pc, #128]	@ (8000c64 <MX_GPIO_Init+0x208>)
 8000be2:	f000 fbe9 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000be6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000bea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4817      	ldr	r0, [pc, #92]	@ (8000c5c <MX_GPIO_Init+0x200>)
 8000c00:	f000 fbda 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c04:	2320      	movs	r3, #32
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	4811      	ldr	r0, [pc, #68]	@ (8000c5c <MX_GPIO_Init+0x200>)
 8000c18:	f000 fbce 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c20:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <MX_GPIO_Init+0x1f8>)
 8000c32:	f000 fbc1 	bl	80013b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2006      	movs	r0, #6
 8000c3c:	f000 fb85 	bl	800134a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c40:	2006      	movs	r0, #6
 8000c42:	f000 fb9e 	bl	8001382 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c46:	bf00      	nop
 8000c48:	3730      	adds	r7, #48	@ 0x30
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	40020000 	.word	0x40020000
 8000c64:	40020400 	.word	0x40020400

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <Error_Handler+0x8>

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b09      	ldr	r3, [pc, #36]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	4a08      	ldr	r2, [pc, #32]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cb2:	2007      	movs	r0, #7
 8000cb4:	f000 fb3e 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	@ 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a19      	ldr	r2, [pc, #100]	@ (8000d48 <HAL_I2C_MspInit+0x84>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d12c      	bne.n	8000d40 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <HAL_I2C_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a17      	ldr	r2, [pc, #92]	@ (8000d4c <HAL_I2C_MspInit+0x88>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <HAL_I2C_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d02:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d08:	2312      	movs	r3, #18
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d14:	2304      	movs	r3, #4
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <HAL_I2C_MspInit+0x8c>)
 8000d20:	f000 fb4a 	bl	80013b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <HAL_I2C_MspInit+0x88>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <HAL_I2C_MspInit+0x88>)
 8000d2e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d32:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <HAL_I2C_MspInit+0x88>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	@ 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020400 	.word	0x40020400

08000d54 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	@ 0x38
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a31      	ldr	r2, [pc, #196]	@ (8000e44 <HAL_I2S_MspInit+0xf0>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d15a      	bne.n	8000e3a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d84:	2301      	movs	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d88:	23c0      	movs	r3, #192	@ 0xc0
 8000d8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4618      	mov	r0, r3
 8000d96:	f004 f861 	bl	8004e5c <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000da0:	f7ff ff62 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	4b27      	ldr	r3, [pc, #156]	@ (8000e48 <HAL_I2S_MspInit+0xf4>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	4a26      	ldr	r2, [pc, #152]	@ (8000e48 <HAL_I2S_MspInit+0xf4>)
 8000dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000db2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db4:	4b24      	ldr	r3, [pc, #144]	@ (8000e48 <HAL_I2S_MspInit+0xf4>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <HAL_I2S_MspInit+0xf4>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8000e48 <HAL_I2S_MspInit+0xf4>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <HAL_I2S_MspInit+0xf4>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <HAL_I2S_MspInit+0xf4>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de4:	4a18      	ldr	r2, [pc, #96]	@ (8000e48 <HAL_I2S_MspInit+0xf4>)
 8000de6:	f043 0304 	orr.w	r3, r3, #4
 8000dea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <HAL_I2S_MspInit+0xf4>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df0:	f003 0304 	and.w	r3, r3, #4
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e08:	2306      	movs	r3, #6
 8000e0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e10:	4619      	mov	r1, r3
 8000e12:	480e      	ldr	r0, [pc, #56]	@ (8000e4c <HAL_I2S_MspInit+0xf8>)
 8000e14:	f000 fad0 	bl	80013b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e18:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	4806      	ldr	r0, [pc, #24]	@ (8000e50 <HAL_I2S_MspInit+0xfc>)
 8000e36:	f000 fabf 	bl	80013b8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3738      	adds	r7, #56	@ 0x38
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40003c00 	.word	0x40003c00
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020800 	.word	0x40020800

08000e54 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a19      	ldr	r2, [pc, #100]	@ (8000ed8 <HAL_SPI_MspInit+0x84>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d12b      	bne.n	8000ece <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <HAL_SPI_MspInit+0x88>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7e:	4a17      	ldr	r2, [pc, #92]	@ (8000edc <HAL_SPI_MspInit+0x88>)
 8000e80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_SPI_MspInit+0x88>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <HAL_SPI_MspInit+0x88>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <HAL_SPI_MspInit+0x88>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <HAL_SPI_MspInit+0x88>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000eae:	23e0      	movs	r3, #224	@ 0xe0
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <HAL_SPI_MspInit+0x8c>)
 8000eca:	f000 fa75 	bl	80013b8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	@ 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40013000 	.word	0x40013000
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <NMI_Handler+0x4>

08000eec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3a:	f000 f8e7 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	led_mode = (led_mode + 1) % 4;
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <EXTI0_IRQHandler+0x28>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	425a      	negs	r2, r3
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	f002 0203 	and.w	r2, r2, #3
 8000f58:	bf58      	it	pl
 8000f5a:	4253      	negpl	r3, r2
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <EXTI0_IRQHandler+0x28>)
 8000f60:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f000 fbde 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000018c 	.word	0x2000018c

08000f70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f74:	4802      	ldr	r0, [pc, #8]	@ (8000f80 <OTG_FS_IRQHandler+0x10>)
 8000f76:	f000 feb5 	bl	8001ce4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000574 	.word	0x20000574

08000f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f8c:	4a14      	ldr	r2, [pc, #80]	@ (8000fe0 <_sbrk+0x5c>)
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <_sbrk+0x60>)
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <_sbrk+0x64>)
 8000fa2:	4a12      	ldr	r2, [pc, #72]	@ (8000fec <_sbrk+0x68>)
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <_sbrk+0x64>)
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d207      	bcs.n	8000fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb4:	f007 fee6 	bl	8008d84 <__errno>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20020000 	.word	0x20020000
 8000fe4:	00000400 	.word	0x00000400
 8000fe8:	20000190 	.word	0x20000190
 8000fec:	20000aa0 	.word	0x20000aa0

08000ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800104c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001018:	f7ff ffea 	bl	8000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	@ (8001054 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	@ (8001060 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001042:	f007 fea5 	bl	8008d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fbc5 	bl	80007d4 <main>
  bx  lr    
 800104a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800104c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001058:	08008eb4 	.word	0x08008eb4
  ldr r2, =_sbss
 800105c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001060:	20000a9c 	.word	0x20000a9c

08001064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC_IRQHandler>
	...

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <HAL_Init+0x40>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001078:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <HAL_Init+0x40>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	@ (80010a8 <HAL_Init+0x40>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800108e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f94f 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	2000      	movs	r0, #0
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fdea 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023c00 	.word	0x40023c00

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f967 	bl	800139e <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e8:	f000 f92f 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	@ (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	@ (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	20000194 	.word	0x20000194

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000194 	.word	0x20000194

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	@ (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	@ (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	@ (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	@ 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	@ (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff29 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff3e 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff8e 	bl	8001288 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff31 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffa2 	bl	80012f0 <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	@ 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	e16b      	b.n	80016ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f040 815a 	bne.w	80016a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d005      	beq.n	800140a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	2b02      	cmp	r3, #2
 8001408:	d130      	bne.n	800146c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001440:	2201      	movs	r2, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 0201 	and.w	r2, r3, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b03      	cmp	r3, #3
 8001476:	d017      	beq.n	80014a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d123      	bne.n	80014fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	69b9      	ldr	r1, [r7, #24]
 80014f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0203 	and.w	r2, r3, #3
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80b4 	beq.w	80016a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b60      	ldr	r3, [pc, #384]	@ (80016c4 <HAL_GPIO_Init+0x30c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	4a5f      	ldr	r2, [pc, #380]	@ (80016c4 <HAL_GPIO_Init+0x30c>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154c:	6453      	str	r3, [r2, #68]	@ 0x44
 800154e:	4b5d      	ldr	r3, [pc, #372]	@ (80016c4 <HAL_GPIO_Init+0x30c>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155a:	4a5b      	ldr	r2, [pc, #364]	@ (80016c8 <HAL_GPIO_Init+0x310>)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a52      	ldr	r2, [pc, #328]	@ (80016cc <HAL_GPIO_Init+0x314>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d02b      	beq.n	80015de <HAL_GPIO_Init+0x226>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a51      	ldr	r2, [pc, #324]	@ (80016d0 <HAL_GPIO_Init+0x318>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d025      	beq.n	80015da <HAL_GPIO_Init+0x222>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a50      	ldr	r2, [pc, #320]	@ (80016d4 <HAL_GPIO_Init+0x31c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d01f      	beq.n	80015d6 <HAL_GPIO_Init+0x21e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4f      	ldr	r2, [pc, #316]	@ (80016d8 <HAL_GPIO_Init+0x320>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0x21a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4e      	ldr	r2, [pc, #312]	@ (80016dc <HAL_GPIO_Init+0x324>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x216>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4d      	ldr	r2, [pc, #308]	@ (80016e0 <HAL_GPIO_Init+0x328>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x212>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4c      	ldr	r2, [pc, #304]	@ (80016e4 <HAL_GPIO_Init+0x32c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x20e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4b      	ldr	r2, [pc, #300]	@ (80016e8 <HAL_GPIO_Init+0x330>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x20a>
 80015be:	2307      	movs	r3, #7
 80015c0:	e00e      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015c2:	2308      	movs	r3, #8
 80015c4:	e00c      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015c6:	2306      	movs	r3, #6
 80015c8:	e00a      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015ca:	2305      	movs	r3, #5
 80015cc:	e008      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015ce:	2304      	movs	r3, #4
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015d2:	2303      	movs	r3, #3
 80015d4:	e004      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015de:	2300      	movs	r3, #0
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	f002 0203 	and.w	r2, r2, #3
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	4093      	lsls	r3, r2
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f0:	4935      	ldr	r1, [pc, #212]	@ (80016c8 <HAL_GPIO_Init+0x310>)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fe:	4b3b      	ldr	r3, [pc, #236]	@ (80016ec <HAL_GPIO_Init+0x334>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001622:	4a32      	ldr	r2, [pc, #200]	@ (80016ec <HAL_GPIO_Init+0x334>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001628:	4b30      	ldr	r3, [pc, #192]	@ (80016ec <HAL_GPIO_Init+0x334>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800164c:	4a27      	ldr	r2, [pc, #156]	@ (80016ec <HAL_GPIO_Init+0x334>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001652:	4b26      	ldr	r3, [pc, #152]	@ (80016ec <HAL_GPIO_Init+0x334>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001676:	4a1d      	ldr	r2, [pc, #116]	@ (80016ec <HAL_GPIO_Init+0x334>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800167c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <HAL_GPIO_Init+0x334>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a0:	4a12      	ldr	r2, [pc, #72]	@ (80016ec <HAL_GPIO_Init+0x334>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	f67f ae90 	bls.w	80013d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3724      	adds	r7, #36	@ 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40013800 	.word	0x40013800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40020800 	.word	0x40020800
 80016d8:	40020c00 	.word	0x40020c00
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40021400 	.word	0x40021400
 80016e4:	40021800 	.word	0x40021800
 80016e8:	40021c00 	.word	0x40021c00
 80016ec:	40013c00 	.word	0x40013c00

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
 80016fc:	4613      	mov	r3, r2
 80016fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800170c:	e003      	b.n	8001716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	041a      	lsls	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	619a      	str	r2, [r3, #24]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800173a:	4a05      	ldr	r2, [pc, #20]	@ (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f806 	bl	8001754 <HAL_GPIO_EXTI_Callback>
  }
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40013c00 	.word	0x40013c00

08001754 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af02      	add	r7, sp, #8
 8001770:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d101      	bne.n	800177c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e059      	b.n	8001830 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	d106      	bne.n	800179c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f006 ff84 	bl	80086a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2203      	movs	r2, #3
 80017a0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017aa:	d102      	bne.n	80017b2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 fd90 	bl	80052dc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7c1a      	ldrb	r2, [r3, #16]
 80017c4:	f88d 2000 	strb.w	r2, [sp]
 80017c8:	3304      	adds	r3, #4
 80017ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017cc:	f003 fd11 	bl	80051f2 <USB_CoreInit>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2202      	movs	r2, #2
 80017da:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e026      	b.n	8001830 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2101      	movs	r1, #1
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 fd88 	bl	80052fe <USB_SetCurrentMode>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d005      	beq.n	8001800 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2202      	movs	r2, #2
 80017f8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e017      	b.n	8001830 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7c1a      	ldrb	r2, [r3, #16]
 8001808:	f88d 2000 	strb.w	r2, [sp]
 800180c:	3304      	adds	r3, #4
 800180e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001810:	f003 ff32 	bl	8005678 <USB_HostInit>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d005      	beq.n	8001826 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2202      	movs	r2, #2
 800181e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e004      	b.n	8001830 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b08b      	sub	sp, #44	@ 0x2c
 800183c:	af04      	add	r7, sp, #16
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	4608      	mov	r0, r1
 8001842:	4611      	mov	r1, r2
 8001844:	461a      	mov	r2, r3
 8001846:	4603      	mov	r3, r0
 8001848:	70fb      	strb	r3, [r7, #3]
 800184a:	460b      	mov	r3, r1
 800184c:	70bb      	strb	r3, [r7, #2]
 800184e:	4613      	mov	r3, r2
 8001850:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001852:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001854:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_HCD_HC_Init+0x2c>
 8001860:	2302      	movs	r3, #2
 8001862:	e09d      	b.n	80019a0 <HAL_HCD_HC_Init+0x168>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	4613      	mov	r3, r2
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	440b      	add	r3, r1
 800187a:	3319      	adds	r3, #25
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001880:	78fa      	ldrb	r2, [r7, #3]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	011b      	lsls	r3, r3, #4
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	3314      	adds	r3, #20
 8001890:	787a      	ldrb	r2, [r7, #1]
 8001892:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001894:	78fa      	ldrb	r2, [r7, #3]
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	4613      	mov	r3, r2
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	3315      	adds	r3, #21
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	3326      	adds	r3, #38	@ 0x26
 80018b8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80018bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	78bb      	ldrb	r3, [r7, #2]
 80018c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018c6:	b2d8      	uxtb	r0, r3
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	440b      	add	r3, r1
 80018d4:	3316      	adds	r3, #22
 80018d6:	4602      	mov	r2, r0
 80018d8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	4619      	mov	r1, r3
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fba4 	bl	800202c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80018e4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da0a      	bge.n	8001902 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80018ec:	78fa      	ldrb	r2, [r7, #3]
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	3317      	adds	r3, #23
 80018fc:	2201      	movs	r2, #1
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e009      	b.n	8001916 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	440b      	add	r3, r1
 8001910:	3317      	adds	r3, #23
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f004 f810 	bl	8005940 <USB_GetHostSpeed>
 8001920:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001922:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001926:	2b01      	cmp	r3, #1
 8001928:	d10b      	bne.n	8001942 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800192a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_HCD_HC_Init+0x10a>
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d104      	bne.n	8001942 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2bbc      	cmp	r3, #188	@ 0xbc
 800193c:	d901      	bls.n	8001942 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800193e:	23bc      	movs	r3, #188	@ 0xbc
 8001940:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	3318      	adds	r3, #24
 8001952:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001956:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	b298      	uxth	r0, r3
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	3328      	adds	r3, #40	@ 0x28
 800196c:	4602      	mov	r2, r0
 800196e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	b29b      	uxth	r3, r3
 8001978:	787c      	ldrb	r4, [r7, #1]
 800197a:	78ba      	ldrb	r2, [r7, #2]
 800197c:	78f9      	ldrb	r1, [r7, #3]
 800197e:	9302      	str	r3, [sp, #8]
 8001980:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	4623      	mov	r3, r4
 800198e:	f003 ffff 	bl	8005990 <USB_HC_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd90      	pop	{r4, r7, pc}

080019a8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	4608      	mov	r0, r1
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	4603      	mov	r3, r0
 80019b8:	70fb      	strb	r3, [r7, #3]
 80019ba:	460b      	mov	r3, r1
 80019bc:	70bb      	strb	r3, [r7, #2]
 80019be:	4613      	mov	r3, r2
 80019c0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	3317      	adds	r3, #23
 80019d2:	78ba      	ldrb	r2, [r7, #2]
 80019d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	011b      	lsls	r3, r3, #4
 80019de:	1a9b      	subs	r3, r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	3326      	adds	r3, #38	@ 0x26
 80019e6:	787a      	ldrb	r2, [r7, #1]
 80019e8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80019ea:	7c3b      	ldrb	r3, [r7, #16]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d114      	bne.n	8001a1a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	332a      	adds	r3, #42	@ 0x2a
 8001a00:	2203      	movs	r2, #3
 8001a02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a04:	78fa      	ldrb	r2, [r7, #3]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	3319      	adds	r3, #25
 8001a14:	7f3a      	ldrb	r2, [r7, #28]
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e009      	b.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a1a:	78fa      	ldrb	r2, [r7, #3]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	1a9b      	subs	r3, r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	332a      	adds	r3, #42	@ 0x2a
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a2e:	787b      	ldrb	r3, [r7, #1]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	f200 8102 	bhi.w	8001c3a <HAL_HCD_HC_SubmitRequest+0x292>
 8001a36:	a201      	add	r2, pc, #4	@ (adr r2, 8001a3c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001c25 	.word	0x08001c25
 8001a44:	08001b11 	.word	0x08001b11
 8001a48:	08001b9b 	.word	0x08001b9b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001a4c:	7c3b      	ldrb	r3, [r7, #16]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	f040 80f5 	bne.w	8001c3e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001a54:	78bb      	ldrb	r3, [r7, #2]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d12d      	bne.n	8001ab6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001a5a:	8b3b      	ldrh	r3, [r7, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001a60:	78fa      	ldrb	r2, [r7, #3]
 8001a62:	6879      	ldr	r1, [r7, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	1a9b      	subs	r3, r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	333d      	adds	r3, #61	@ 0x3d
 8001a70:	2201      	movs	r2, #1
 8001a72:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
 8001a82:	333d      	adds	r3, #61	@ 0x3d
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10a      	bne.n	8001aa0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	332a      	adds	r3, #42	@ 0x2a
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001a9e:	e0ce      	b.n	8001c3e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	440b      	add	r3, r1
 8001aae:	332a      	adds	r3, #42	@ 0x2a
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	701a      	strb	r2, [r3, #0]
      break;
 8001ab4:	e0c3      	b.n	8001c3e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001ab6:	78fa      	ldrb	r2, [r7, #3]
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	1a9b      	subs	r3, r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	331a      	adds	r3, #26
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	f040 80b8 	bne.w	8001c3e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ace:	78fa      	ldrb	r2, [r7, #3]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	333c      	adds	r3, #60	@ 0x3c
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10a      	bne.n	8001afa <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	1a9b      	subs	r3, r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	332a      	adds	r3, #42	@ 0x2a
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
      break;
 8001af8:	e0a1      	b.n	8001c3e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001afa:	78fa      	ldrb	r2, [r7, #3]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4613      	mov	r3, r2
 8001b00:	011b      	lsls	r3, r3, #4
 8001b02:	1a9b      	subs	r3, r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	440b      	add	r3, r1
 8001b08:	332a      	adds	r3, #42	@ 0x2a
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	701a      	strb	r2, [r3, #0]
      break;
 8001b0e:	e096      	b.n	8001c3e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b10:	78bb      	ldrb	r3, [r7, #2]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d120      	bne.n	8001b58 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	1a9b      	subs	r3, r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	440b      	add	r3, r1
 8001b24:	333d      	adds	r3, #61	@ 0x3d
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10a      	bne.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b2c:	78fa      	ldrb	r2, [r7, #3]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	332a      	adds	r3, #42	@ 0x2a
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b40:	e07e      	b.n	8001c40 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b42:	78fa      	ldrb	r2, [r7, #3]
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	1a9b      	subs	r3, r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	440b      	add	r3, r1
 8001b50:	332a      	adds	r3, #42	@ 0x2a
 8001b52:	2202      	movs	r2, #2
 8001b54:	701a      	strb	r2, [r3, #0]
      break;
 8001b56:	e073      	b.n	8001c40 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b58:	78fa      	ldrb	r2, [r7, #3]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	333c      	adds	r3, #60	@ 0x3c
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10a      	bne.n	8001b84 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b6e:	78fa      	ldrb	r2, [r7, #3]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	332a      	adds	r3, #42	@ 0x2a
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
      break;
 8001b82:	e05d      	b.n	8001c40 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	1a9b      	subs	r3, r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	332a      	adds	r3, #42	@ 0x2a
 8001b94:	2202      	movs	r2, #2
 8001b96:	701a      	strb	r2, [r3, #0]
      break;
 8001b98:	e052      	b.n	8001c40 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b9a:	78bb      	ldrb	r3, [r7, #2]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d120      	bne.n	8001be2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	011b      	lsls	r3, r3, #4
 8001ba8:	1a9b      	subs	r3, r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	333d      	adds	r3, #61	@ 0x3d
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10a      	bne.n	8001bcc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	332a      	adds	r3, #42	@ 0x2a
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bca:	e039      	b.n	8001c40 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bcc:	78fa      	ldrb	r2, [r7, #3]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	332a      	adds	r3, #42	@ 0x2a
 8001bdc:	2202      	movs	r2, #2
 8001bde:	701a      	strb	r2, [r3, #0]
      break;
 8001be0:	e02e      	b.n	8001c40 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001be2:	78fa      	ldrb	r2, [r7, #3]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	440b      	add	r3, r1
 8001bf0:	333c      	adds	r3, #60	@ 0x3c
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	332a      	adds	r3, #42	@ 0x2a
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
      break;
 8001c0c:	e018      	b.n	8001c40 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c0e:	78fa      	ldrb	r2, [r7, #3]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	332a      	adds	r3, #42	@ 0x2a
 8001c1e:	2202      	movs	r2, #2
 8001c20:	701a      	strb	r2, [r3, #0]
      break;
 8001c22:	e00d      	b.n	8001c40 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c24:	78fa      	ldrb	r2, [r7, #3]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	332a      	adds	r3, #42	@ 0x2a
 8001c34:	2200      	movs	r2, #0
 8001c36:	701a      	strb	r2, [r3, #0]
      break;
 8001c38:	e002      	b.n	8001c40 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001c3a:	bf00      	nop
 8001c3c:	e000      	b.n	8001c40 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001c3e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c40:	78fa      	ldrb	r2, [r7, #3]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	1a9b      	subs	r3, r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	332c      	adds	r3, #44	@ 0x2c
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c54:	78fa      	ldrb	r2, [r7, #3]
 8001c56:	8b39      	ldrh	r1, [r7, #24]
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	1a9b      	subs	r3, r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4403      	add	r3, r0
 8001c64:	3334      	adds	r3, #52	@ 0x34
 8001c66:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	334c      	adds	r3, #76	@ 0x4c
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	3338      	adds	r3, #56	@ 0x38
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	3315      	adds	r3, #21
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	334d      	adds	r3, #77	@ 0x4d
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	78fa      	ldrb	r2, [r7, #3]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	1a9b      	subs	r3, r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	3310      	adds	r3, #16
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	1d19      	adds	r1, r3, #4
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	799b      	ldrb	r3, [r3, #6]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	f003 ff88 	bl	8005be8 <USB_HC_StartXfer>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop

08001ce4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 fc75 	bl	80055ea <USB_GetMode>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	f040 80fb 	bne.w	8001efe <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 fc38 	bl	8005582 <USB_ReadInterrupts>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80f1 	beq.w	8001efc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 fc2f 	bl	8005582 <USB_ReadInterrupts>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001d2e:	d104      	bne.n	8001d3a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f003 fc1f 	bl	8005582 <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d4e:	d104      	bne.n	8001d5a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f003 fc0f 	bl	8005582 <USB_ReadInterrupts>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001d6e:	d104      	bne.n	8001d7a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001d78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 fbff 	bl	8005582 <USB_ReadInterrupts>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d103      	bne.n	8001d96 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2202      	movs	r2, #2
 8001d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 fbf1 	bl	8005582 <USB_ReadInterrupts>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001da6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001daa:	d120      	bne.n	8001dee <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001db4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d113      	bne.n	8001dee <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001dc6:	2110      	movs	r1, #16
 8001dc8:	6938      	ldr	r0, [r7, #16]
 8001dca:	f003 fae4 	bl	8005396 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001dce:	6938      	ldr	r0, [r7, #16]
 8001dd0:	f003 fb13 	bl	80053fa <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7a5b      	ldrb	r3, [r3, #9]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d105      	bne.n	8001de8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2101      	movs	r1, #1
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fd0c 	bl	8005800 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f006 fcd9 	bl	80087a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 fbc5 	bl	8005582 <USB_ReadInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e02:	d102      	bne.n	8001e0a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f001 fd4d 	bl	80038a4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 fbb7 	bl	8005582 <USB_ReadInterrupts>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d106      	bne.n	8001e2c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f006 fca2 	bl	8008768 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2208      	movs	r2, #8
 8001e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fba6 	bl	8005582 <USB_ReadInterrupts>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e40:	d139      	bne.n	8001eb6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f004 f948 	bl	80060dc <USB_HC_ReadInterrupt>
 8001e4c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	e025      	b.n	8001ea0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d018      	beq.n	8001e9a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e7e:	d106      	bne.n	8001e8e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	4619      	mov	r1, r3
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f905 	bl	8002096 <HCD_HC_IN_IRQHandler>
 8001e8c:	e005      	b.n	8001e9a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	4619      	mov	r1, r3
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 ff67 	bl	8002d68 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	795b      	ldrb	r3, [r3, #5]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d3d3      	bcc.n	8001e54 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fb61 	bl	8005582 <USB_ReadInterrupts>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b10      	cmp	r3, #16
 8001ec8:	d101      	bne.n	8001ece <HAL_HCD_IRQHandler+0x1ea>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_HCD_IRQHandler+0x1ec>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d014      	beq.n	8001efe <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0210 	bic.w	r2, r2, #16
 8001ee2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f001 fbfe 	bl	80036e6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699a      	ldr	r2, [r3, #24]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0210 	orr.w	r2, r2, #16
 8001ef8:	619a      	str	r2, [r3, #24]
 8001efa:	e000      	b.n	8001efe <HAL_HCD_IRQHandler+0x21a>
      return;
 8001efc:	bf00      	nop
    }
  }
}
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d101      	bne.n	8001f1a <HAL_HCD_Start+0x16>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e013      	b.n	8001f42 <HAL_HCD_Start+0x3e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2101      	movs	r1, #1
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 fcd0 	bl	80058ce <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f003 f9c1 	bl	80052ba <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_HCD_Stop+0x16>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e00d      	b.n	8001f7c <HAL_HCD_Stop+0x32>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 fa23 	bl	80063b8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f003 fc72 	bl	800587a <USB_ResetPort>
 8001f96:	4603      	mov	r3, r0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	334c      	adds	r3, #76	@ 0x4c
 8001fbc:	781b      	ldrb	r3, [r3, #0]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001fd6:	78fa      	ldrb	r2, [r7, #3]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	1a9b      	subs	r3, r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3338      	adds	r3, #56	@ 0x38
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f003 fcb4 	bl	800596e <USB_GetCurrentFrame>
 8002006:	4603      	mov	r3, r0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fc8f 	bl	8005940 <USB_GetHostSpeed>
 8002022:	4603      	mov	r3, r0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	1a9b      	subs	r3, r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	331a      	adds	r3, #26
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	331b      	adds	r3, #27
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	3325      	adds	r3, #37	@ 0x25
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	3324      	adds	r3, #36	@ 0x24
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b086      	sub	sp, #24
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 fa77 	bl	80055a8 <USB_ReadChInterrupts>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d11a      	bne.n	80020fa <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d0:	461a      	mov	r2, r3
 80020d2:	2304      	movs	r3, #4
 80020d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80020d6:	78fa      	ldrb	r2, [r7, #3]
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	011b      	lsls	r3, r3, #4
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	334d      	adds	r3, #77	@ 0x4d
 80020e6:	2207      	movs	r2, #7
 80020e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 f803 	bl	80060fe <USB_HC_Halt>
 80020f8:	e09e      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fa50 	bl	80055a8 <USB_ReadChInterrupts>
 8002108:	4603      	mov	r3, r0
 800210a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002112:	d11b      	bne.n	800214c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002120:	461a      	mov	r2, r3
 8002122:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002126:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	334d      	adds	r3, #77	@ 0x4d
 8002138:	2208      	movs	r2, #8
 800213a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f003 ffda 	bl	80060fe <USB_HC_Halt>
 800214a:	e075      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f003 fa27 	bl	80055a8 <USB_ReadChInterrupts>
 800215a:	4603      	mov	r3, r0
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b08      	cmp	r3, #8
 8002162:	d11a      	bne.n	800219a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002170:	461a      	mov	r2, r3
 8002172:	2308      	movs	r3, #8
 8002174:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	334d      	adds	r3, #77	@ 0x4d
 8002186:	2206      	movs	r2, #6
 8002188:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	4611      	mov	r1, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f003 ffb3 	bl	80060fe <USB_HC_Halt>
 8002198:	e04e      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f003 fa00 	bl	80055a8 <USB_ReadChInterrupts>
 80021a8:	4603      	mov	r3, r0
 80021aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b2:	d11b      	bne.n	80021ec <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021c0:	461a      	mov	r2, r3
 80021c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	334d      	adds	r3, #77	@ 0x4d
 80021d8:	2209      	movs	r2, #9
 80021da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f003 ff8a 	bl	80060fe <USB_HC_Halt>
 80021ea:	e025      	b.n	8002238 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f003 f9d7 	bl	80055a8 <USB_ReadChInterrupts>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002200:	2b80      	cmp	r3, #128	@ 0x80
 8002202:	d119      	bne.n	8002238 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002210:	461a      	mov	r2, r3
 8002212:	2380      	movs	r3, #128	@ 0x80
 8002214:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	334d      	adds	r3, #77	@ 0x4d
 8002226:	2207      	movs	r2, #7
 8002228:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f003 ff63 	bl	80060fe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	78fa      	ldrb	r2, [r7, #3]
 800223e:	4611      	mov	r1, r2
 8002240:	4618      	mov	r0, r3
 8002242:	f003 f9b1 	bl	80055a8 <USB_ReadChInterrupts>
 8002246:	4603      	mov	r3, r0
 8002248:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800224c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002250:	d112      	bne.n	8002278 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f003 ff4f 	bl	80060fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	015a      	lsls	r2, r3, #5
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4413      	add	r3, r2
 8002268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800226c:	461a      	mov	r2, r3
 800226e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002272:	6093      	str	r3, [r2, #8]
 8002274:	f000 bd75 	b.w	8002d62 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f003 f991 	bl	80055a8 <USB_ReadChInterrupts>
 8002286:	4603      	mov	r3, r0
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b01      	cmp	r3, #1
 800228e:	f040 8128 	bne.w	80024e2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800229e:	461a      	mov	r2, r3
 80022a0:	2320      	movs	r3, #32
 80022a2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	331b      	adds	r3, #27
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d119      	bne.n	80022ee <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	331b      	adds	r3, #27
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	0151      	lsls	r1, r2, #5
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	440a      	add	r2, r1
 80022e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ec:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	799b      	ldrb	r3, [r3, #6]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d01b      	beq.n	800232e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	3330      	adds	r3, #48	@ 0x30
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	1ac9      	subs	r1, r1, r3
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4403      	add	r3, r0
 800232a:	3338      	adds	r3, #56	@ 0x38
 800232c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	334d      	adds	r3, #77	@ 0x4d
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	3344      	adds	r3, #68	@ 0x44
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002362:	461a      	mov	r2, r3
 8002364:	2301      	movs	r3, #1
 8002366:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3326      	adds	r3, #38	@ 0x26
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	3326      	adds	r3, #38	@ 0x26
 800238e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002390:	2b02      	cmp	r3, #2
 8002392:	d110      	bne.n	80023b6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f003 feae 	bl	80060fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80023a2:	78fb      	ldrb	r3, [r7, #3]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ae:	461a      	mov	r2, r3
 80023b0:	2310      	movs	r3, #16
 80023b2:	6093      	str	r3, [r2, #8]
 80023b4:	e03d      	b.n	8002432 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	3326      	adds	r3, #38	@ 0x26
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d00a      	beq.n	80023e2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	3326      	adds	r3, #38	@ 0x26
 80023dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d127      	bne.n	8002432 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	0151      	lsls	r1, r2, #5
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	440a      	add	r2, r1
 80023f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002400:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	334c      	adds	r3, #76	@ 0x4c
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	440b      	add	r3, r1
 8002424:	334c      	adds	r3, #76	@ 0x4c
 8002426:	781a      	ldrb	r2, [r3, #0]
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	4619      	mov	r1, r3
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f006 f9c5 	bl	80087bc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	799b      	ldrb	r3, [r3, #6]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d13b      	bne.n	80024b2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	3338      	adds	r3, #56	@ 0x38
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4403      	add	r3, r0
 800245a:	3328      	adds	r3, #40	@ 0x28
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	440b      	add	r3, r1
 8002460:	1e59      	subs	r1, r3, #1
 8002462:	78fa      	ldrb	r2, [r7, #3]
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	1a9b      	subs	r3, r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4403      	add	r3, r0
 8002470:	3328      	adds	r3, #40	@ 0x28
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	fbb1 f3f3 	udiv	r3, r1, r3
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 8470 	beq.w	8002d62 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002482:	78fa      	ldrb	r2, [r7, #3]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	333c      	adds	r3, #60	@ 0x3c
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	f083 0301 	eor.w	r3, r3, #1
 800249a:	b2d8      	uxtb	r0, r3
 800249c:	6879      	ldr	r1, [r7, #4]
 800249e:	4613      	mov	r3, r2
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	1a9b      	subs	r3, r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	440b      	add	r3, r1
 80024a8:	333c      	adds	r3, #60	@ 0x3c
 80024aa:	4602      	mov	r2, r0
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	f000 bc58 	b.w	8002d62 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	1a9b      	subs	r3, r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	333c      	adds	r3, #60	@ 0x3c
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	f083 0301 	eor.w	r3, r3, #1
 80024ca:	b2d8      	uxtb	r0, r3
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	333c      	adds	r3, #60	@ 0x3c
 80024da:	4602      	mov	r2, r0
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	f000 bc40 	b.w	8002d62 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 f85c 	bl	80055a8 <USB_ReadChInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d131      	bne.n	800255e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002506:	461a      	mov	r2, r3
 8002508:	2320      	movs	r3, #32
 800250a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	331a      	adds	r3, #26
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	f040 841f 	bne.w	8002d62 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	331b      	adds	r3, #27
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	334d      	adds	r3, #77	@ 0x4d
 8002548:	2203      	movs	r2, #3
 800254a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fdd2 	bl	80060fe <USB_HC_Halt>
 800255a:	f000 bc02 	b.w	8002d62 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f003 f81e 	bl	80055a8 <USB_ReadChInterrupts>
 800256c:	4603      	mov	r3, r0
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b02      	cmp	r3, #2
 8002574:	f040 8305 	bne.w	8002b82 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002584:	461a      	mov	r2, r3
 8002586:	2302      	movs	r3, #2
 8002588:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800258a:	78fa      	ldrb	r2, [r7, #3]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	1a9b      	subs	r3, r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	334d      	adds	r3, #77	@ 0x4d
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d114      	bne.n	80025ca <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	334d      	adds	r3, #77	@ 0x4d
 80025b0:	2202      	movs	r2, #2
 80025b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	334c      	adds	r3, #76	@ 0x4c
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	e2cc      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	334d      	adds	r3, #77	@ 0x4d
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b06      	cmp	r3, #6
 80025de:	d114      	bne.n	800260a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	334d      	adds	r3, #77	@ 0x4d
 80025f0:	2202      	movs	r2, #2
 80025f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	334c      	adds	r3, #76	@ 0x4c
 8002604:	2205      	movs	r2, #5
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e2ac      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	334d      	adds	r3, #77	@ 0x4d
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b07      	cmp	r3, #7
 800261e:	d00b      	beq.n	8002638 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	334d      	adds	r3, #77	@ 0x4d
 8002630:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002632:	2b09      	cmp	r3, #9
 8002634:	f040 80a6 	bne.w	8002784 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	334d      	adds	r3, #77	@ 0x4d
 8002648:	2202      	movs	r2, #2
 800264a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3344      	adds	r3, #68	@ 0x44
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	1c59      	adds	r1, r3, #1
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4403      	add	r3, r0
 800266c:	3344      	adds	r3, #68	@ 0x44
 800266e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	1a9b      	subs	r3, r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3344      	adds	r3, #68	@ 0x44
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d943      	bls.n	800270e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3344      	adds	r3, #68	@ 0x44
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	331a      	adds	r3, #26
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d123      	bne.n	80026f8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	331b      	adds	r3, #27
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	331c      	adds	r3, #28
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	0151      	lsls	r1, r2, #5
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	440a      	add	r2, r1
 80026ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026f6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	334c      	adds	r3, #76	@ 0x4c
 8002708:	2204      	movs	r2, #4
 800270a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800270c:	e229      	b.n	8002b62 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	4613      	mov	r3, r2
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	1a9b      	subs	r3, r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	334c      	adds	r3, #76	@ 0x4c
 800271e:	2202      	movs	r2, #2
 8002720:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3326      	adds	r3, #38	@ 0x26
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00b      	beq.n	8002750 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	3326      	adds	r3, #38	@ 0x26
 8002748:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800274a:	2b02      	cmp	r3, #2
 800274c:	f040 8209 	bne.w	8002b62 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002766:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800276e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800277c:	461a      	mov	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002782:	e1ee      	b.n	8002b62 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	334d      	adds	r3, #77	@ 0x4d
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b05      	cmp	r3, #5
 8002798:	f040 80c8 	bne.w	800292c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	334d      	adds	r3, #77	@ 0x4d
 80027ac:	2202      	movs	r2, #2
 80027ae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	331b      	adds	r3, #27
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	f040 81ce 	bne.w	8002b64 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	3326      	adds	r3, #38	@ 0x26
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d16b      	bne.n	80028b6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	3348      	adds	r3, #72	@ 0x48
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	1c59      	adds	r1, r3, #1
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4403      	add	r3, r0
 80027fe:	3348      	adds	r3, #72	@ 0x48
 8002800:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	3348      	adds	r3, #72	@ 0x48
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d943      	bls.n	80028a0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	3348      	adds	r3, #72	@ 0x48
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	331b      	adds	r3, #27
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	3344      	adds	r3, #68	@ 0x44
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d809      	bhi.n	800286a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	331c      	adds	r3, #28
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800286a:	78fb      	ldrb	r3, [r7, #3]
 800286c:	015a      	lsls	r2, r3, #5
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	4413      	add	r3, r2
 8002872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	0151      	lsls	r1, r2, #5
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	440a      	add	r2, r1
 8002880:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002888:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	4613      	mov	r3, r2
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	334c      	adds	r3, #76	@ 0x4c
 800289a:	2204      	movs	r2, #4
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e014      	b.n	80028ca <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	334c      	adds	r3, #76	@ 0x4c
 80028b0:	2202      	movs	r2, #2
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	e009      	b.n	80028ca <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	4613      	mov	r3, r2
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	334c      	adds	r3, #76	@ 0x4c
 80028c6:	2202      	movs	r2, #2
 80028c8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3326      	adds	r3, #38	@ 0x26
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	3326      	adds	r3, #38	@ 0x26
 80028f0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	f040 8136 	bne.w	8002b64 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800290e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002916:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002924:	461a      	mov	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e11b      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	334d      	adds	r3, #77	@ 0x4d
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b03      	cmp	r3, #3
 8002940:	f040 8081 	bne.w	8002a46 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	334d      	adds	r3, #77	@ 0x4d
 8002954:	2202      	movs	r2, #2
 8002956:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	331b      	adds	r3, #27
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	f040 80fa 	bne.w	8002b64 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	334c      	adds	r3, #76	@ 0x4c
 8002980:	2202      	movs	r2, #2
 8002982:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4413      	add	r3, r2
 800298c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	0151      	lsls	r1, r2, #5
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	440a      	add	r2, r1
 800299a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800299e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	0151      	lsls	r1, r2, #5
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	440a      	add	r2, r1
 80029ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029c2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	0151      	lsls	r1, r2, #5
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	440a      	add	r2, r1
 80029da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029de:	f023 0320 	bic.w	r3, r3, #32
 80029e2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3326      	adds	r3, #38	@ 0x26
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00b      	beq.n	8002a12 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	3326      	adds	r3, #38	@ 0x26
 8002a0a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	f040 80a9 	bne.w	8002b64 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a28:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a30:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	015a      	lsls	r2, r3, #5
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4413      	add	r3, r2
 8002a3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	e08e      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	334d      	adds	r3, #77	@ 0x4d
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d143      	bne.n	8002ae4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	334d      	adds	r3, #77	@ 0x4d
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	334c      	adds	r3, #76	@ 0x4c
 8002a80:	2202      	movs	r2, #2
 8002a82:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	3326      	adds	r3, #38	@ 0x26
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3326      	adds	r3, #38	@ 0x26
 8002aaa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d159      	bne.n	8002b64 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ac6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ace:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002adc:	461a      	mov	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e03f      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	334d      	adds	r3, #77	@ 0x4d
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d126      	bne.n	8002b48 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	334d      	adds	r3, #77	@ 0x4d
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3344      	adds	r3, #68	@ 0x44
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	1c59      	adds	r1, r3, #1
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4403      	add	r3, r0
 8002b2e:	3344      	adds	r3, #68	@ 0x44
 8002b30:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	334c      	adds	r3, #76	@ 0x4c
 8002b42:	2204      	movs	r2, #4
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	e00d      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002b48:	78fa      	ldrb	r2, [r7, #3]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	011b      	lsls	r3, r3, #4
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	334d      	adds	r3, #77	@ 0x4d
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	f000 8100 	beq.w	8002d60 <HCD_HC_IN_IRQHandler+0xcca>
 8002b60:	e000      	b.n	8002b64 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b62:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	334c      	adds	r3, #76	@ 0x4c
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f005 fe1e 	bl	80087bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b80:	e0ef      	b.n	8002d62 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 fd0c 	bl	80055a8 <USB_ReadChInterrupts>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b96:	2b40      	cmp	r3, #64	@ 0x40
 8002b98:	d12f      	bne.n	8002bfa <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2340      	movs	r3, #64	@ 0x40
 8002baa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	1a9b      	subs	r3, r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	334d      	adds	r3, #77	@ 0x4d
 8002bbc:	2205      	movs	r2, #5
 8002bbe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	331a      	adds	r3, #26
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	3344      	adds	r3, #68	@ 0x44
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f003 fa83 	bl	80060fe <USB_HC_Halt>
 8002bf8:	e0b3      	b.n	8002d62 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 fcd0 	bl	80055a8 <USB_ReadChInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	f040 80a7 	bne.w	8002d62 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	3326      	adds	r3, #38	@ 0x26
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d11b      	bne.n	8002c62 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	3344      	adds	r3, #68	@ 0x44
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	334d      	adds	r3, #77	@ 0x4d
 8002c4e:	2204      	movs	r2, #4
 8002c50:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 fa4f 	bl	80060fe <USB_HC_Halt>
 8002c60:	e03f      	b.n	8002ce2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	3326      	adds	r3, #38	@ 0x26
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3326      	adds	r3, #38	@ 0x26
 8002c88:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d129      	bne.n	8002ce2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3344      	adds	r3, #68	@ 0x44
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	799b      	ldrb	r3, [r3, #6]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HCD_HC_IN_IRQHandler+0xc2a>
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	331b      	adds	r3, #27
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d110      	bne.n	8002ce2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	334d      	adds	r3, #77	@ 0x4d
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	4611      	mov	r1, r2
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 fa0e 	bl	80060fe <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	331b      	adds	r3, #27
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d129      	bne.n	8002d4c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	331b      	adds	r3, #27
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	0151      	lsls	r1, r2, #5
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	440a      	add	r2, r1
 8002d22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	0151      	lsls	r1, r2, #5
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	440a      	add	r2, r1
 8002d42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d46:	f043 0320 	orr.w	r3, r3, #32
 8002d4a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d4c:	78fb      	ldrb	r3, [r7, #3]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	6093      	str	r3, [r2, #8]
 8002d5e:	e000      	b.n	8002d62 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002d60:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f002 fc0e 	bl	80055a8 <USB_ReadChInterrupts>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d11b      	bne.n	8002dce <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da2:	461a      	mov	r2, r3
 8002da4:	2304      	movs	r3, #4
 8002da6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	334d      	adds	r3, #77	@ 0x4d
 8002db8:	2207      	movs	r2, #7
 8002dba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 f99a 	bl	80060fe <USB_HC_Halt>
 8002dca:	f000 bc89 	b.w	80036e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f002 fbe6 	bl	80055a8 <USB_ReadChInterrupts>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	f040 8082 	bne.w	8002eec <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df4:	461a      	mov	r2, r3
 8002df6:	2320      	movs	r3, #32
 8002df8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	3319      	adds	r3, #25
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d124      	bne.n	8002e5a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3319      	adds	r3, #25
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	334c      	adds	r3, #76	@ 0x4c
 8002e34:	2202      	movs	r2, #2
 8002e36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	334d      	adds	r3, #77	@ 0x4d
 8002e48:	2203      	movs	r2, #3
 8002e4a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f003 f952 	bl	80060fe <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	331a      	adds	r3, #26
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	f040 8437 	bne.w	80036e0 <HCD_HC_OUT_IRQHandler+0x978>
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	331b      	adds	r3, #27
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f040 842b 	bne.w	80036e0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3326      	adds	r3, #38	@ 0x26
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d009      	beq.n	8002eb4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	331b      	adds	r3, #27
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	334d      	adds	r3, #77	@ 0x4d
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f003 f914 	bl	80060fe <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3344      	adds	r3, #68	@ 0x44
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e3f9      	b.n	80036e0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 fb57 	bl	80055a8 <USB_ReadChInterrupts>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f04:	d111      	bne.n	8002f2a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f12:	461a      	mov	r2, r3
 8002f14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f18:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f003 f8eb 	bl	80060fe <USB_HC_Halt>
 8002f28:	e3da      	b.n	80036e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f002 fb38 	bl	80055a8 <USB_ReadChInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d168      	bne.n	8003014 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	3344      	adds	r3, #68	@ 0x44
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	4611      	mov	r1, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f002 fb22 	bl	80055a8 <USB_ReadChInterrupts>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6a:	2b40      	cmp	r3, #64	@ 0x40
 8002f6c:	d112      	bne.n	8002f94 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	1a9b      	subs	r3, r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3319      	adds	r3, #25
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2340      	movs	r3, #64	@ 0x40
 8002f92:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	331b      	adds	r3, #27
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d019      	beq.n	8002fde <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002faa:	78fa      	ldrb	r2, [r7, #3]
 8002fac:	6879      	ldr	r1, [r7, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	1a9b      	subs	r3, r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	331b      	adds	r3, #27
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	0151      	lsls	r1, r2, #5
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	440a      	add	r2, r1
 8002fd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fdc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fea:	461a      	mov	r2, r3
 8002fec:	2301      	movs	r3, #1
 8002fee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	334d      	adds	r3, #77	@ 0x4d
 8003000:	2201      	movs	r2, #1
 8003002:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f003 f876 	bl	80060fe <USB_HC_Halt>
 8003012:	e365      	b.n	80036e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f002 fac3 	bl	80055a8 <USB_ReadChInterrupts>
 8003022:	4603      	mov	r3, r0
 8003024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003028:	2b40      	cmp	r3, #64	@ 0x40
 800302a:	d139      	bne.n	80030a0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	334d      	adds	r3, #77	@ 0x4d
 800303c:	2205      	movs	r2, #5
 800303e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	331a      	adds	r3, #26
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d109      	bne.n	800306a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3319      	adds	r3, #25
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	3344      	adds	r3, #68	@ 0x44
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f003 f839 	bl	80060fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	015a      	lsls	r2, r3, #5
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4413      	add	r3, r2
 8003094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003098:	461a      	mov	r2, r3
 800309a:	2340      	movs	r3, #64	@ 0x40
 800309c:	6093      	str	r3, [r2, #8]
 800309e:	e31f      	b.n	80036e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 fa7d 	bl	80055a8 <USB_ReadChInterrupts>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d11a      	bne.n	80030ee <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c4:	461a      	mov	r2, r3
 80030c6:	2308      	movs	r3, #8
 80030c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	334d      	adds	r3, #77	@ 0x4d
 80030da:	2206      	movs	r2, #6
 80030dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f003 f809 	bl	80060fe <USB_HC_Halt>
 80030ec:	e2f8      	b.n	80036e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f002 fa56 	bl	80055a8 <USB_ReadChInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b10      	cmp	r3, #16
 8003104:	d144      	bne.n	8003190 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3344      	adds	r3, #68	@ 0x44
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	334d      	adds	r3, #77	@ 0x4d
 800312a:	2204      	movs	r2, #4
 800312c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3319      	adds	r3, #25
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d114      	bne.n	800316e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3318      	adds	r3, #24
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3319      	adds	r3, #25
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f002 ffc1 	bl	80060fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003188:	461a      	mov	r2, r3
 800318a:	2310      	movs	r3, #16
 800318c:	6093      	str	r3, [r2, #8]
 800318e:	e2a7      	b.n	80036e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f002 fa05 	bl	80055a8 <USB_ReadChInterrupts>
 800319e:	4603      	mov	r3, r0
 80031a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a4:	2b80      	cmp	r3, #128	@ 0x80
 80031a6:	f040 8083 	bne.w	80032b0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	799b      	ldrb	r3, [r3, #6]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d111      	bne.n	80031d6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	334d      	adds	r3, #77	@ 0x4d
 80031c2:	2207      	movs	r2, #7
 80031c4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f002 ff95 	bl	80060fe <USB_HC_Halt>
 80031d4:	e062      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	3344      	adds	r3, #68	@ 0x44
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	1c59      	adds	r1, r3, #1
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4403      	add	r3, r0
 80031f6:	3344      	adds	r3, #68	@ 0x44
 80031f8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	1a9b      	subs	r3, r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	3344      	adds	r3, #68	@ 0x44
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b02      	cmp	r3, #2
 800320e:	d922      	bls.n	8003256 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	3344      	adds	r3, #68	@ 0x44
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003224:	78fa      	ldrb	r2, [r7, #3]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	011b      	lsls	r3, r3, #4
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	334c      	adds	r3, #76	@ 0x4c
 8003234:	2204      	movs	r2, #4
 8003236:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	334c      	adds	r3, #76	@ 0x4c
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	4619      	mov	r1, r3
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f005 fab4 	bl	80087bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003254:	e022      	b.n	800329c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	334c      	adds	r3, #76	@ 0x4c
 8003266:	2202      	movs	r2, #2
 8003268:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003280:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003288:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003296:	461a      	mov	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a8:	461a      	mov	r2, r3
 80032aa:	2380      	movs	r3, #128	@ 0x80
 80032ac:	6093      	str	r3, [r2, #8]
 80032ae:	e217      	b.n	80036e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f002 f975 	bl	80055a8 <USB_ReadChInterrupts>
 80032be:	4603      	mov	r3, r0
 80032c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032c8:	d11b      	bne.n	8003302 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	334d      	adds	r3, #77	@ 0x4d
 80032da:	2209      	movs	r2, #9
 80032dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	4611      	mov	r1, r2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f002 ff09 	bl	80060fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f8:	461a      	mov	r2, r3
 80032fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032fe:	6093      	str	r3, [r2, #8]
 8003300:	e1ee      	b.n	80036e0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f002 f94c 	bl	80055a8 <USB_ReadChInterrupts>
 8003310:	4603      	mov	r3, r0
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b02      	cmp	r3, #2
 8003318:	f040 81df 	bne.w	80036da <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003328:	461a      	mov	r2, r3
 800332a:	2302      	movs	r3, #2
 800332c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	334d      	adds	r3, #77	@ 0x4d
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	f040 8093 	bne.w	800346c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	334d      	adds	r3, #77	@ 0x4d
 8003356:	2202      	movs	r2, #2
 8003358:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	334c      	adds	r3, #76	@ 0x4c
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	3326      	adds	r3, #38	@ 0x26
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b02      	cmp	r3, #2
 8003382:	d00b      	beq.n	800339c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	3326      	adds	r3, #38	@ 0x26
 8003394:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003396:	2b03      	cmp	r3, #3
 8003398:	f040 8190 	bne.w	80036bc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	799b      	ldrb	r3, [r3, #6]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d115      	bne.n	80033d0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	333d      	adds	r3, #61	@ 0x3d
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	f083 0301 	eor.w	r3, r3, #1
 80033bc:	b2d8      	uxtb	r0, r3
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	333d      	adds	r3, #61	@ 0x3d
 80033cc:	4602      	mov	r2, r0
 80033ce:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	799b      	ldrb	r3, [r3, #6]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f040 8171 	bne.w	80036bc <HCD_HC_OUT_IRQHandler+0x954>
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3334      	adds	r3, #52	@ 0x34
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8165 	beq.w	80036bc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	3334      	adds	r3, #52	@ 0x34
 8003402:	6819      	ldr	r1, [r3, #0]
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4403      	add	r3, r0
 8003412:	3328      	adds	r3, #40	@ 0x28
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	440b      	add	r3, r1
 8003418:	1e59      	subs	r1, r3, #1
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4403      	add	r3, r0
 8003428:	3328      	adds	r3, #40	@ 0x28
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003430:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 813f 	beq.w	80036bc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	333d      	adds	r3, #61	@ 0x3d
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	f083 0301 	eor.w	r3, r3, #1
 8003456:	b2d8      	uxtb	r0, r3
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	333d      	adds	r3, #61	@ 0x3d
 8003466:	4602      	mov	r2, r0
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	e127      	b.n	80036bc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	334d      	adds	r3, #77	@ 0x4d
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b03      	cmp	r3, #3
 8003480:	d120      	bne.n	80034c4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	334d      	adds	r3, #77	@ 0x4d
 8003492:	2202      	movs	r2, #2
 8003494:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	331b      	adds	r3, #27
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	f040 8107 	bne.w	80036bc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	334c      	adds	r3, #76	@ 0x4c
 80034be:	2202      	movs	r2, #2
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e0fb      	b.n	80036bc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	334d      	adds	r3, #77	@ 0x4d
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d13a      	bne.n	8003550 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	334d      	adds	r3, #77	@ 0x4d
 80034ea:	2202      	movs	r2, #2
 80034ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	334c      	adds	r3, #76	@ 0x4c
 80034fe:	2202      	movs	r2, #2
 8003500:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	331b      	adds	r3, #27
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b01      	cmp	r3, #1
 8003516:	f040 80d1 	bne.w	80036bc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	331b      	adds	r3, #27
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4413      	add	r3, r2
 8003536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	0151      	lsls	r1, r2, #5
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	440a      	add	r2, r1
 8003544:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800354c:	6053      	str	r3, [r2, #4]
 800354e:	e0b5      	b.n	80036bc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	334d      	adds	r3, #77	@ 0x4d
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b05      	cmp	r3, #5
 8003564:	d114      	bne.n	8003590 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	334d      	adds	r3, #77	@ 0x4d
 8003576:	2202      	movs	r2, #2
 8003578:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	334c      	adds	r3, #76	@ 0x4c
 800358a:	2202      	movs	r2, #2
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e095      	b.n	80036bc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	334d      	adds	r3, #77	@ 0x4d
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d114      	bne.n	80035d0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	334d      	adds	r3, #77	@ 0x4d
 80035b6:	2202      	movs	r2, #2
 80035b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	334c      	adds	r3, #76	@ 0x4c
 80035ca:	2205      	movs	r2, #5
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	e075      	b.n	80036bc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	334d      	adds	r3, #77	@ 0x4d
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b07      	cmp	r3, #7
 80035e4:	d00a      	beq.n	80035fc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	334d      	adds	r3, #77	@ 0x4d
 80035f6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80035f8:	2b09      	cmp	r3, #9
 80035fa:	d170      	bne.n	80036de <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	1a9b      	subs	r3, r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	334d      	adds	r3, #77	@ 0x4d
 800360c:	2202      	movs	r2, #2
 800360e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	3344      	adds	r3, #68	@ 0x44
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	1c59      	adds	r1, r3, #1
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4403      	add	r3, r0
 8003630:	3344      	adds	r3, #68	@ 0x44
 8003632:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	3344      	adds	r3, #68	@ 0x44
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d914      	bls.n	8003674 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	3344      	adds	r3, #68	@ 0x44
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	334c      	adds	r3, #76	@ 0x4c
 800366e:	2204      	movs	r2, #4
 8003670:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003672:	e022      	b.n	80036ba <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	334c      	adds	r3, #76	@ 0x4c
 8003684:	2202      	movs	r2, #2
 8003686:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800369e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036a6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b4:	461a      	mov	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80036ba:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	334c      	adds	r3, #76	@ 0x4c
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	4619      	mov	r1, r3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f005 f872 	bl	80087bc <HAL_HCD_HC_NotifyURBChange_Callback>
 80036d8:	e002      	b.n	80036e0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80036da:	bf00      	nop
 80036dc:	e000      	b.n	80036e0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80036de:	bf00      	nop
  }
}
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b08a      	sub	sp, #40	@ 0x28
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 030f 	and.w	r3, r3, #15
 8003706:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	0c5b      	lsrs	r3, r3, #17
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800371a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d004      	beq.n	800372c <HCD_RXQLVL_IRQHandler+0x46>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b05      	cmp	r3, #5
 8003726:	f000 80b6 	beq.w	8003896 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800372a:	e0b7      	b.n	800389c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80b3 	beq.w	800389a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	332c      	adds	r3, #44	@ 0x2c
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 80a7 	beq.w	800389a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	3338      	adds	r3, #56	@ 0x38
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	18d1      	adds	r1, r2, r3
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4403      	add	r3, r0
 8003770:	3334      	adds	r3, #52	@ 0x34
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4299      	cmp	r1, r3
 8003776:	f200 8083 	bhi.w	8003880 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4613      	mov	r3, r2
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	332c      	adds	r3, #44	@ 0x2c
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	b292      	uxth	r2, r2
 8003794:	4619      	mov	r1, r3
 8003796:	f001 fe9c 	bl	80054d2 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4613      	mov	r3, r2
 80037a0:	011b      	lsls	r3, r3, #4
 80037a2:	1a9b      	subs	r3, r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	332c      	adds	r3, #44	@ 0x2c
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	18d1      	adds	r1, r2, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4403      	add	r3, r0
 80037be:	332c      	adds	r3, #44	@ 0x2c
 80037c0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	3338      	adds	r3, #56	@ 0x38
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	18d1      	adds	r1, r2, r3
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4613      	mov	r3, r2
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4403      	add	r3, r0
 80037e6:	3338      	adds	r3, #56	@ 0x38
 80037e8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	0cdb      	lsrs	r3, r3, #19
 80037fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037fe:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4613      	mov	r3, r2
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	3328      	adds	r3, #40	@ 0x28
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4293      	cmp	r3, r2
 8003818:	d13f      	bne.n	800389a <HCD_RXQLVL_IRQHandler+0x1b4>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d03c      	beq.n	800389a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003836:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800383e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	4413      	add	r3, r2
 8003848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800384c:	461a      	mov	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	333c      	adds	r3, #60	@ 0x3c
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	f083 0301 	eor.w	r3, r3, #1
 8003868:	b2d8      	uxtb	r0, r3
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4613      	mov	r3, r2
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	333c      	adds	r3, #60	@ 0x3c
 800387a:	4602      	mov	r2, r0
 800387c:	701a      	strb	r2, [r3, #0]
      break;
 800387e:	e00c      	b.n	800389a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	334c      	adds	r3, #76	@ 0x4c
 8003890:	2204      	movs	r2, #4
 8003892:	701a      	strb	r2, [r3, #0]
      break;
 8003894:	e001      	b.n	800389a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003896:	bf00      	nop
 8003898:	e000      	b.n	800389c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800389a:	bf00      	nop
  }
}
 800389c:	bf00      	nop
 800389e:	3728      	adds	r7, #40	@ 0x28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80038d0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d10b      	bne.n	80038f4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d102      	bne.n	80038ec <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f004 ff4c 	bl	8008784 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f043 0302 	orr.w	r3, r3, #2
 80038f2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d132      	bne.n	8003964 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f043 0308 	orr.w	r3, r3, #8
 8003904:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b04      	cmp	r3, #4
 800390e:	d126      	bne.n	800395e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7a5b      	ldrb	r3, [r3, #9]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d113      	bne.n	8003940 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800391e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003922:	d106      	bne.n	8003932 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2102      	movs	r1, #2
 800392a:	4618      	mov	r0, r3
 800392c:	f001 ff68 	bl	8005800 <USB_InitFSLSPClkSel>
 8003930:	e011      	b.n	8003956 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2101      	movs	r1, #1
 8003938:	4618      	mov	r0, r3
 800393a:	f001 ff61 	bl	8005800 <USB_InitFSLSPClkSel>
 800393e:	e00a      	b.n	8003956 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	79db      	ldrb	r3, [r3, #7]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d106      	bne.n	8003956 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800394e:	461a      	mov	r2, r3
 8003950:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003954:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f004 ff3e 	bl	80087d8 <HAL_HCD_PortEnabled_Callback>
 800395c:	e002      	b.n	8003964 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f004 ff48 	bl	80087f4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b20      	cmp	r3, #32
 800396c:	d103      	bne.n	8003976 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f043 0320 	orr.w	r3, r3, #32
 8003974:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800397c:	461a      	mov	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	6013      	str	r3, [r2, #0]
}
 8003982:	bf00      	nop
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e12b      	b.n	8003bf6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd f986 	bl	8000cc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2224      	movs	r2, #36	@ 0x24
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039f0:	f001 fa20 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 80039f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4a81      	ldr	r2, [pc, #516]	@ (8003c00 <HAL_I2C_Init+0x274>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d807      	bhi.n	8003a10 <HAL_I2C_Init+0x84>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a80      	ldr	r2, [pc, #512]	@ (8003c04 <HAL_I2C_Init+0x278>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	bf94      	ite	ls
 8003a08:	2301      	movls	r3, #1
 8003a0a:	2300      	movhi	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e006      	b.n	8003a1e <HAL_I2C_Init+0x92>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a7d      	ldr	r2, [pc, #500]	@ (8003c08 <HAL_I2C_Init+0x27c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	bf94      	ite	ls
 8003a18:	2301      	movls	r3, #1
 8003a1a:	2300      	movhi	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e0e7      	b.n	8003bf6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4a78      	ldr	r2, [pc, #480]	@ (8003c0c <HAL_I2C_Init+0x280>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	0c9b      	lsrs	r3, r3, #18
 8003a30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a6a      	ldr	r2, [pc, #424]	@ (8003c00 <HAL_I2C_Init+0x274>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d802      	bhi.n	8003a60 <HAL_I2C_Init+0xd4>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	e009      	b.n	8003a74 <HAL_I2C_Init+0xe8>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	4a69      	ldr	r2, [pc, #420]	@ (8003c10 <HAL_I2C_Init+0x284>)
 8003a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	3301      	adds	r3, #1
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a86:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	495c      	ldr	r1, [pc, #368]	@ (8003c00 <HAL_I2C_Init+0x274>)
 8003a90:	428b      	cmp	r3, r1
 8003a92:	d819      	bhi.n	8003ac8 <HAL_I2C_Init+0x13c>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	1e59      	subs	r1, r3, #1
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa2:	1c59      	adds	r1, r3, #1
 8003aa4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003aa8:	400b      	ands	r3, r1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_I2C_Init+0x138>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1e59      	subs	r1, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003abc:	3301      	adds	r3, #1
 8003abe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac2:	e051      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	e04f      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d111      	bne.n	8003af4 <HAL_I2C_Init+0x168>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	1e58      	subs	r0, r3, #1
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	440b      	add	r3, r1
 8003ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e012      	b.n	8003b1a <HAL_I2C_Init+0x18e>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	1e58      	subs	r0, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6859      	ldr	r1, [r3, #4]
 8003afc:	460b      	mov	r3, r1
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	0099      	lsls	r1, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2C_Init+0x196>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e022      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10e      	bne.n	8003b48 <HAL_I2C_Init+0x1bc>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1e58      	subs	r0, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6859      	ldr	r1, [r3, #4]
 8003b32:	460b      	mov	r3, r1
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	440b      	add	r3, r1
 8003b38:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b46:	e00f      	b.n	8003b68 <HAL_I2C_Init+0x1dc>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1e58      	subs	r0, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	0099      	lsls	r1, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	6809      	ldr	r1, [r1, #0]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6911      	ldr	r1, [r2, #16]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68d2      	ldr	r2, [r2, #12]
 8003ba2:	4311      	orrs	r1, r2
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	000186a0 	.word	0x000186a0
 8003c04:	001e847f 	.word	0x001e847f
 8003c08:	003d08ff 	.word	0x003d08ff
 8003c0c:	431bde83 	.word	0x431bde83
 8003c10:	10624dd3 	.word	0x10624dd3

08003c14 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e128      	b.n	8003e78 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a90      	ldr	r2, [pc, #576]	@ (8003e80 <HAL_I2S_Init+0x26c>)
 8003c3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fd f887 	bl	8000d54 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c5c:	f023 030f 	bic.w	r3, r3, #15
 8003c60:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2202      	movs	r2, #2
 8003c68:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d060      	beq.n	8003d34 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003c7a:	2310      	movs	r3, #16
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	e001      	b.n	8003c84 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003c80:	2320      	movs	r3, #32
 8003c82:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d802      	bhi.n	8003c92 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c92:	2001      	movs	r0, #1
 8003c94:	f001 f9c4 	bl	8005020 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c98:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca2:	d125      	bne.n	8003cf0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d010      	beq.n	8003cce <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	3305      	adds	r3, #5
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	e01f      	b.n	8003d0e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	3305      	adds	r3, #5
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	e00e      	b.n	8003d0e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	461a      	mov	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0a:	3305      	adds	r3, #5
 8003d0c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4a5c      	ldr	r2, [pc, #368]	@ (8003e84 <HAL_I2S_Init+0x270>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	08db      	lsrs	r3, r3, #3
 8003d18:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	e003      	b.n	8003d3c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003d34:	2302      	movs	r3, #2
 8003d36:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d902      	bls.n	8003d48 <HAL_I2S_Init+0x134>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2bff      	cmp	r3, #255	@ 0xff
 8003d46:	d907      	bls.n	8003d58 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d4c:	f043 0210 	orr.w	r2, r3, #16
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e08f      	b.n	8003e78 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	ea42 0103 	orr.w	r1, r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003d76:	f023 030f 	bic.w	r3, r3, #15
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6851      	ldr	r1, [r2, #4]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6892      	ldr	r2, [r2, #8]
 8003d82:	4311      	orrs	r1, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	68d2      	ldr	r2, [r2, #12]
 8003d88:	4311      	orrs	r1, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6992      	ldr	r2, [r2, #24]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d9a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d161      	bne.n	8003e68 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a38      	ldr	r2, [pc, #224]	@ (8003e88 <HAL_I2S_Init+0x274>)
 8003da8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a37      	ldr	r2, [pc, #220]	@ (8003e8c <HAL_I2S_Init+0x278>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d101      	bne.n	8003db8 <HAL_I2S_Init+0x1a4>
 8003db4:	4b36      	ldr	r3, [pc, #216]	@ (8003e90 <HAL_I2S_Init+0x27c>)
 8003db6:	e001      	b.n	8003dbc <HAL_I2S_Init+0x1a8>
 8003db8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	4932      	ldr	r1, [pc, #200]	@ (8003e8c <HAL_I2S_Init+0x278>)
 8003dc4:	428a      	cmp	r2, r1
 8003dc6:	d101      	bne.n	8003dcc <HAL_I2S_Init+0x1b8>
 8003dc8:	4a31      	ldr	r2, [pc, #196]	@ (8003e90 <HAL_I2S_Init+0x27c>)
 8003dca:	e001      	b.n	8003dd0 <HAL_I2S_Init+0x1bc>
 8003dcc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003dd0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003dd4:	f023 030f 	bic.w	r3, r3, #15
 8003dd8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a2b      	ldr	r2, [pc, #172]	@ (8003e8c <HAL_I2S_Init+0x278>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d101      	bne.n	8003de8 <HAL_I2S_Init+0x1d4>
 8003de4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e90 <HAL_I2S_Init+0x27c>)
 8003de6:	e001      	b.n	8003dec <HAL_I2S_Init+0x1d8>
 8003de8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dec:	2202      	movs	r2, #2
 8003dee:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a25      	ldr	r2, [pc, #148]	@ (8003e8c <HAL_I2S_Init+0x278>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <HAL_I2S_Init+0x1ea>
 8003dfa:	4b25      	ldr	r3, [pc, #148]	@ (8003e90 <HAL_I2S_Init+0x27c>)
 8003dfc:	e001      	b.n	8003e02 <HAL_I2S_Init+0x1ee>
 8003dfe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e0e:	d003      	beq.n	8003e18 <HAL_I2S_Init+0x204>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d103      	bne.n	8003e20 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003e18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	e001      	b.n	8003e24 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003e20:	2300      	movs	r3, #0
 8003e22:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003e42:	4313      	orrs	r3, r2
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	897b      	ldrh	r3, [r7, #10]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e50:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a0d      	ldr	r2, [pc, #52]	@ (8003e8c <HAL_I2S_Init+0x278>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d101      	bne.n	8003e60 <HAL_I2S_Init+0x24c>
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e90 <HAL_I2S_Init+0x27c>)
 8003e5e:	e001      	b.n	8003e64 <HAL_I2S_Init+0x250>
 8003e60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e64:	897a      	ldrh	r2, [r7, #10]
 8003e66:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3720      	adds	r7, #32
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	08003f8b 	.word	0x08003f8b
 8003e84:	cccccccd 	.word	0xcccccccd
 8003e88:	080040a1 	.word	0x080040a1
 8003e8c:	40003800 	.word	0x40003800
 8003e90:	40003400 	.word	0x40003400

08003e94 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003edc:	881a      	ldrh	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	1c9a      	adds	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10e      	bne.n	8003f24 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f14:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff ffb8 	bl	8003e94 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	b292      	uxth	r2, r2
 8003f40:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	1c9a      	adds	r2, r3, #2
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10e      	bne.n	8003f82 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f72:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ff93 	bl	8003ea8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b086      	sub	sp, #24
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d13a      	bne.n	800401c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d109      	bne.n	8003fc4 <I2S_IRQHandler+0x3a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fba:	2b40      	cmp	r3, #64	@ 0x40
 8003fbc:	d102      	bne.n	8003fc4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ffb4 	bl	8003f2c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fca:	2b40      	cmp	r3, #64	@ 0x40
 8003fcc:	d126      	bne.n	800401c <I2S_IRQHandler+0x92>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d11f      	bne.n	800401c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400e:	f043 0202 	orr.w	r2, r3, #2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff ff50 	bl	8003ebc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b03      	cmp	r3, #3
 8004026:	d136      	bne.n	8004096 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b02      	cmp	r3, #2
 8004030:	d109      	bne.n	8004046 <I2S_IRQHandler+0xbc>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800403c:	2b80      	cmp	r3, #128	@ 0x80
 800403e:	d102      	bne.n	8004046 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff ff45 	bl	8003ed0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b08      	cmp	r3, #8
 800404e:	d122      	bne.n	8004096 <I2S_IRQHandler+0x10c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b20      	cmp	r3, #32
 800405c:	d11b      	bne.n	8004096 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800406c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004088:	f043 0204 	orr.w	r2, r3, #4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff ff13 	bl	8003ebc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004096:	bf00      	nop
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a92      	ldr	r2, [pc, #584]	@ (8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80040ba:	4b92      	ldr	r3, [pc, #584]	@ (8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040bc:	e001      	b.n	80040c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80040be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a8b      	ldr	r2, [pc, #556]	@ (8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d101      	bne.n	80040dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80040d8:	4b8a      	ldr	r3, [pc, #552]	@ (8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040da:	e001      	b.n	80040e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80040dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ec:	d004      	beq.n	80040f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 8099 	bne.w	800422a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d107      	bne.n	8004112 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f925 	bl	800435c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b01      	cmp	r3, #1
 800411a:	d107      	bne.n	800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f9c8 	bl	80044bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004132:	2b40      	cmp	r3, #64	@ 0x40
 8004134:	d13a      	bne.n	80041ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d035      	beq.n	80041ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a6e      	ldr	r2, [pc, #440]	@ (8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800414a:	4b6e      	ldr	r3, [pc, #440]	@ (8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800414c:	e001      	b.n	8004152 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800414e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4969      	ldr	r1, [pc, #420]	@ (8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800415a:	428b      	cmp	r3, r1
 800415c:	d101      	bne.n	8004162 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800415e:	4b69      	ldr	r3, [pc, #420]	@ (8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004160:	e001      	b.n	8004166 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004162:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004166:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800416a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800417a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	f043 0202 	orr.w	r2, r3, #2
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff fe88 	bl	8003ebc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	f040 80c3 	bne.w	800433e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 80bd 	beq.w	800433e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a49      	ldr	r2, [pc, #292]	@ (8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d101      	bne.n	80041e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80041de:	4b49      	ldr	r3, [pc, #292]	@ (8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041e0:	e001      	b.n	80041e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80041e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4944      	ldr	r1, [pc, #272]	@ (8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ee:	428b      	cmp	r3, r1
 80041f0:	d101      	bne.n	80041f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80041f2:	4b44      	ldr	r3, [pc, #272]	@ (8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041f4:	e001      	b.n	80041fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80041f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004200:	2300      	movs	r3, #0
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421a:	f043 0204 	orr.w	r2, r3, #4
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff fe4a 	bl	8003ebc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004228:	e089      	b.n	800433e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b02      	cmp	r3, #2
 8004232:	d107      	bne.n	8004244 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f8be 	bl	80043c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b01      	cmp	r3, #1
 800424c:	d107      	bne.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f8fd 	bl	8004458 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004264:	2b40      	cmp	r3, #64	@ 0x40
 8004266:	d12f      	bne.n	80042c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d02a      	beq.n	80042c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004280:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a1e      	ldr	r2, [pc, #120]	@ (8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d101      	bne.n	8004290 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800428c:	4b1d      	ldr	r3, [pc, #116]	@ (8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800428e:	e001      	b.n	8004294 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004290:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4919      	ldr	r1, [pc, #100]	@ (8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800429c:	428b      	cmp	r3, r1
 800429e:	d101      	bne.n	80042a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80042a0:	4b18      	ldr	r3, [pc, #96]	@ (8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042a2:	e001      	b.n	80042a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80042a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042a8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ba:	f043 0202 	orr.w	r2, r3, #2
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff fdfa 	bl	8003ebc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d136      	bne.n	8004340 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d031      	beq.n	8004340 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a07      	ldr	r2, [pc, #28]	@ (8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d101      	bne.n	80042ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80042e6:	4b07      	ldr	r3, [pc, #28]	@ (8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042e8:	e001      	b.n	80042ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80042ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4902      	ldr	r1, [pc, #8]	@ (8004300 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042f6:	428b      	cmp	r3, r1
 80042f8:	d106      	bne.n	8004308 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80042fa:	4b02      	ldr	r3, [pc, #8]	@ (8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042fc:	e006      	b.n	800430c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80042fe:	bf00      	nop
 8004300:	40003800 	.word	0x40003800
 8004304:	40003400 	.word	0x40003400
 8004308:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800430c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004310:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004320:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432e:	f043 0204 	orr.w	r2, r3, #4
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff fdc0 	bl	8003ebc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800433c:	e000      	b.n	8004340 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800433e:	bf00      	nop
}
 8004340:	bf00      	nop
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	1c99      	adds	r1, r3, #2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6251      	str	r1, [r2, #36]	@ 0x24
 800436e:	881a      	ldrh	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d113      	bne.n	80043b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800439c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff ffc9 	bl	8004348 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	1c99      	adds	r1, r3, #2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6251      	str	r1, [r2, #36]	@ 0x24
 80043d2:	8819      	ldrh	r1, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004450 <I2SEx_TxISR_I2SExt+0x90>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d101      	bne.n	80043e2 <I2SEx_TxISR_I2SExt+0x22>
 80043de:	4b1d      	ldr	r3, [pc, #116]	@ (8004454 <I2SEx_TxISR_I2SExt+0x94>)
 80043e0:	e001      	b.n	80043e6 <I2SEx_TxISR_I2SExt+0x26>
 80043e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043e6:	460a      	mov	r2, r1
 80043e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d121      	bne.n	8004446 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a12      	ldr	r2, [pc, #72]	@ (8004450 <I2SEx_TxISR_I2SExt+0x90>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d101      	bne.n	8004410 <I2SEx_TxISR_I2SExt+0x50>
 800440c:	4b11      	ldr	r3, [pc, #68]	@ (8004454 <I2SEx_TxISR_I2SExt+0x94>)
 800440e:	e001      	b.n	8004414 <I2SEx_TxISR_I2SExt+0x54>
 8004410:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	490d      	ldr	r1, [pc, #52]	@ (8004450 <I2SEx_TxISR_I2SExt+0x90>)
 800441c:	428b      	cmp	r3, r1
 800441e:	d101      	bne.n	8004424 <I2SEx_TxISR_I2SExt+0x64>
 8004420:	4b0c      	ldr	r3, [pc, #48]	@ (8004454 <I2SEx_TxISR_I2SExt+0x94>)
 8004422:	e001      	b.n	8004428 <I2SEx_TxISR_I2SExt+0x68>
 8004424:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004428:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800442c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	d106      	bne.n	8004446 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff ff81 	bl	8004348 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40003800 	.word	0x40003800
 8004454:	40003400 	.word	0x40003400

08004458 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68d8      	ldr	r0, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446a:	1c99      	adds	r1, r3, #2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004470:	b282      	uxth	r2, r0
 8004472:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004478:	b29b      	uxth	r3, r3
 800447a:	3b01      	subs	r3, #1
 800447c:	b29a      	uxth	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d113      	bne.n	80044b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800449a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff ff4a 	bl	8004348 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a20      	ldr	r2, [pc, #128]	@ (800454c <I2SEx_RxISR_I2SExt+0x90>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <I2SEx_RxISR_I2SExt+0x16>
 80044ce:	4b20      	ldr	r3, [pc, #128]	@ (8004550 <I2SEx_RxISR_I2SExt+0x94>)
 80044d0:	e001      	b.n	80044d6 <I2SEx_RxISR_I2SExt+0x1a>
 80044d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044d6:	68d8      	ldr	r0, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044dc:	1c99      	adds	r1, r3, #2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80044e2:	b282      	uxth	r2, r0
 80044e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d121      	bne.n	8004542 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a12      	ldr	r2, [pc, #72]	@ (800454c <I2SEx_RxISR_I2SExt+0x90>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d101      	bne.n	800450c <I2SEx_RxISR_I2SExt+0x50>
 8004508:	4b11      	ldr	r3, [pc, #68]	@ (8004550 <I2SEx_RxISR_I2SExt+0x94>)
 800450a:	e001      	b.n	8004510 <I2SEx_RxISR_I2SExt+0x54>
 800450c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	490d      	ldr	r1, [pc, #52]	@ (800454c <I2SEx_RxISR_I2SExt+0x90>)
 8004518:	428b      	cmp	r3, r1
 800451a:	d101      	bne.n	8004520 <I2SEx_RxISR_I2SExt+0x64>
 800451c:	4b0c      	ldr	r3, [pc, #48]	@ (8004550 <I2SEx_RxISR_I2SExt+0x94>)
 800451e:	e001      	b.n	8004524 <I2SEx_RxISR_I2SExt+0x68>
 8004520:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004524:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004528:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ff03 	bl	8004348 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40003800 	.word	0x40003800
 8004550:	40003400 	.word	0x40003400

08004554 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e267      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d075      	beq.n	800465e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004572:	4b88      	ldr	r3, [pc, #544]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b04      	cmp	r3, #4
 800457c:	d00c      	beq.n	8004598 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457e:	4b85      	ldr	r3, [pc, #532]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004586:	2b08      	cmp	r3, #8
 8004588:	d112      	bne.n	80045b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458a:	4b82      	ldr	r3, [pc, #520]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004596:	d10b      	bne.n	80045b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	4b7e      	ldr	r3, [pc, #504]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d05b      	beq.n	800465c <HAL_RCC_OscConfig+0x108>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d157      	bne.n	800465c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e242      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b8:	d106      	bne.n	80045c8 <HAL_RCC_OscConfig+0x74>
 80045ba:	4b76      	ldr	r3, [pc, #472]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a75      	ldr	r2, [pc, #468]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e01d      	b.n	8004604 <HAL_RCC_OscConfig+0xb0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0x98>
 80045d2:	4b70      	ldr	r3, [pc, #448]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a6f      	ldr	r2, [pc, #444]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045dc:	6013      	str	r3, [r2, #0]
 80045de:	4b6d      	ldr	r3, [pc, #436]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6c      	ldr	r2, [pc, #432]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0xb0>
 80045ec:	4b69      	ldr	r3, [pc, #420]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a68      	ldr	r2, [pc, #416]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b66      	ldr	r3, [pc, #408]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a65      	ldr	r2, [pc, #404]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d013      	beq.n	8004634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fc fd92 	bl	8001134 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004614:	f7fc fd8e 	bl	8001134 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	@ 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e207      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	4b5b      	ldr	r3, [pc, #364]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0xc0>
 8004632:	e014      	b.n	800465e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004634:	f7fc fd7e 	bl	8001134 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800463c:	f7fc fd7a 	bl	8001134 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	@ 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e1f3      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464e:	4b51      	ldr	r3, [pc, #324]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0xe8>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d063      	beq.n	8004732 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800466a:	4b4a      	ldr	r3, [pc, #296]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004676:	4b47      	ldr	r3, [pc, #284]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800467e:	2b08      	cmp	r3, #8
 8004680:	d11c      	bne.n	80046bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004682:	4b44      	ldr	r3, [pc, #272]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d116      	bne.n	80046bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468e:	4b41      	ldr	r3, [pc, #260]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d005      	beq.n	80046a6 <HAL_RCC_OscConfig+0x152>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d001      	beq.n	80046a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e1c7      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4937      	ldr	r1, [pc, #220]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ba:	e03a      	b.n	8004732 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d020      	beq.n	8004706 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c4:	4b34      	ldr	r3, [pc, #208]	@ (8004798 <HAL_RCC_OscConfig+0x244>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fc fd33 	bl	8001134 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d2:	f7fc fd2f 	bl	8001134 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e1a8      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f0:	4b28      	ldr	r3, [pc, #160]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4925      	ldr	r1, [pc, #148]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004700:	4313      	orrs	r3, r2
 8004702:	600b      	str	r3, [r1, #0]
 8004704:	e015      	b.n	8004732 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004706:	4b24      	ldr	r3, [pc, #144]	@ (8004798 <HAL_RCC_OscConfig+0x244>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fc fd12 	bl	8001134 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004714:	f7fc fd0e 	bl	8001134 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e187      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004726:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d036      	beq.n	80047ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d016      	beq.n	8004774 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004746:	4b15      	ldr	r3, [pc, #84]	@ (800479c <HAL_RCC_OscConfig+0x248>)
 8004748:	2201      	movs	r2, #1
 800474a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fc fcf2 	bl	8001134 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004754:	f7fc fcee 	bl	8001134 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e167      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004766:	4b0b      	ldr	r3, [pc, #44]	@ (8004794 <HAL_RCC_OscConfig+0x240>)
 8004768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0x200>
 8004772:	e01b      	b.n	80047ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004774:	4b09      	ldr	r3, [pc, #36]	@ (800479c <HAL_RCC_OscConfig+0x248>)
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477a:	f7fc fcdb 	bl	8001134 <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004780:	e00e      	b.n	80047a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004782:	f7fc fcd7 	bl	8001134 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d907      	bls.n	80047a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e150      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
 8004794:	40023800 	.word	0x40023800
 8004798:	42470000 	.word	0x42470000
 800479c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a0:	4b88      	ldr	r3, [pc, #544]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1ea      	bne.n	8004782 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8097 	beq.w	80048e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ba:	2300      	movs	r3, #0
 80047bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047be:	4b81      	ldr	r3, [pc, #516]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10f      	bne.n	80047ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ca:	2300      	movs	r3, #0
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	4b7d      	ldr	r3, [pc, #500]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	4a7c      	ldr	r2, [pc, #496]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047da:	4b7a      	ldr	r3, [pc, #488]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ea:	4b77      	ldr	r3, [pc, #476]	@ (80049c8 <HAL_RCC_OscConfig+0x474>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d118      	bne.n	8004828 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f6:	4b74      	ldr	r3, [pc, #464]	@ (80049c8 <HAL_RCC_OscConfig+0x474>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a73      	ldr	r2, [pc, #460]	@ (80049c8 <HAL_RCC_OscConfig+0x474>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004802:	f7fc fc97 	bl	8001134 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480a:	f7fc fc93 	bl	8001134 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e10c      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481c:	4b6a      	ldr	r3, [pc, #424]	@ (80049c8 <HAL_RCC_OscConfig+0x474>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d106      	bne.n	800483e <HAL_RCC_OscConfig+0x2ea>
 8004830:	4b64      	ldr	r3, [pc, #400]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004834:	4a63      	ldr	r2, [pc, #396]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	6713      	str	r3, [r2, #112]	@ 0x70
 800483c:	e01c      	b.n	8004878 <HAL_RCC_OscConfig+0x324>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b05      	cmp	r3, #5
 8004844:	d10c      	bne.n	8004860 <HAL_RCC_OscConfig+0x30c>
 8004846:	4b5f      	ldr	r3, [pc, #380]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484a:	4a5e      	ldr	r2, [pc, #376]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 800484c:	f043 0304 	orr.w	r3, r3, #4
 8004850:	6713      	str	r3, [r2, #112]	@ 0x70
 8004852:	4b5c      	ldr	r3, [pc, #368]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004856:	4a5b      	ldr	r2, [pc, #364]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	6713      	str	r3, [r2, #112]	@ 0x70
 800485e:	e00b      	b.n	8004878 <HAL_RCC_OscConfig+0x324>
 8004860:	4b58      	ldr	r3, [pc, #352]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004864:	4a57      	ldr	r2, [pc, #348]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004866:	f023 0301 	bic.w	r3, r3, #1
 800486a:	6713      	str	r3, [r2, #112]	@ 0x70
 800486c:	4b55      	ldr	r3, [pc, #340]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004870:	4a54      	ldr	r2, [pc, #336]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004872:	f023 0304 	bic.w	r3, r3, #4
 8004876:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d015      	beq.n	80048ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004880:	f7fc fc58 	bl	8001134 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004886:	e00a      	b.n	800489e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fc fc54 	bl	8001134 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e0cb      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489e:	4b49      	ldr	r3, [pc, #292]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0ee      	beq.n	8004888 <HAL_RCC_OscConfig+0x334>
 80048aa:	e014      	b.n	80048d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ac:	f7fc fc42 	bl	8001134 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b2:	e00a      	b.n	80048ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b4:	f7fc fc3e 	bl	8001134 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d901      	bls.n	80048ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e0b5      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ca:	4b3e      	ldr	r3, [pc, #248]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1ee      	bne.n	80048b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d105      	bne.n	80048e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048dc:	4b39      	ldr	r3, [pc, #228]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	4a38      	ldr	r2, [pc, #224]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 80a1 	beq.w	8004a34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048f2:	4b34      	ldr	r3, [pc, #208]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d05c      	beq.n	80049b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d141      	bne.n	800498a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004906:	4b31      	ldr	r3, [pc, #196]	@ (80049cc <HAL_RCC_OscConfig+0x478>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7fc fc12 	bl	8001134 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004914:	f7fc fc0e 	bl	8001134 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e087      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004926:	4b27      	ldr	r3, [pc, #156]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69da      	ldr	r2, [r3, #28]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004940:	019b      	lsls	r3, r3, #6
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	3b01      	subs	r3, #1
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	491b      	ldr	r1, [pc, #108]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 8004958:	4313      	orrs	r3, r2
 800495a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800495c:	4b1b      	ldr	r3, [pc, #108]	@ (80049cc <HAL_RCC_OscConfig+0x478>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004962:	f7fc fbe7 	bl	8001134 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800496a:	f7fc fbe3 	bl	8001134 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e05c      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497c:	4b11      	ldr	r3, [pc, #68]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCC_OscConfig+0x416>
 8004988:	e054      	b.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800498a:	4b10      	ldr	r3, [pc, #64]	@ (80049cc <HAL_RCC_OscConfig+0x478>)
 800498c:	2200      	movs	r2, #0
 800498e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004990:	f7fc fbd0 	bl	8001134 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004998:	f7fc fbcc 	bl	8001134 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e045      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049aa:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <HAL_RCC_OscConfig+0x470>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x444>
 80049b6:	e03d      	b.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d107      	bne.n	80049d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e038      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40007000 	.word	0x40007000
 80049cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a40 <HAL_RCC_OscConfig+0x4ec>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d028      	beq.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d121      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d11a      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a00:	4013      	ands	r3, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d111      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d107      	bne.n	8004a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	40023800 	.word	0x40023800

08004a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0cc      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a58:	4b68      	ldr	r3, [pc, #416]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d90c      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a66:	4b65      	ldr	r3, [pc, #404]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b63      	ldr	r3, [pc, #396]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0b8      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d020      	beq.n	8004ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d005      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a98:	4b59      	ldr	r3, [pc, #356]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4a58      	ldr	r2, [pc, #352]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004aa2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ab0:	4b53      	ldr	r3, [pc, #332]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	4a52      	ldr	r2, [pc, #328]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004abc:	4b50      	ldr	r3, [pc, #320]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	494d      	ldr	r1, [pc, #308]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d044      	beq.n	8004b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d107      	bne.n	8004af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	4b47      	ldr	r3, [pc, #284]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d119      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e07f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d003      	beq.n	8004b02 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004afe:	2b03      	cmp	r3, #3
 8004b00:	d107      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b02:	4b3f      	ldr	r3, [pc, #252]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d109      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e06f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b12:	4b3b      	ldr	r3, [pc, #236]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e067      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b22:	4b37      	ldr	r3, [pc, #220]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f023 0203 	bic.w	r2, r3, #3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4934      	ldr	r1, [pc, #208]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b34:	f7fc fafe 	bl	8001134 <HAL_GetTick>
 8004b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3a:	e00a      	b.n	8004b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b3c:	f7fc fafa 	bl	8001134 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e04f      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b52:	4b2b      	ldr	r3, [pc, #172]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 020c 	and.w	r2, r3, #12
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d1eb      	bne.n	8004b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b64:	4b25      	ldr	r3, [pc, #148]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d20c      	bcs.n	8004b8c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b72:	4b22      	ldr	r3, [pc, #136]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7a:	4b20      	ldr	r3, [pc, #128]	@ (8004bfc <HAL_RCC_ClockConfig+0x1b8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d001      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e032      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b98:	4b19      	ldr	r3, [pc, #100]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4916      	ldr	r1, [pc, #88]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bb6:	4b12      	ldr	r3, [pc, #72]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	490e      	ldr	r1, [pc, #56]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bca:	f000 f821 	bl	8004c10 <HAL_RCC_GetSysClockFreq>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	091b      	lsrs	r3, r3, #4
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	490a      	ldr	r1, [pc, #40]	@ (8004c04 <HAL_RCC_ClockConfig+0x1c0>)
 8004bdc:	5ccb      	ldrb	r3, [r1, r3]
 8004bde:	fa22 f303 	lsr.w	r3, r2, r3
 8004be2:	4a09      	ldr	r2, [pc, #36]	@ (8004c08 <HAL_RCC_ClockConfig+0x1c4>)
 8004be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004be6:	4b09      	ldr	r3, [pc, #36]	@ (8004c0c <HAL_RCC_ClockConfig+0x1c8>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc fa5e 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40023c00 	.word	0x40023c00
 8004c00:	40023800 	.word	0x40023800
 8004c04:	08008e8c 	.word	0x08008e8c
 8004c08:	20000000 	.word	0x20000000
 8004c0c:	20000004 	.word	0x20000004

08004c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c14:	b094      	sub	sp, #80	@ 0x50
 8004c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c28:	4b79      	ldr	r3, [pc, #484]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 030c 	and.w	r3, r3, #12
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d00d      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0x40>
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	f200 80e1 	bhi.w	8004dfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_RCC_GetSysClockFreq+0x34>
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d003      	beq.n	8004c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c42:	e0db      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c44:	4b73      	ldr	r3, [pc, #460]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c48:	e0db      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c4a:	4b73      	ldr	r3, [pc, #460]	@ (8004e18 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c4e:	e0d8      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c50:	4b6f      	ldr	r3, [pc, #444]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d063      	beq.n	8004d2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c66:	4b6a      	ldr	r3, [pc, #424]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	099b      	lsrs	r3, r3, #6
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c82:	4622      	mov	r2, r4
 8004c84:	462b      	mov	r3, r5
 8004c86:	f04f 0000 	mov.w	r0, #0
 8004c8a:	f04f 0100 	mov.w	r1, #0
 8004c8e:	0159      	lsls	r1, r3, #5
 8004c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c94:	0150      	lsls	r0, r2, #5
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	1a51      	subs	r1, r2, r1
 8004c9e:	6139      	str	r1, [r7, #16]
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cb4:	4659      	mov	r1, fp
 8004cb6:	018b      	lsls	r3, r1, #6
 8004cb8:	4651      	mov	r1, sl
 8004cba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cbe:	4651      	mov	r1, sl
 8004cc0:	018a      	lsls	r2, r1, #6
 8004cc2:	4651      	mov	r1, sl
 8004cc4:	ebb2 0801 	subs.w	r8, r2, r1
 8004cc8:	4659      	mov	r1, fp
 8004cca:	eb63 0901 	sbc.w	r9, r3, r1
 8004cce:	f04f 0200 	mov.w	r2, #0
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ce2:	4690      	mov	r8, r2
 8004ce4:	4699      	mov	r9, r3
 8004ce6:	4623      	mov	r3, r4
 8004ce8:	eb18 0303 	adds.w	r3, r8, r3
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	462b      	mov	r3, r5
 8004cf0:	eb49 0303 	adc.w	r3, r9, r3
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d02:	4629      	mov	r1, r5
 8004d04:	024b      	lsls	r3, r1, #9
 8004d06:	4621      	mov	r1, r4
 8004d08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	024a      	lsls	r2, r1, #9
 8004d10:	4610      	mov	r0, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d16:	2200      	movs	r2, #0
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d20:	f7fb fa52 	bl	80001c8 <__aeabi_uldivmod>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4613      	mov	r3, r2
 8004d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d2c:	e058      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2e:	4b38      	ldr	r3, [pc, #224]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	099b      	lsrs	r3, r3, #6
 8004d34:	2200      	movs	r2, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	4611      	mov	r1, r2
 8004d3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d3e:	623b      	str	r3, [r7, #32]
 8004d40:	2300      	movs	r3, #0
 8004d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d48:	4642      	mov	r2, r8
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	f04f 0000 	mov.w	r0, #0
 8004d50:	f04f 0100 	mov.w	r1, #0
 8004d54:	0159      	lsls	r1, r3, #5
 8004d56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d5a:	0150      	lsls	r0, r2, #5
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4641      	mov	r1, r8
 8004d62:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d66:	4649      	mov	r1, r9
 8004d68:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d80:	ebb2 040a 	subs.w	r4, r2, sl
 8004d84:	eb63 050b 	sbc.w	r5, r3, fp
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	00eb      	lsls	r3, r5, #3
 8004d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d96:	00e2      	lsls	r2, r4, #3
 8004d98:	4614      	mov	r4, r2
 8004d9a:	461d      	mov	r5, r3
 8004d9c:	4643      	mov	r3, r8
 8004d9e:	18e3      	adds	r3, r4, r3
 8004da0:	603b      	str	r3, [r7, #0]
 8004da2:	464b      	mov	r3, r9
 8004da4:	eb45 0303 	adc.w	r3, r5, r3
 8004da8:	607b      	str	r3, [r7, #4]
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004db6:	4629      	mov	r1, r5
 8004db8:	028b      	lsls	r3, r1, #10
 8004dba:	4621      	mov	r1, r4
 8004dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	028a      	lsls	r2, r1, #10
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dca:	2200      	movs	r2, #0
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	61fa      	str	r2, [r7, #28]
 8004dd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dd4:	f7fb f9f8 	bl	80001c8 <__aeabi_uldivmod>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4613      	mov	r3, r2
 8004dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004de0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e10 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	0c1b      	lsrs	r3, r3, #16
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	3301      	adds	r3, #1
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004df0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dfa:	e002      	b.n	8004e02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dfc:	4b05      	ldr	r3, [pc, #20]	@ (8004e14 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3750      	adds	r7, #80	@ 0x50
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e0e:	bf00      	nop
 8004e10:	40023800 	.word	0x40023800
 8004e14:	00f42400 	.word	0x00f42400
 8004e18:	007a1200 	.word	0x007a1200

08004e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e20:	4b03      	ldr	r3, [pc, #12]	@ (8004e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e22:	681b      	ldr	r3, [r3, #0]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000000 	.word	0x20000000

08004e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e38:	f7ff fff0 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	0a9b      	lsrs	r3, r3, #10
 8004e44:	f003 0307 	and.w	r3, r3, #7
 8004e48:	4903      	ldr	r1, [pc, #12]	@ (8004e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e4a:	5ccb      	ldrb	r3, [r1, r3]
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	40023800 	.word	0x40023800
 8004e58:	08008e9c 	.word	0x08008e9c

08004e5c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d105      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d035      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e84:	4b62      	ldr	r3, [pc, #392]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e8a:	f7fc f953 	bl	8001134 <HAL_GetTick>
 8004e8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e90:	e008      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e92:	f7fc f94f 	bl	8001134 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e0b0      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ea4:	4b5b      	ldr	r3, [pc, #364]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f0      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	019a      	lsls	r2, r3, #6
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	071b      	lsls	r3, r3, #28
 8004ebc:	4955      	ldr	r1, [pc, #340]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ec4:	4b52      	ldr	r3, [pc, #328]	@ (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eca:	f7fc f933 	bl	8001134 <HAL_GetTick>
 8004ece:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ed2:	f7fc f92f 	bl	8001134 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e090      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ee4:	4b4b      	ldr	r3, [pc, #300]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8083 	beq.w	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	4b44      	ldr	r3, [pc, #272]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	4a43      	ldr	r2, [pc, #268]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f0e:	4b41      	ldr	r3, [pc, #260]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a3e      	ldr	r2, [pc, #248]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f26:	f7fc f905 	bl	8001134 <HAL_GetTick>
 8004f2a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2e:	f7fc f901 	bl	8001134 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e062      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004f40:	4b35      	ldr	r3, [pc, #212]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f4c:	4b31      	ldr	r3, [pc, #196]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f54:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d02f      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d028      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f72:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f74:	4b29      	ldr	r3, [pc, #164]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f7a:	4b28      	ldr	r3, [pc, #160]	@ (800501c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f80:	4a24      	ldr	r2, [pc, #144]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f86:	4b23      	ldr	r3, [pc, #140]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d114      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f92:	f7fc f8cf 	bl	8001134 <HAL_GetTick>
 8004f96:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f98:	e00a      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9a:	f7fc f8cb 	bl	8001134 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e02a      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb0:	4b18      	ldr	r3, [pc, #96]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0ee      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fc8:	d10d      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004fca:	4b12      	ldr	r3, [pc, #72]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fde:	490d      	ldr	r1, [pc, #52]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	608b      	str	r3, [r1, #8]
 8004fe4:	e005      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	4a0a      	ldr	r2, [pc, #40]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ff0:	6093      	str	r3, [r2, #8]
 8004ff2:	4b08      	ldr	r3, [pc, #32]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffe:	4905      	ldr	r1, [pc, #20]	@ (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005000:	4313      	orrs	r3, r2
 8005002:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	42470068 	.word	0x42470068
 8005014:	40023800 	.word	0x40023800
 8005018:	40007000 	.word	0x40007000
 800501c:	42470e40 	.word	0x42470e40

08005020 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d13f      	bne.n	80050be <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800503e:	4b24      	ldr	r3, [pc, #144]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005046:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d006      	beq.n	800505c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005054:	d12f      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005056:	4b1f      	ldr	r3, [pc, #124]	@ (80050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005058:	617b      	str	r3, [r7, #20]
          break;
 800505a:	e02f      	b.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800505c:	4b1c      	ldr	r3, [pc, #112]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005064:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005068:	d108      	bne.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800506a:	4b19      	ldr	r3, [pc, #100]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005072:	4a19      	ldr	r2, [pc, #100]	@ (80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	e007      	b.n	800508c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800507c:	4b14      	ldr	r3, [pc, #80]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005084:	4a15      	ldr	r2, [pc, #84]	@ (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005086:	fbb2 f3f3 	udiv	r3, r2, r3
 800508a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800508c:	4b10      	ldr	r3, [pc, #64]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800508e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005092:	099b      	lsrs	r3, r3, #6
 8005094:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	fb02 f303 	mul.w	r3, r2, r3
 800509e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80050a0:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80050a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050a6:	0f1b      	lsrs	r3, r3, #28
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b2:	617b      	str	r3, [r7, #20]
          break;
 80050b4:	e002      	b.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
          break;
 80050ba:	bf00      	nop
        }
      }
      break;
 80050bc:	e000      	b.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80050be:	bf00      	nop
    }
  }
  return frequency;
 80050c0:	697b      	ldr	r3, [r7, #20]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	371c      	adds	r7, #28
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40023800 	.word	0x40023800
 80050d4:	00bb8000 	.word	0x00bb8000
 80050d8:	007a1200 	.word	0x007a1200
 80050dc:	00f42400 	.word	0x00f42400

080050e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e07b      	b.n	80051ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d108      	bne.n	800510c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005102:	d009      	beq.n	8005118 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	61da      	str	r2, [r3, #28]
 800510a:	e005      	b.n	8005118 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fb fe8e 	bl	8000e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800514e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519c:	ea42 0103 	orr.w	r1, r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	0c1b      	lsrs	r3, r3, #16
 80051b6:	f003 0104 	and.w	r1, r3, #4
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051be:	f003 0210 	and.w	r2, r3, #16
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69da      	ldr	r2, [r3, #28]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051f2:	b084      	sub	sp, #16
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	f107 001c 	add.w	r0, r7, #28
 8005200:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005204:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005208:	2b01      	cmp	r3, #1
 800520a:	d123      	bne.n	8005254 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005210:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005234:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005238:	2b01      	cmp	r3, #1
 800523a:	d105      	bne.n	8005248 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f9dc 	bl	8005606 <USB_CoreReset>
 800524e:	4603      	mov	r3, r0
 8005250:	73fb      	strb	r3, [r7, #15]
 8005252:	e01b      	b.n	800528c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f9d0 	bl	8005606 <USB_CoreReset>
 8005266:	4603      	mov	r3, r0
 8005268:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800526a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800526e:	2b00      	cmp	r3, #0
 8005270:	d106      	bne.n	8005280 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005276:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	639a      	str	r2, [r3, #56]	@ 0x38
 800527e:	e005      	b.n	800528c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800528c:	7fbb      	ldrb	r3, [r7, #30]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d10b      	bne.n	80052aa <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f043 0206 	orr.w	r2, r3, #6
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f043 0220 	orr.w	r2, r3, #32
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052b6:	b004      	add	sp, #16
 80052b8:	4770      	bx	lr

080052ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f043 0201 	orr.w	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f023 0201 	bic.w	r2, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b084      	sub	sp, #16
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	460b      	mov	r3, r1
 8005308:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d115      	bne.n	800534c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800532c:	200a      	movs	r0, #10
 800532e:	f7fb ff0d 	bl	800114c <HAL_Delay>
      ms += 10U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	330a      	adds	r3, #10
 8005336:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f956 	bl	80055ea <USB_GetMode>
 800533e:	4603      	mov	r3, r0
 8005340:	2b01      	cmp	r3, #1
 8005342:	d01e      	beq.n	8005382 <USB_SetCurrentMode+0x84>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2bc7      	cmp	r3, #199	@ 0xc7
 8005348:	d9f0      	bls.n	800532c <USB_SetCurrentMode+0x2e>
 800534a:	e01a      	b.n	8005382 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d115      	bne.n	800537e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800535e:	200a      	movs	r0, #10
 8005360:	f7fb fef4 	bl	800114c <HAL_Delay>
      ms += 10U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	330a      	adds	r3, #10
 8005368:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f93d 	bl	80055ea <USB_GetMode>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <USB_SetCurrentMode+0x84>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2bc7      	cmp	r3, #199	@ 0xc7
 800537a:	d9f0      	bls.n	800535e <USB_SetCurrentMode+0x60>
 800537c:	e001      	b.n	8005382 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e005      	b.n	800538e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2bc8      	cmp	r3, #200	@ 0xc8
 8005386:	d101      	bne.n	800538c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053b0:	d901      	bls.n	80053b6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e01b      	b.n	80053ee <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	daf2      	bge.n	80053a4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	019b      	lsls	r3, r3, #6
 80053c6:	f043 0220 	orr.w	r2, r3, #32
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3301      	adds	r3, #1
 80053d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053da:	d901      	bls.n	80053e0 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e006      	b.n	80053ee <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d0f0      	beq.n	80053ce <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3301      	adds	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005412:	d901      	bls.n	8005418 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e018      	b.n	800544a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	daf2      	bge.n	8005406 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2210      	movs	r2, #16
 8005428:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	3301      	adds	r3, #1
 800542e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005436:	d901      	bls.n	800543c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e006      	b.n	800544a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	2b10      	cmp	r3, #16
 8005446:	d0f0      	beq.n	800542a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005456:	b480      	push	{r7}
 8005458:	b089      	sub	sp, #36	@ 0x24
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	4611      	mov	r1, r2
 8005462:	461a      	mov	r2, r3
 8005464:	460b      	mov	r3, r1
 8005466:	71fb      	strb	r3, [r7, #7]
 8005468:	4613      	mov	r3, r2
 800546a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005474:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005478:	2b00      	cmp	r3, #0
 800547a:	d123      	bne.n	80054c4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800547c:	88bb      	ldrh	r3, [r7, #4]
 800547e:	3303      	adds	r3, #3
 8005480:	089b      	lsrs	r3, r3, #2
 8005482:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005484:	2300      	movs	r3, #0
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	e018      	b.n	80054bc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	031a      	lsls	r2, r3, #12
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	4413      	add	r3, r2
 8005492:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005496:	461a      	mov	r2, r3
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	3301      	adds	r3, #1
 80054a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	3301      	adds	r3, #1
 80054a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	3301      	adds	r3, #1
 80054ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	3301      	adds	r3, #1
 80054b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	3301      	adds	r3, #1
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d3e2      	bcc.n	800548a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3724      	adds	r7, #36	@ 0x24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b08b      	sub	sp, #44	@ 0x2c
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	4613      	mov	r3, r2
 80054de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80054e8:	88fb      	ldrh	r3, [r7, #6]
 80054ea:	089b      	lsrs	r3, r3, #2
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80054f0:	88fb      	ldrh	r3, [r7, #6]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80054f8:	2300      	movs	r3, #0
 80054fa:	623b      	str	r3, [r7, #32]
 80054fc:	e014      	b.n	8005528 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	601a      	str	r2, [r3, #0]
    pDest++;
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	3301      	adds	r3, #1
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	3301      	adds	r3, #1
 8005514:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	3301      	adds	r3, #1
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	3301      	adds	r3, #1
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	3301      	adds	r3, #1
 8005526:	623b      	str	r3, [r7, #32]
 8005528:	6a3a      	ldr	r2, [r7, #32]
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	429a      	cmp	r2, r3
 800552e:	d3e6      	bcc.n	80054fe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005530:	8bfb      	ldrh	r3, [r7, #30]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d01e      	beq.n	8005574 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005536:	2300      	movs	r3, #0
 8005538:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005540:	461a      	mov	r2, r3
 8005542:	f107 0310 	add.w	r3, r7, #16
 8005546:	6812      	ldr	r2, [r2, #0]
 8005548:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	fa22 f303 	lsr.w	r3, r2, r3
 8005556:	b2da      	uxtb	r2, r3
 8005558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555a:	701a      	strb	r2, [r3, #0]
      i++;
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	3301      	adds	r3, #1
 8005560:	623b      	str	r3, [r7, #32]
      pDest++;
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	3301      	adds	r3, #1
 8005566:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005568:	8bfb      	ldrh	r3, [r7, #30]
 800556a:	3b01      	subs	r3, #1
 800556c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800556e:	8bfb      	ldrh	r3, [r7, #30]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1ea      	bne.n	800554a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005576:	4618      	mov	r0, r3
 8005578:	372c      	adds	r7, #44	@ 0x2c
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4013      	ands	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800559a:	68fb      	ldr	r3, [r7, #12]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	4013      	ands	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055dc:	68bb      	ldr	r3, [r7, #8]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f003 0301 	and.w	r3, r3, #1
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	3301      	adds	r3, #1
 8005616:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800561e:	d901      	bls.n	8005624 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e022      	b.n	800566a <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	daf2      	bge.n	8005612 <USB_CoreReset+0xc>

  count = 10U;
 800562c:	230a      	movs	r3, #10
 800562e:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005630:	e002      	b.n	8005638 <USB_CoreReset+0x32>
  {
    count--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3b01      	subs	r3, #1
 8005636:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f9      	bne.n	8005632 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f043 0201 	orr.w	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3301      	adds	r3, #1
 800564e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005656:	d901      	bls.n	800565c <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e006      	b.n	800566a <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b01      	cmp	r3, #1
 8005666:	d0f0      	beq.n	800564a <USB_CoreReset+0x44>

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005678:	b084      	sub	sp, #16
 800567a:	b580      	push	{r7, lr}
 800567c:	b086      	sub	sp, #24
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005686:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005698:	461a      	mov	r2, r3
 800569a:	2300      	movs	r3, #0
 800569c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d119      	bne.n	8005702 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80056ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d10a      	bne.n	80056ec <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80056e4:	f043 0304 	orr.w	r3, r3, #4
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	e014      	b.n	8005716 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80056fa:	f023 0304 	bic.w	r3, r3, #4
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	e009      	b.n	8005716 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005710:	f023 0304 	bic.w	r3, r3, #4
 8005714:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005716:	2110      	movs	r1, #16
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff fe3c 	bl	8005396 <USB_FlushTxFifo>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff fe66 	bl	80053fa <USB_FlushRxFifo>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005738:	2300      	movs	r3, #0
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	e015      	b.n	800576a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4413      	add	r3, r2
 8005746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800574a:	461a      	mov	r2, r3
 800574c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005750:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	4413      	add	r3, r2
 800575a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800575e:	461a      	mov	r2, r3
 8005760:	2300      	movs	r3, #0
 8005762:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	3301      	adds	r3, #1
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800576e:	461a      	mov	r2, r3
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	4293      	cmp	r3, r2
 8005774:	d3e3      	bcc.n	800573e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005782:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a18      	ldr	r2, [pc, #96]	@ (80057e8 <USB_HostInit+0x170>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d10b      	bne.n	80057a4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005792:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a15      	ldr	r2, [pc, #84]	@ (80057ec <USB_HostInit+0x174>)
 8005798:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a14      	ldr	r2, [pc, #80]	@ (80057f0 <USB_HostInit+0x178>)
 800579e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80057a2:	e009      	b.n	80057b8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2280      	movs	r2, #128	@ 0x80
 80057a8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a11      	ldr	r2, [pc, #68]	@ (80057f4 <USB_HostInit+0x17c>)
 80057ae:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a11      	ldr	r2, [pc, #68]	@ (80057f8 <USB_HostInit+0x180>)
 80057b4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d105      	bne.n	80057cc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	f043 0210 	orr.w	r2, r3, #16
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	699a      	ldr	r2, [r3, #24]
 80057d0:	4b0a      	ldr	r3, [pc, #40]	@ (80057fc <USB_HostInit+0x184>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80057d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057e4:	b004      	add	sp, #16
 80057e6:	4770      	bx	lr
 80057e8:	40040000 	.word	0x40040000
 80057ec:	01000200 	.word	0x01000200
 80057f0:	00e00300 	.word	0x00e00300
 80057f4:	00600080 	.word	0x00600080
 80057f8:	004000e0 	.word	0x004000e0
 80057fc:	a3200008 	.word	0xa3200008

08005800 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	68f9      	ldr	r1, [r7, #12]
 8005834:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005838:	4313      	orrs	r3, r2
 800583a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d107      	bne.n	8005852 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005848:	461a      	mov	r2, r3
 800584a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800584e:	6053      	str	r3, [r2, #4]
 8005850:	e00c      	b.n	800586c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d107      	bne.n	8005868 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800585e:	461a      	mov	r2, r3
 8005860:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005864:	6053      	str	r3, [r2, #4]
 8005866:	e001      	b.n	800586c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800589a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80058a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058a8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80058aa:	2064      	movs	r0, #100	@ 0x64
 80058ac:	f7fb fc4e 	bl	800114c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80058b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058bc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80058be:	200a      	movs	r0, #10
 80058c0:	f7fb fc44 	bl	800114c <HAL_Delay>

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b085      	sub	sp, #20
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	460b      	mov	r3, r1
 80058d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80058f2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d109      	bne.n	8005912 <USB_DriveVbus+0x44>
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d106      	bne.n	8005912 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800590c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005910:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800591c:	d109      	bne.n	8005932 <USB_DriveVbus+0x64>
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d106      	bne.n	8005932 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800592c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005930:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	0c5b      	lsrs	r3, r3, #17
 800595e:	f003 0303 	and.w	r3, r3, #3
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800596e:	b480      	push	{r7}
 8005970:	b085      	sub	sp, #20
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	b29b      	uxth	r3, r3
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	4608      	mov	r0, r1
 800599a:	4611      	mov	r1, r2
 800599c:	461a      	mov	r2, r3
 800599e:	4603      	mov	r3, r0
 80059a0:	70fb      	strb	r3, [r7, #3]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70bb      	strb	r3, [r7, #2]
 80059a6:	4613      	mov	r3, r2
 80059a8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059be:	461a      	mov	r2, r3
 80059c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059c4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80059c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d87c      	bhi.n	8005ac8 <USB_HC_Init+0x138>
 80059ce:	a201      	add	r2, pc, #4	@ (adr r2, 80059d4 <USB_HC_Init+0x44>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	080059e5 	.word	0x080059e5
 80059d8:	08005a8b 	.word	0x08005a8b
 80059dc:	080059e5 	.word	0x080059e5
 80059e0:	08005a4d 	.word	0x08005a4d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059f0:	461a      	mov	r2, r3
 80059f2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80059f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80059f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	da10      	bge.n	8005a22 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	78fa      	ldrb	r2, [r7, #3]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a1e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005a20:	e055      	b.n	8005ace <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a6f      	ldr	r2, [pc, #444]	@ (8005be4 <USB_HC_Init+0x254>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d151      	bne.n	8005ace <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005a2a:	78fb      	ldrb	r3, [r7, #3]
 8005a2c:	015a      	lsls	r2, r3, #5
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	4413      	add	r3, r2
 8005a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	78fa      	ldrb	r2, [r7, #3]
 8005a3a:	0151      	lsls	r1, r2, #5
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	440a      	add	r2, r1
 8005a40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a44:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005a48:	60d3      	str	r3, [r2, #12]
      break;
 8005a4a:	e040      	b.n	8005ace <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a58:	461a      	mov	r2, r3
 8005a5a:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005a5e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a60:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	da34      	bge.n	8005ad2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a68:	78fb      	ldrb	r3, [r7, #3]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a86:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005a88:	e023      	b.n	8005ad2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a8a:	78fb      	ldrb	r3, [r7, #3]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a96:	461a      	mov	r2, r3
 8005a98:	f240 2325 	movw	r3, #549	@ 0x225
 8005a9c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a9e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	da17      	bge.n	8005ad6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	78fa      	ldrb	r2, [r7, #3]
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ac0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005ac4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ac6:	e006      	b.n	8005ad6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	77fb      	strb	r3, [r7, #31]
      break;
 8005acc:	e004      	b.n	8005ad8 <USB_HC_Init+0x148>
      break;
 8005ace:	bf00      	nop
 8005ad0:	e002      	b.n	8005ad8 <USB_HC_Init+0x148>
      break;
 8005ad2:	bf00      	nop
 8005ad4:	e000      	b.n	8005ad8 <USB_HC_Init+0x148>
      break;
 8005ad6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	015a      	lsls	r2, r3, #5
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4413      	add	r3, r2
 8005ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005aea:	78fb      	ldrb	r3, [r7, #3]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b04:	f043 0302 	orr.w	r3, r3, #2
 8005b08:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	2101      	movs	r1, #1
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	6939      	ldr	r1, [r7, #16]
 8005b20:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005b24:	4313      	orrs	r3, r2
 8005b26:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b34:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	da03      	bge.n	8005b44 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	e001      	b.n	8005b48 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f7ff fef9 	bl	8005940 <USB_GetHostSpeed>
 8005b4e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b50:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d106      	bne.n	8005b66 <USB_HC_Init+0x1d6>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d003      	beq.n	8005b66 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005b62:	617b      	str	r3, [r7, #20]
 8005b64:	e001      	b.n	8005b6a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b6a:	787b      	ldrb	r3, [r7, #1]
 8005b6c:	059b      	lsls	r3, r3, #22
 8005b6e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b72:	78bb      	ldrb	r3, [r7, #2]
 8005b74:	02db      	lsls	r3, r3, #11
 8005b76:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b7a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b7c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005b80:	049b      	lsls	r3, r3, #18
 8005b82:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b86:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005b88:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b8e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005ba4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ba8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005baa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d003      	beq.n	8005bba <USB_HC_Init+0x22a>
 8005bb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d10f      	bne.n	8005bda <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	015a      	lsls	r2, r3, #5
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	78fa      	ldrb	r2, [r7, #3]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005bd8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005bda:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3720      	adds	r7, #32
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40040000 	.word	0x40040000

08005be8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08c      	sub	sp, #48	@ 0x30
 8005bec:	af02      	add	r7, sp, #8
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005c00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c04:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4a5d      	ldr	r2, [pc, #372]	@ (8005d80 <USB_HC_StartXfer+0x198>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d12f      	bne.n	8005c6e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005c0e:	79fb      	ldrb	r3, [r7, #7]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d11c      	bne.n	8005c4e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	7c9b      	ldrb	r3, [r3, #18]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <USB_HC_StartXfer+0x3c>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	7c9b      	ldrb	r3, [r3, #18]
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d124      	bne.n	8005c6e <USB_HC_StartXfer+0x86>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	799b      	ldrb	r3, [r3, #6]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d120      	bne.n	8005c6e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	69fa      	ldr	r2, [r7, #28]
 8005c3c:	0151      	lsls	r1, r2, #5
 8005c3e:	6a3a      	ldr	r2, [r7, #32]
 8005c40:	440a      	add	r2, r1
 8005c42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c4a:	60d3      	str	r3, [r2, #12]
 8005c4c:	e00f      	b.n	8005c6e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	791b      	ldrb	r3, [r3, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <USB_HC_StartXfer+0x86>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	795b      	ldrb	r3, [r3, #5]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d107      	bne.n	8005c6e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	4619      	mov	r1, r3
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f000 fb6b 	bl	8006340 <USB_DoPing>
        return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e232      	b.n	80060d4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	799b      	ldrb	r3, [r3, #6]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d158      	bne.n	8005d28 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005c76:	2301      	movs	r3, #1
 8005c78:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	78db      	ldrb	r3, [r3, #3]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005c82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	8a92      	ldrh	r2, [r2, #20]
 8005c88:	fb03 f202 	mul.w	r2, r3, r2
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	61da      	str	r2, [r3, #28]
 8005c90:	e07c      	b.n	8005d8c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	7c9b      	ldrb	r3, [r3, #18]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d130      	bne.n	8005cfc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005ca0:	d918      	bls.n	8005cd4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	8a9b      	ldrh	r3, [r3, #20]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	69da      	ldr	r2, [r3, #28]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d003      	beq.n	8005cc4 <USB_HC_StartXfer+0xdc>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d103      	bne.n	8005ccc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	60da      	str	r2, [r3, #12]
 8005cca:	e05f      	b.n	8005d8c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	60da      	str	r2, [r3, #12]
 8005cd2:	e05b      	b.n	8005d8c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	6a1a      	ldr	r2, [r3, #32]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d007      	beq.n	8005cf4 <USB_HC_StartXfer+0x10c>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d003      	beq.n	8005cf4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2204      	movs	r2, #4
 8005cf0:	60da      	str	r2, [r3, #12]
 8005cf2:	e04b      	b.n	8005d8c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2203      	movs	r2, #3
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e047      	b.n	8005d8c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005cfc:	79fb      	ldrb	r3, [r7, #7]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d10d      	bne.n	8005d1e <USB_HC_StartXfer+0x136>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	8a92      	ldrh	r2, [r2, #20]
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d907      	bls.n	8005d1e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	8a92      	ldrh	r2, [r2, #20]
 8005d14:	fb03 f202 	mul.w	r2, r3, r2
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	61da      	str	r2, [r3, #28]
 8005d1c:	e036      	b.n	8005d8c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6a1a      	ldr	r2, [r3, #32]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	61da      	str	r2, [r3, #28]
 8005d26:	e031      	b.n	8005d8c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d018      	beq.n	8005d62 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	8a92      	ldrh	r2, [r2, #20]
 8005d38:	4413      	add	r3, r2
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	8a92      	ldrh	r2, [r2, #20]
 8005d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d44:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005d46:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005d48:	8b7b      	ldrh	r3, [r7, #26]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d90b      	bls.n	8005d66 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005d4e:	8b7b      	ldrh	r3, [r7, #26]
 8005d50:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	8a92      	ldrh	r2, [r2, #20]
 8005d58:	fb03 f202 	mul.w	r2, r3, r2
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	61da      	str	r2, [r3, #28]
 8005d60:	e001      	b.n	8005d66 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005d62:	2301      	movs	r3, #1
 8005d64:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	78db      	ldrb	r3, [r3, #3]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	8a92      	ldrh	r2, [r2, #20]
 8005d74:	fb03 f202 	mul.w	r2, r3, r2
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	61da      	str	r2, [r3, #28]
 8005d7c:	e006      	b.n	8005d8c <USB_HC_StartXfer+0x1a4>
 8005d7e:	bf00      	nop
 8005d80:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	6a1a      	ldr	r2, [r3, #32]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	69db      	ldr	r3, [r3, #28]
 8005d90:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d96:	04d9      	lsls	r1, r3, #19
 8005d98:	4ba3      	ldr	r3, [pc, #652]	@ (8006028 <USB_HC_StartXfer+0x440>)
 8005d9a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d9c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	7d9b      	ldrb	r3, [r3, #22]
 8005da2:	075b      	lsls	r3, r3, #29
 8005da4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005da8:	69f9      	ldr	r1, [r7, #28]
 8005daa:	0148      	lsls	r0, r1, #5
 8005dac:	6a39      	ldr	r1, [r7, #32]
 8005dae:	4401      	add	r1, r0
 8005db0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005db4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005db6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	6999      	ldr	r1, [r3, #24]
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dce:	460a      	mov	r2, r1
 8005dd0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	bf0c      	ite	eq
 8005de2:	2301      	moveq	r3, #1
 8005de4:	2300      	movne	r3, #0
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69fa      	ldr	r2, [r7, #28]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e04:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e08:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	7e7b      	ldrb	r3, [r7, #25]
 8005e1a:	075b      	lsls	r3, r3, #29
 8005e1c:	69f9      	ldr	r1, [r7, #28]
 8005e1e:	0148      	lsls	r0, r1, #5
 8005e20:	6a39      	ldr	r1, [r7, #32]
 8005e22:	4401      	add	r1, r0
 8005e24:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	799b      	ldrb	r3, [r3, #6]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	f040 80c3 	bne.w	8005fbc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	7c5b      	ldrb	r3, [r3, #17]
 8005e3a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005e40:	4313      	orrs	r3, r2
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	0151      	lsls	r1, r2, #5
 8005e46:	6a3a      	ldr	r2, [r7, #32]
 8005e48:	440a      	add	r2, r1
 8005e4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005e4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005e52:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	0151      	lsls	r1, r2, #5
 8005e66:	6a3a      	ldr	r2, [r7, #32]
 8005e68:	440a      	add	r2, r1
 8005e6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e6e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005e72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	79db      	ldrb	r3, [r3, #7]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d123      	bne.n	8005ec4 <USB_HC_StartXfer+0x2dc>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	78db      	ldrb	r3, [r3, #3]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d11f      	bne.n	8005ec4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	6a3a      	ldr	r2, [r7, #32]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	6a3a      	ldr	r2, [r7, #32]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ec2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	7c9b      	ldrb	r3, [r3, #18]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d003      	beq.n	8005ed4 <USB_HC_StartXfer+0x2ec>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	7c9b      	ldrb	r3, [r3, #18]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d117      	bne.n	8005f04 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d113      	bne.n	8005f04 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	78db      	ldrb	r3, [r3, #3]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d10f      	bne.n	8005f04 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	6a3a      	ldr	r2, [r7, #32]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f02:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	7c9b      	ldrb	r3, [r3, #18]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d162      	bne.n	8005fd2 <USB_HC_StartXfer+0x3ea>
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	78db      	ldrb	r3, [r3, #3]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d15e      	bne.n	8005fd2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d858      	bhi.n	8005fd0 <USB_HC_StartXfer+0x3e8>
 8005f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f24 <USB_HC_StartXfer+0x33c>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f35 	.word	0x08005f35
 8005f28:	08005f57 	.word	0x08005f57
 8005f2c:	08005f79 	.word	0x08005f79
 8005f30:	08005f9b 	.word	0x08005f9b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	0151      	lsls	r1, r2, #5
 8005f46:	6a3a      	ldr	r2, [r7, #32]
 8005f48:	440a      	add	r2, r1
 8005f4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f52:	6053      	str	r3, [r2, #4]
          break;
 8005f54:	e03d      	b.n	8005fd2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	69fa      	ldr	r2, [r7, #28]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	6a3a      	ldr	r2, [r7, #32]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f70:	f043 030e 	orr.w	r3, r3, #14
 8005f74:	6053      	str	r3, [r2, #4]
          break;
 8005f76:	e02c      	b.n	8005fd2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	6a3a      	ldr	r2, [r7, #32]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f96:	6053      	str	r3, [r2, #4]
          break;
 8005f98:	e01b      	b.n	8005fd2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	6a3a      	ldr	r2, [r7, #32]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fb8:	6053      	str	r3, [r2, #4]
          break;
 8005fba:	e00a      	b.n	8005fd2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc8:	461a      	mov	r2, r3
 8005fca:	2300      	movs	r3, #0
 8005fcc:	6053      	str	r3, [r2, #4]
 8005fce:	e000      	b.n	8005fd2 <USB_HC_StartXfer+0x3ea>
          break;
 8005fd0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005fe8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	78db      	ldrb	r3, [r3, #3]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	e003      	b.n	8006004 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006002:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800600a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006018:	461a      	mov	r2, r3
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	e055      	b.n	80060d4 <USB_HC_StartXfer+0x4ec>
 8006028:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	78db      	ldrb	r3, [r3, #3]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d14e      	bne.n	80060d2 <USB_HC_StartXfer+0x4ea>
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d04a      	beq.n	80060d2 <USB_HC_StartXfer+0x4ea>
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	79db      	ldrb	r3, [r3, #7]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d146      	bne.n	80060d2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	7c9b      	ldrb	r3, [r3, #18]
 8006048:	2b03      	cmp	r3, #3
 800604a:	d831      	bhi.n	80060b0 <USB_HC_StartXfer+0x4c8>
 800604c:	a201      	add	r2, pc, #4	@ (adr r2, 8006054 <USB_HC_StartXfer+0x46c>)
 800604e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006052:	bf00      	nop
 8006054:	08006065 	.word	0x08006065
 8006058:	08006089 	.word	0x08006089
 800605c:	08006065 	.word	0x08006065
 8006060:	08006089 	.word	0x08006089
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	3303      	adds	r3, #3
 800606a:	089b      	lsrs	r3, r3, #2
 800606c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800606e:	8afa      	ldrh	r2, [r7, #22]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006074:	b29b      	uxth	r3, r3
 8006076:	429a      	cmp	r2, r3
 8006078:	d91c      	bls.n	80060b4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	f043 0220 	orr.w	r2, r3, #32
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	619a      	str	r2, [r3, #24]
        }
        break;
 8006086:	e015      	b.n	80060b4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	3303      	adds	r3, #3
 800608e:	089b      	lsrs	r3, r3, #2
 8006090:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006092:	8afa      	ldrh	r2, [r7, #22]
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	b29b      	uxth	r3, r3
 800609e:	429a      	cmp	r2, r3
 80060a0:	d90a      	bls.n	80060b8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80060ae:	e003      	b.n	80060b8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80060b0:	bf00      	nop
 80060b2:	e002      	b.n	80060ba <USB_HC_StartXfer+0x4d2>
        break;
 80060b4:	bf00      	nop
 80060b6:	e000      	b.n	80060ba <USB_HC_StartXfer+0x4d2>
        break;
 80060b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6999      	ldr	r1, [r3, #24]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	785a      	ldrb	r2, [r3, #1]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2000      	movs	r0, #0
 80060ca:	9000      	str	r0, [sp, #0]
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f7ff f9c2 	bl	8005456 <USB_WritePacket>
  }

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3728      	adds	r7, #40	@ 0x28
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	b29b      	uxth	r3, r3
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80060fe:	b480      	push	{r7}
 8006100:	b089      	sub	sp, #36	@ 0x24
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	460b      	mov	r3, r1
 8006108:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	0c9b      	lsrs	r3, r3, #18
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	0fdb      	lsrs	r3, r3, #31
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	0fdb      	lsrs	r3, r3, #31
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b20      	cmp	r3, #32
 8006162:	d10d      	bne.n	8006180 <USB_HC_Halt+0x82>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10a      	bne.n	8006180 <USB_HC_Halt+0x82>
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d002      	beq.n	800617c <USB_HC_Halt+0x7e>
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2b03      	cmp	r3, #3
 800617a:	d101      	bne.n	8006180 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	e0d8      	b.n	8006332 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <USB_HC_Halt+0x8e>
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d173      	bne.n	8006274 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	4413      	add	r3, r2
 8006194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	0151      	lsls	r1, r2, #5
 800619e:	69fa      	ldr	r2, [r7, #28]
 80061a0:	440a      	add	r2, r1
 80061a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061aa:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d14a      	bne.n	800624e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d133      	bne.n	800622c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061e2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006202:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	3301      	adds	r3, #1
 8006208:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006210:	d82e      	bhi.n	8006270 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006224:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006228:	d0ec      	beq.n	8006204 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800622a:	e081      	b.n	8006330 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	440a      	add	r2, r1
 8006242:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006246:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800624a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800624c:	e070      	b.n	8006330 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	440a      	add	r2, r1
 8006264:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006268:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800626c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800626e:	e05f      	b.n	8006330 <USB_HC_Halt+0x232>
            break;
 8006270:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006272:	e05d      	b.n	8006330 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	015a      	lsls	r2, r3, #5
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	4413      	add	r3, r2
 800627c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	0151      	lsls	r1, r2, #5
 8006286:	69fa      	ldr	r2, [r7, #28]
 8006288:	440a      	add	r2, r1
 800628a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800628e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006292:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d133      	bne.n	800630c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062e2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062f0:	d81d      	bhi.n	800632e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006304:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006308:	d0ec      	beq.n	80062e4 <USB_HC_Halt+0x1e6>
 800630a:	e011      	b.n	8006330 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	4413      	add	r3, r2
 8006314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	0151      	lsls	r1, r2, #5
 800631e:	69fa      	ldr	r2, [r7, #28]
 8006320:	440a      	add	r2, r1
 8006322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006326:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	e000      	b.n	8006330 <USB_HC_Halt+0x232>
          break;
 800632e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3724      	adds	r7, #36	@ 0x24
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
	...

08006340 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006350:	78fb      	ldrb	r3, [r7, #3]
 8006352:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006354:	2301      	movs	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	04da      	lsls	r2, r3, #19
 800635c:	4b15      	ldr	r3, [pc, #84]	@ (80063b4 <USB_DoPing+0x74>)
 800635e:	4013      	ands	r3, r2
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	0151      	lsls	r1, r2, #5
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	440a      	add	r2, r1
 8006368:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800636c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006370:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	4413      	add	r3, r2
 800637a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006388:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006390:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	4413      	add	r3, r2
 800639a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800639e:	461a      	mov	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	1ff80000 	.word	0x1ff80000

080063b8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7fe ff85 	bl	80052dc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80063d2:	2110      	movs	r1, #16
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7fe ffde 	bl	8005396 <USB_FlushTxFifo>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7ff f808 	bl	80053fa <USB_FlushRxFifo>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80063f4:	2300      	movs	r3, #0
 80063f6:	61bb      	str	r3, [r7, #24]
 80063f8:	e01f      	b.n	800643a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	4413      	add	r3, r2
 8006402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006410:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006418:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006420:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	015a      	lsls	r2, r3, #5
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	4413      	add	r3, r2
 800642a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800642e:	461a      	mov	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	3301      	adds	r3, #1
 8006438:	61bb      	str	r3, [r7, #24]
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	2b0f      	cmp	r3, #15
 800643e:	d9dc      	bls.n	80063fa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006440:	2300      	movs	r3, #0
 8006442:	61bb      	str	r3, [r7, #24]
 8006444:	e034      	b.n	80064b0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	4413      	add	r3, r2
 800644e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800645c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006464:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800646c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	4413      	add	r3, r2
 8006476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800647a:	461a      	mov	r2, r3
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3301      	adds	r3, #1
 8006484:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800648c:	d80c      	bhi.n	80064a8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	4413      	add	r3, r2
 8006496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064a4:	d0ec      	beq.n	8006480 <USB_StopHost+0xc8>
 80064a6:	e000      	b.n	80064aa <USB_StopHost+0xf2>
        break;
 80064a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	3301      	adds	r3, #1
 80064ae:	61bb      	str	r3, [r7, #24]
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	2b0f      	cmp	r3, #15
 80064b4:	d9c7      	bls.n	8006446 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064bc:	461a      	mov	r2, r3
 80064be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80064c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7fe fef4 	bl	80052ba <USB_EnableGlobalInt>

  return ret;
 80064d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3720      	adds	r7, #32
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80064dc:	b590      	push	{r4, r7, lr}
 80064de:	b089      	sub	sp, #36	@ 0x24
 80064e0:	af04      	add	r7, sp, #16
 80064e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80064e4:	2301      	movs	r3, #1
 80064e6:	2202      	movs	r2, #2
 80064e8:	2102      	movs	r1, #2
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fc83 	bl	8006df6 <USBH_FindInterface>
 80064f0:	4603      	mov	r3, r0
 80064f2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2bff      	cmp	r3, #255	@ 0xff
 80064f8:	d002      	beq.n	8006500 <USBH_CDC_InterfaceInit+0x24>
 80064fa:	7bfb      	ldrb	r3, [r7, #15]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d901      	bls.n	8006504 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006500:	2302      	movs	r3, #2
 8006502:	e13d      	b.n	8006780 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fc58 	bl	8006dbe <USBH_SelectInterface>
 800650e:	4603      	mov	r3, r0
 8006510:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006512:	7bbb      	ldrb	r3, [r7, #14]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006518:	2302      	movs	r3, #2
 800651a:	e131      	b.n	8006780 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006522:	2050      	movs	r0, #80	@ 0x50
 8006524:	f002 fb58 	bl	8008bd8 <malloc>
 8006528:	4603      	mov	r3, r0
 800652a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006532:	69db      	ldr	r3, [r3, #28]
 8006534:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800653c:	2302      	movs	r3, #2
 800653e:	e11f      	b.n	8006780 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006540:	2250      	movs	r2, #80	@ 0x50
 8006542:	2100      	movs	r1, #0
 8006544:	68b8      	ldr	r0, [r7, #8]
 8006546:	f002 fc05 	bl	8008d54 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	211a      	movs	r1, #26
 8006550:	fb01 f303 	mul.w	r3, r1, r3
 8006554:	4413      	add	r3, r2
 8006556:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	b25b      	sxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	da15      	bge.n	800658e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	211a      	movs	r1, #26
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	4413      	add	r3, r2
 800656e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006572:	781a      	ldrb	r2, [r3, #0]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	211a      	movs	r1, #26
 800657e:	fb01 f303 	mul.w	r3, r1, r3
 8006582:	4413      	add	r3, r2
 8006584:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006588:	881a      	ldrh	r2, [r3, #0]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	785b      	ldrb	r3, [r3, #1]
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 ffc4 	bl	8008522 <USBH_AllocPipe>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	7819      	ldrb	r1, [r3, #0]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	7858      	ldrb	r0, [r3, #1]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	8952      	ldrh	r2, [r2, #10]
 80065ba:	9202      	str	r2, [sp, #8]
 80065bc:	2203      	movs	r2, #3
 80065be:	9201      	str	r2, [sp, #4]
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	4623      	mov	r3, r4
 80065c4:	4602      	mov	r2, r0
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 ff7c 	bl	80084c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2200      	movs	r2, #0
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f002 fa79 	bl	8008acc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80065da:	2300      	movs	r3, #0
 80065dc:	2200      	movs	r2, #0
 80065de:	210a      	movs	r1, #10
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fc08 	bl	8006df6 <USBH_FindInterface>
 80065e6:	4603      	mov	r3, r0
 80065e8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	2bff      	cmp	r3, #255	@ 0xff
 80065ee:	d002      	beq.n	80065f6 <USBH_CDC_InterfaceInit+0x11a>
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d901      	bls.n	80065fa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80065f6:	2302      	movs	r3, #2
 80065f8:	e0c2      	b.n	8006780 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	211a      	movs	r1, #26
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	4413      	add	r3, r2
 8006606:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	b25b      	sxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	da16      	bge.n	8006640 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006612:	7bfb      	ldrb	r3, [r7, #15]
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	211a      	movs	r1, #26
 8006618:	fb01 f303 	mul.w	r3, r1, r3
 800661c:	4413      	add	r3, r2
 800661e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006622:	781a      	ldrb	r2, [r3, #0]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	211a      	movs	r1, #26
 800662e:	fb01 f303 	mul.w	r3, r1, r3
 8006632:	4413      	add	r3, r2
 8006634:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006638:	881a      	ldrh	r2, [r3, #0]
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	835a      	strh	r2, [r3, #26]
 800663e:	e015      	b.n	800666c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	211a      	movs	r1, #26
 8006646:	fb01 f303 	mul.w	r3, r1, r3
 800664a:	4413      	add	r3, r2
 800664c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006650:	781a      	ldrb	r2, [r3, #0]
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006656:	7bfb      	ldrb	r3, [r7, #15]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	211a      	movs	r1, #26
 800665c:	fb01 f303 	mul.w	r3, r1, r3
 8006660:	4413      	add	r3, r2
 8006662:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006666:	881a      	ldrh	r2, [r3, #0]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	211a      	movs	r1, #26
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	4413      	add	r3, r2
 8006678:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	b25b      	sxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	da16      	bge.n	80066b2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	211a      	movs	r1, #26
 800668a:	fb01 f303 	mul.w	r3, r1, r3
 800668e:	4413      	add	r3, r2
 8006690:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006694:	781a      	ldrb	r2, [r3, #0]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	211a      	movs	r1, #26
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80066aa:	881a      	ldrh	r2, [r3, #0]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	835a      	strh	r2, [r3, #26]
 80066b0:	e015      	b.n	80066de <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	211a      	movs	r1, #26
 80066b8:	fb01 f303 	mul.w	r3, r1, r3
 80066bc:	4413      	add	r3, r2
 80066be:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80066c2:	781a      	ldrb	r2, [r3, #0]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	211a      	movs	r1, #26
 80066ce:	fb01 f303 	mul.w	r3, r1, r3
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80066d8:	881a      	ldrh	r2, [r3, #0]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	7b9b      	ldrb	r3, [r3, #14]
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 ff1c 	bl	8008522 <USBH_AllocPipe>
 80066ea:	4603      	mov	r3, r0
 80066ec:	461a      	mov	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	7bdb      	ldrb	r3, [r3, #15]
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f001 ff12 	bl	8008522 <USBH_AllocPipe>
 80066fe:	4603      	mov	r3, r0
 8006700:	461a      	mov	r2, r3
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	7b59      	ldrb	r1, [r3, #13]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	7b98      	ldrb	r0, [r3, #14]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	8b12      	ldrh	r2, [r2, #24]
 800671e:	9202      	str	r2, [sp, #8]
 8006720:	2202      	movs	r2, #2
 8006722:	9201      	str	r2, [sp, #4]
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	4623      	mov	r3, r4
 8006728:	4602      	mov	r2, r0
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f001 feca 	bl	80084c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	7b19      	ldrb	r1, [r3, #12]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	7bd8      	ldrb	r0, [r3, #15]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	8b52      	ldrh	r2, [r2, #26]
 8006748:	9202      	str	r2, [sp, #8]
 800674a:	2202      	movs	r2, #2
 800674c:	9201      	str	r2, [sp, #4]
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	4623      	mov	r3, r4
 8006752:	4602      	mov	r2, r0
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 feb5 	bl	80084c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	7b5b      	ldrb	r3, [r3, #13]
 8006766:	2200      	movs	r2, #0
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f002 f9ae 	bl	8008acc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	7b1b      	ldrb	r3, [r3, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f002 f9a7 	bl	8008acc <USBH_LL_SetToggle>

  return USBH_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	bd90      	pop	{r4, r7, pc}

08006788 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00e      	beq.n	80067c0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f001 feaa 	bl	8008502 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 fed5 	bl	8008564 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	7b1b      	ldrb	r3, [r3, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00e      	beq.n	80067e6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	7b1b      	ldrb	r3, [r3, #12]
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 fe97 	bl	8008502 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	7b1b      	ldrb	r3, [r3, #12]
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f001 fec2 	bl	8008564 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2200      	movs	r2, #0
 80067e4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	7b5b      	ldrb	r3, [r3, #13]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00e      	beq.n	800680c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	7b5b      	ldrb	r3, [r3, #13]
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fe84 	bl	8008502 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	7b5b      	ldrb	r3, [r3, #13]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 feaf 	bl	8008564 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00b      	beq.n	8006830 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	4618      	mov	r0, r3
 8006822:	f002 f9e1 	bl	8008be8 <free>
    phost->pActiveClass->pData = 0U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800682c:	2200      	movs	r2, #0
 800682e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3340      	adds	r3, #64	@ 0x40
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f8b1 	bl	80069ba <GetLineCoding>
 8006858:	4603      	mov	r3, r0
 800685a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800685c:	7afb      	ldrb	r3, [r7, #11]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d105      	bne.n	800686e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006868:	2102      	movs	r1, #2
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800686e:	7afb      	ldrb	r3, [r7, #11]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006880:	2301      	movs	r3, #1
 8006882:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006898:	2b04      	cmp	r3, #4
 800689a:	d877      	bhi.n	800698c <USBH_CDC_Process+0x114>
 800689c:	a201      	add	r2, pc, #4	@ (adr r2, 80068a4 <USBH_CDC_Process+0x2c>)
 800689e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a2:	bf00      	nop
 80068a4:	080068b9 	.word	0x080068b9
 80068a8:	080068bf 	.word	0x080068bf
 80068ac:	080068ef 	.word	0x080068ef
 80068b0:	08006963 	.word	0x08006963
 80068b4:	08006971 	.word	0x08006971
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]
      break;
 80068bc:	e06d      	b.n	800699a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f897 	bl	80069f8 <SetLineCoding>
 80068ca:	4603      	mov	r3, r0
 80068cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068ce:	7bbb      	ldrb	r3, [r7, #14]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d104      	bne.n	80068de <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80068dc:	e058      	b.n	8006990 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80068de:	7bbb      	ldrb	r3, [r7, #14]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d055      	beq.n	8006990 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2204      	movs	r2, #4
 80068e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80068ec:	e050      	b.n	8006990 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	3340      	adds	r3, #64	@ 0x40
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f860 	bl	80069ba <GetLineCoding>
 80068fa:	4603      	mov	r3, r0
 80068fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d126      	bne.n	8006952 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006916:	791b      	ldrb	r3, [r3, #4]
 8006918:	429a      	cmp	r2, r3
 800691a:	d13b      	bne.n	8006994 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006926:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006928:	429a      	cmp	r2, r3
 800692a:	d133      	bne.n	8006994 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006936:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006938:	429a      	cmp	r2, r3
 800693a:	d12b      	bne.n	8006994 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006944:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006946:	429a      	cmp	r2, r3
 8006948:	d124      	bne.n	8006994 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f958 	bl	8006c00 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006950:	e020      	b.n	8006994 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d01d      	beq.n	8006994 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2204      	movs	r2, #4
 800695c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006960:	e018      	b.n	8006994 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f867 	bl	8006a36 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f8da 	bl	8006b22 <CDC_ProcessReception>
      break;
 800696e:	e014      	b.n	800699a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006970:	2100      	movs	r1, #0
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 f81e 	bl	80079b4 <USBH_ClrFeature>
 8006978:	4603      	mov	r3, r0
 800697a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800697c:	7bbb      	ldrb	r3, [r7, #14]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10a      	bne.n	8006998 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800698a:	e005      	b.n	8006998 <USBH_CDC_Process+0x120>

    default:
      break;
 800698c:	bf00      	nop
 800698e:	e004      	b.n	800699a <USBH_CDC_Process+0x122>
      break;
 8006990:	bf00      	nop
 8006992:	e002      	b.n	800699a <USBH_CDC_Process+0x122>
      break;
 8006994:	bf00      	nop
 8006996:	e000      	b.n	800699a <USBH_CDC_Process+0x122>
      break;
 8006998:	bf00      	nop

  }

  return status;
 800699a:	7bfb      	ldrb	r3, [r7, #15]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	22a1      	movs	r2, #161	@ 0xa1
 80069c8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2221      	movs	r2, #33	@ 0x21
 80069ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2207      	movs	r2, #7
 80069e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2207      	movs	r2, #7
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f001 fb17 	bl	800801c <USBH_CtlReq>
 80069ee:	4603      	mov	r3, r0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2221      	movs	r2, #33	@ 0x21
 8006a06:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2220      	movs	r2, #32
 8006a0c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2207      	movs	r2, #7
 8006a1e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2207      	movs	r2, #7
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f001 faf8 	bl	800801c <USBH_CtlReq>
 8006a2c:	4603      	mov	r3, r0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b086      	sub	sp, #24
 8006a3a:	af02      	add	r7, sp, #8
 8006a3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d002      	beq.n	8006a5c <CDC_ProcessTransmission+0x26>
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d023      	beq.n	8006aa2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006a5a:	e05e      	b.n	8006b1a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	8b12      	ldrh	r2, [r2, #24]
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d90b      	bls.n	8006a80 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	69d9      	ldr	r1, [r3, #28]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8b1a      	ldrh	r2, [r3, #24]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	7b5b      	ldrb	r3, [r3, #13]
 8006a74:	2001      	movs	r0, #1
 8006a76:	9000      	str	r0, [sp, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f001 fce0 	bl	800843e <USBH_BulkSendData>
 8006a7e:	e00b      	b.n	8006a98 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	7b5b      	ldrb	r3, [r3, #13]
 8006a8e:	2001      	movs	r0, #1
 8006a90:	9000      	str	r0, [sp, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f001 fcd3 	bl	800843e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006aa0:	e03b      	b.n	8006b1a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	7b5b      	ldrb	r3, [r3, #13]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 ffe5 	bl	8008a78 <USBH_LL_GetURBState>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006ab2:	7afb      	ldrb	r3, [r7, #11]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d128      	bne.n	8006b0a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	8b12      	ldrh	r2, [r2, #24]
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d90e      	bls.n	8006ae2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	8b12      	ldrh	r2, [r2, #24]
 8006acc:	1a9a      	subs	r2, r3, r2
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	8b12      	ldrh	r2, [r2, #24]
 8006ada:	441a      	add	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	61da      	str	r2, [r3, #28]
 8006ae0:	e002      	b.n	8006ae8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006af8:	e00e      	b.n	8006b18 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f868 	bl	8006bd8 <USBH_CDC_TransmitCallback>
      break;
 8006b08:	e006      	b.n	8006b18 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d103      	bne.n	8006b18 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006b18:	bf00      	nop
  }
}
 8006b1a:	bf00      	nop
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b086      	sub	sp, #24
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006b34:	2300      	movs	r3, #0
 8006b36:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d002      	beq.n	8006b48 <CDC_ProcessReception+0x26>
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d00e      	beq.n	8006b64 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 8006b46:	e043      	b.n	8006bd0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	6a19      	ldr	r1, [r3, #32]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	8b5a      	ldrh	r2, [r3, #26]
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	7b1b      	ldrb	r3, [r3, #12]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 fc97 	bl	8008488 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2204      	movs	r2, #4
 8006b5e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006b62:	e035      	b.n	8006bd0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	7b1b      	ldrb	r3, [r3, #12]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 ff84 	bl	8008a78 <USBH_LL_GetURBState>
 8006b70:	4603      	mov	r3, r0
 8006b72:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006b74:	7cfb      	ldrb	r3, [r7, #19]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d129      	bne.n	8006bce <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	7b1b      	ldrb	r3, [r3, #12]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 fef9 	bl	8008978 <USBH_LL_GetLastXferSize>
 8006b86:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d016      	beq.n	8006bc0 <CDC_ProcessReception+0x9e>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	8b5b      	ldrh	r3, [r3, #26]
 8006b96:	461a      	mov	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d110      	bne.n	8006bc0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1ad2      	subs	r2, r2, r3
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	6a1a      	ldr	r2, [r3, #32]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	441a      	add	r2, r3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2203      	movs	r2, #3
 8006bba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006bbe:	e006      	b.n	8006bce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f80f 	bl	8006bec <USBH_CDC_ReceiveCallback>
      break;
 8006bce:	bf00      	nop
  }
}
 8006bd0:	bf00      	nop
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c28:	2302      	movs	r3, #2
 8006c2a:	e029      	b.n	8006c80 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	79fa      	ldrb	r2, [r7, #7]
 8006c30:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 f81f 	bl	8006c88 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f001 fdc9 	bl	8008810 <USBH_LL_Init>

  return USBH_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	e009      	b.n	8006caa <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	33e0      	adds	r3, #224	@ 0xe0
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	60fb      	str	r3, [r7, #12]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2b0f      	cmp	r3, #15
 8006cae:	d9f2      	bls.n	8006c96 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	e009      	b.n	8006cca <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cd0:	d3f1      	bcc.n	8006cb6 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2240      	movs	r2, #64	@ 0x40
 8006cf6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	331c      	adds	r3, #28
 8006d22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006d26:	2100      	movs	r1, #0
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f002 f813 	bl	8008d54 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006d34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d38:	2100      	movs	r1, #0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f002 f80a 	bl	8008d54 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006d46:	2212      	movs	r2, #18
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f002 f802 	bl	8008d54 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006d56:	223e      	movs	r2, #62	@ 0x3e
 8006d58:	2100      	movs	r1, #0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f001 fffa 	bl	8008d54 <memset>

  return USBH_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b085      	sub	sp, #20
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d016      	beq.n	8006dac <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10e      	bne.n	8006da6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006d8e:	1c59      	adds	r1, r3, #1
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	33de      	adds	r3, #222	@ 0xde
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	73fb      	strb	r3, [r7, #15]
 8006da4:	e004      	b.n	8006db0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006da6:	2302      	movs	r3, #2
 8006da8:	73fb      	strb	r3, [r7, #15]
 8006daa:	e001      	b.n	8006db0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006dac:	2302      	movs	r3, #2
 8006dae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006dd4:	78fa      	ldrb	r2, [r7, #3]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d204      	bcs.n	8006de4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	78fa      	ldrb	r2, [r7, #3]
 8006dde:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006de2:	e001      	b.n	8006de8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006de4:	2302      	movs	r3, #2
 8006de6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b087      	sub	sp, #28
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	4608      	mov	r0, r1
 8006e00:	4611      	mov	r1, r2
 8006e02:	461a      	mov	r2, r3
 8006e04:	4603      	mov	r3, r0
 8006e06:	70fb      	strb	r3, [r7, #3]
 8006e08:	460b      	mov	r3, r1
 8006e0a:	70bb      	strb	r3, [r7, #2]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006e1e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e20:	e025      	b.n	8006e6e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	221a      	movs	r2, #26
 8006e26:	fb02 f303 	mul.w	r3, r2, r3
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	4413      	add	r3, r2
 8006e30:	3302      	adds	r3, #2
 8006e32:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	795b      	ldrb	r3, [r3, #5]
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d002      	beq.n	8006e44 <USBH_FindInterface+0x4e>
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	2bff      	cmp	r3, #255	@ 0xff
 8006e42:	d111      	bne.n	8006e68 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e48:	78ba      	ldrb	r2, [r7, #2]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d002      	beq.n	8006e54 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e4e:	78bb      	ldrb	r3, [r7, #2]
 8006e50:	2bff      	cmp	r3, #255	@ 0xff
 8006e52:	d109      	bne.n	8006e68 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e58:	787a      	ldrb	r2, [r7, #1]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d002      	beq.n	8006e64 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e5e:	787b      	ldrb	r3, [r7, #1]
 8006e60:	2bff      	cmp	r3, #255	@ 0xff
 8006e62:	d101      	bne.n	8006e68 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
 8006e66:	e006      	b.n	8006e76 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d9d6      	bls.n	8006e22 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006e74:	23ff      	movs	r3, #255	@ 0xff
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fcfc 	bl	8008888 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006e90:	2101      	movs	r1, #1
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 fe03 	bl	8008a9e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af04      	add	r7, sp, #16
 8006eaa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006eac:	2302      	movs	r3, #2
 8006eae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d102      	bne.n	8006ec6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2203      	movs	r2, #3
 8006ec4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b0b      	cmp	r3, #11
 8006ece:	f200 81bc 	bhi.w	800724a <USBH_Process+0x3a6>
 8006ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed8 <USBH_Process+0x34>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006f09 	.word	0x08006f09
 8006edc:	08006f3b 	.word	0x08006f3b
 8006ee0:	08006fa5 	.word	0x08006fa5
 8006ee4:	080071e5 	.word	0x080071e5
 8006ee8:	0800724b 	.word	0x0800724b
 8006eec:	08007045 	.word	0x08007045
 8006ef0:	0800718b 	.word	0x0800718b
 8006ef4:	0800707b 	.word	0x0800707b
 8006ef8:	0800709b 	.word	0x0800709b
 8006efc:	080070b9 	.word	0x080070b9
 8006f00:	080070fd 	.word	0x080070fd
 8006f04:	080071cd 	.word	0x080071cd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 819c 	beq.w	800724e <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006f1c:	20c8      	movs	r0, #200	@ 0xc8
 8006f1e:	f001 fe08 	bl	8008b32 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f001 fd0d 	bl	8008942 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8006f38:	e189      	b.n	800724e <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d107      	bne.n	8006f56 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2202      	movs	r2, #2
 8006f52:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006f54:	e18a      	b.n	800726c <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006f5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f60:	d914      	bls.n	8006f8c <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006f68:	3301      	adds	r3, #1
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d903      	bls.n	8006f84 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	220d      	movs	r2, #13
 8006f80:	701a      	strb	r2, [r3, #0]
      break;
 8006f82:	e173      	b.n	800726c <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	701a      	strb	r2, [r3, #0]
      break;
 8006f8a:	e16f      	b.n	800726c <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006f92:	f103 020a 	add.w	r2, r3, #10
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006f9c:	200a      	movs	r0, #10
 8006f9e:	f001 fdc8 	bl	8008b32 <USBH_Delay>
      break;
 8006fa2:	e163      	b.n	800726c <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006fb4:	2104      	movs	r1, #4
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006fba:	2064      	movs	r0, #100	@ 0x64
 8006fbc:	f001 fdb9 	bl	8008b32 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f001 fc97 	bl	80088f4 <USBH_LL_GetSpeed>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	461a      	mov	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2205      	movs	r2, #5
 8006fd4:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f001 faa2 	bl	8008522 <USBH_AllocPipe>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006fe6:	2180      	movs	r1, #128	@ 0x80
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f001 fa9a 	bl	8008522 <USBH_AllocPipe>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	7919      	ldrb	r1, [r3, #4]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800700a:	9202      	str	r2, [sp, #8]
 800700c:	2200      	movs	r2, #0
 800700e:	9201      	str	r2, [sp, #4]
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	4603      	mov	r3, r0
 8007014:	2280      	movs	r2, #128	@ 0x80
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 fa54 	bl	80084c4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	7959      	ldrb	r1, [r3, #5]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007030:	9202      	str	r2, [sp, #8]
 8007032:	2200      	movs	r2, #0
 8007034:	9201      	str	r2, [sp, #4]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	4603      	mov	r3, r0
 800703a:	2200      	movs	r2, #0
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 fa41 	bl	80084c4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007042:	e113      	b.n	800726c <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f917 	bl	8007278 <USBH_HandleEnum>
 800704a:	4603      	mov	r3, r0
 800704c:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800704e:	7bbb      	ldrb	r3, [r7, #14]
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	f040 80fd 	bne.w	8007252 <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007066:	2b01      	cmp	r3, #1
 8007068:	d103      	bne.n	8007072 <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2208      	movs	r2, #8
 800706e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007070:	e0ef      	b.n	8007252 <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2207      	movs	r2, #7
 8007076:	701a      	strb	r2, [r3, #0]
      break;
 8007078:	e0eb      	b.n	8007252 <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 80e8 	beq.w	8007256 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800708c:	2101      	movs	r1, #1
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2208      	movs	r2, #8
 8007096:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8007098:	e0dd      	b.n	8007256 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fc3f 	bl	8007926 <USBH_SetCfg>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 80d5 	bne.w	800725a <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2209      	movs	r2, #9
 80070b4:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80070b6:	e0d0      	b.n	800725a <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d016      	beq.n	80070f4 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80070c6:	2101      	movs	r1, #1
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fc4f 	bl	800796c <USBH_SetFeature>
 80070ce:	4603      	mov	r3, r0
 80070d0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80070d2:	7bbb      	ldrb	r3, [r7, #14]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d103      	bne.n	80070e2 <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	220a      	movs	r2, #10
 80070de:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80070e0:	e0bd      	b.n	800725e <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	f040 80b9 	bne.w	800725e <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	220a      	movs	r2, #10
 80070f0:	701a      	strb	r2, [r3, #0]
      break;
 80070f2:	e0b4      	b.n	800725e <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	220a      	movs	r2, #10
 80070f8:	701a      	strb	r2, [r3, #0]
      break;
 80070fa:	e0b0      	b.n	800725e <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 80ad 	beq.w	8007262 <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007110:	2300      	movs	r3, #0
 8007112:	73fb      	strb	r3, [r7, #15]
 8007114:	e016      	b.n	8007144 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007116:	7bfa      	ldrb	r2, [r7, #15]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	32de      	adds	r2, #222	@ 0xde
 800711c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007120:	791a      	ldrb	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007128:	429a      	cmp	r2, r3
 800712a:	d108      	bne.n	800713e <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 800712c:	7bfa      	ldrb	r2, [r7, #15]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	32de      	adds	r2, #222	@ 0xde
 8007132:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800713c:	e005      	b.n	800714a <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	3301      	adds	r3, #1
 8007142:	73fb      	strb	r3, [r7, #15]
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0e5      	beq.n	8007116 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007150:	2b00      	cmp	r3, #0
 8007152:	d016      	beq.n	8007182 <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	4798      	blx	r3
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d109      	bne.n	800717a <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2206      	movs	r2, #6
 800716a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007172:	2103      	movs	r1, #3
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007178:	e073      	b.n	8007262 <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	220d      	movs	r2, #13
 800717e:	701a      	strb	r2, [r3, #0]
      break;
 8007180:	e06f      	b.n	8007262 <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	220d      	movs	r2, #13
 8007186:	701a      	strb	r2, [r3, #0]
      break;
 8007188:	e06b      	b.n	8007262 <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d017      	beq.n	80071c4 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	4798      	blx	r3
 80071a0:	4603      	mov	r3, r0
 80071a2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d103      	bne.n	80071b4 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	220b      	movs	r2, #11
 80071b0:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 80071b2:	e058      	b.n	8007266 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d154      	bne.n	8007266 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	220d      	movs	r2, #13
 80071c0:	701a      	strb	r2, [r3, #0]
      break;
 80071c2:	e050      	b.n	8007266 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	220d      	movs	r2, #13
 80071c8:	701a      	strb	r2, [r3, #0]
      break;
 80071ca:	e04c      	b.n	8007266 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d049      	beq.n	800726a <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	4798      	blx	r3
      }
      break;
 80071e2:	e042      	b.n	800726a <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff fd4b 	bl	8006c88 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d009      	beq.n	8007210 <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007220:	2105      	movs	r1, #5
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b01      	cmp	r3, #1
 8007230:	d107      	bne.n	8007242 <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff fe21 	bl	8006e82 <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8007240:	e014      	b.n	800726c <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f001 fb20 	bl	8008888 <USBH_LL_Start>
      break;
 8007248:	e010      	b.n	800726c <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800724a:	bf00      	nop
 800724c:	e00e      	b.n	800726c <USBH_Process+0x3c8>
      break;
 800724e:	bf00      	nop
 8007250:	e00c      	b.n	800726c <USBH_Process+0x3c8>
      break;
 8007252:	bf00      	nop
 8007254:	e00a      	b.n	800726c <USBH_Process+0x3c8>
    break;
 8007256:	bf00      	nop
 8007258:	e008      	b.n	800726c <USBH_Process+0x3c8>
      break;
 800725a:	bf00      	nop
 800725c:	e006      	b.n	800726c <USBH_Process+0x3c8>
      break;
 800725e:	bf00      	nop
 8007260:	e004      	b.n	800726c <USBH_Process+0x3c8>
      break;
 8007262:	bf00      	nop
 8007264:	e002      	b.n	800726c <USBH_Process+0x3c8>
      break;
 8007266:	bf00      	nop
 8007268:	e000      	b.n	800726c <USBH_Process+0x3c8>
      break;
 800726a:	bf00      	nop
  }
  return USBH_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop

08007278 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af04      	add	r7, sp, #16
 800727e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007280:	2301      	movs	r3, #1
 8007282:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007284:	2301      	movs	r3, #1
 8007286:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	785b      	ldrb	r3, [r3, #1]
 800728c:	2b07      	cmp	r3, #7
 800728e:	f200 81bd 	bhi.w	800760c <USBH_HandleEnum+0x394>
 8007292:	a201      	add	r2, pc, #4	@ (adr r2, 8007298 <USBH_HandleEnum+0x20>)
 8007294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007298:	080072b9 	.word	0x080072b9
 800729c:	08007373 	.word	0x08007373
 80072a0:	080073dd 	.word	0x080073dd
 80072a4:	08007467 	.word	0x08007467
 80072a8:	080074d1 	.word	0x080074d1
 80072ac:	08007541 	.word	0x08007541
 80072b0:	08007587 	.word	0x08007587
 80072b4:	080075cd 	.word	0x080075cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80072b8:	2108      	movs	r1, #8
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa50 	bl	8007760 <USBH_Get_DevDesc>
 80072c0:	4603      	mov	r3, r0
 80072c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d12e      	bne.n	8007328 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	7919      	ldrb	r1, [r3, #4]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072ee:	9202      	str	r2, [sp, #8]
 80072f0:	2200      	movs	r2, #0
 80072f2:	9201      	str	r2, [sp, #4]
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	4603      	mov	r3, r0
 80072f8:	2280      	movs	r2, #128	@ 0x80
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 f8e2 	bl	80084c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	7959      	ldrb	r1, [r3, #5]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007314:	9202      	str	r2, [sp, #8]
 8007316:	2200      	movs	r2, #0
 8007318:	9201      	str	r2, [sp, #4]
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	4603      	mov	r3, r0
 800731e:	2200      	movs	r2, #0
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 f8cf 	bl	80084c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007326:	e173      	b.n	8007610 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b03      	cmp	r3, #3
 800732c:	f040 8170 	bne.w	8007610 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007336:	3301      	adds	r3, #1
 8007338:	b2da      	uxtb	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007346:	2b03      	cmp	r3, #3
 8007348:	d903      	bls.n	8007352 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	220d      	movs	r2, #13
 800734e:	701a      	strb	r2, [r3, #0]
      break;
 8007350:	e15e      	b.n	8007610 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	795b      	ldrb	r3, [r3, #5]
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f001 f903 	bl	8008564 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	791b      	ldrb	r3, [r3, #4]
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f001 f8fd 	bl	8008564 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]
      break;
 8007370:	e14e      	b.n	8007610 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007372:	2112      	movs	r1, #18
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f9f3 	bl	8007760 <USBH_Get_DevDesc>
 800737a:	4603      	mov	r3, r0
 800737c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d103      	bne.n	800738c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800738a:	e143      	b.n	8007614 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	2b03      	cmp	r3, #3
 8007390:	f040 8140 	bne.w	8007614 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800739a:	3301      	adds	r3, #1
 800739c:	b2da      	uxtb	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d903      	bls.n	80073b6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	220d      	movs	r2, #13
 80073b2:	701a      	strb	r2, [r3, #0]
      break;
 80073b4:	e12e      	b.n	8007614 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	795b      	ldrb	r3, [r3, #5]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 f8d1 	bl	8008564 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	791b      	ldrb	r3, [r3, #4]
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 f8cb 	bl	8008564 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]
      break;
 80073da:	e11b      	b.n	8007614 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80073dc:	2101      	movs	r1, #1
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa7d 	bl	80078de <USBH_SetAddress>
 80073e4:	4603      	mov	r3, r0
 80073e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d130      	bne.n	8007450 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80073ee:	2002      	movs	r0, #2
 80073f0:	f001 fb9f 	bl	8008b32 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2203      	movs	r2, #3
 8007400:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	7919      	ldrb	r1, [r3, #4]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007416:	9202      	str	r2, [sp, #8]
 8007418:	2200      	movs	r2, #0
 800741a:	9201      	str	r2, [sp, #4]
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	4603      	mov	r3, r0
 8007420:	2280      	movs	r2, #128	@ 0x80
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 f84e 	bl	80084c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	7959      	ldrb	r1, [r3, #5]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800743c:	9202      	str	r2, [sp, #8]
 800743e:	2200      	movs	r2, #0
 8007440:	9201      	str	r2, [sp, #4]
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	4603      	mov	r3, r0
 8007446:	2200      	movs	r2, #0
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f001 f83b 	bl	80084c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800744e:	e0e3      	b.n	8007618 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	2b03      	cmp	r3, #3
 8007454:	f040 80e0 	bne.w	8007618 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	220d      	movs	r2, #13
 800745c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	705a      	strb	r2, [r3, #1]
      break;
 8007464:	e0d8      	b.n	8007618 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007466:	2109      	movs	r1, #9
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f9a5 	bl	80077b8 <USBH_Get_CfgDesc>
 800746e:	4603      	mov	r3, r0
 8007470:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d103      	bne.n	8007480 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2204      	movs	r2, #4
 800747c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800747e:	e0cd      	b.n	800761c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	2b03      	cmp	r3, #3
 8007484:	f040 80ca 	bne.w	800761c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800748e:	3301      	adds	r3, #1
 8007490:	b2da      	uxtb	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d903      	bls.n	80074aa <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	220d      	movs	r2, #13
 80074a6:	701a      	strb	r2, [r3, #0]
      break;
 80074a8:	e0b8      	b.n	800761c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	795b      	ldrb	r3, [r3, #5]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 f857 	bl	8008564 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	791b      	ldrb	r3, [r3, #4]
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f001 f851 	bl	8008564 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]
      break;
 80074ce:	e0a5      	b.n	800761c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f96d 	bl	80077b8 <USBH_Get_CfgDesc>
 80074de:	4603      	mov	r3, r0
 80074e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d103      	bne.n	80074f0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2205      	movs	r2, #5
 80074ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80074ee:	e097      	b.n	8007620 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	f040 8094 	bne.w	8007620 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80074fe:	3301      	adds	r3, #1
 8007500:	b2da      	uxtb	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800750e:	2b03      	cmp	r3, #3
 8007510:	d903      	bls.n	800751a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	220d      	movs	r2, #13
 8007516:	701a      	strb	r2, [r3, #0]
      break;
 8007518:	e082      	b.n	8007620 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	795b      	ldrb	r3, [r3, #5]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 f81f 	bl	8008564 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	791b      	ldrb	r3, [r3, #4]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 f819 	bl	8008564 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	701a      	strb	r2, [r3, #0]
      break;
 800753e:	e06f      	b.n	8007620 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007546:	2b00      	cmp	r3, #0
 8007548:	d019      	beq.n	800757e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007556:	23ff      	movs	r3, #255	@ 0xff
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f957 	bl	800780c <USBH_Get_StringDesc>
 800755e:	4603      	mov	r3, r0
 8007560:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d103      	bne.n	8007570 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2206      	movs	r2, #6
 800756c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 800756e:	e059      	b.n	8007624 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	2b03      	cmp	r3, #3
 8007574:	d156      	bne.n	8007624 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2206      	movs	r2, #6
 800757a:	705a      	strb	r2, [r3, #1]
      break;
 800757c:	e052      	b.n	8007624 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2206      	movs	r2, #6
 8007582:	705a      	strb	r2, [r3, #1]
      break;
 8007584:	e04e      	b.n	8007624 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800758c:	2b00      	cmp	r3, #0
 800758e:	d019      	beq.n	80075c4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800759c:	23ff      	movs	r3, #255	@ 0xff
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f934 	bl	800780c <USBH_Get_StringDesc>
 80075a4:	4603      	mov	r3, r0
 80075a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d103      	bne.n	80075b6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2207      	movs	r2, #7
 80075b2:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80075b4:	e038      	b.n	8007628 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	2b03      	cmp	r3, #3
 80075ba:	d135      	bne.n	8007628 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2207      	movs	r2, #7
 80075c0:	705a      	strb	r2, [r3, #1]
      break;
 80075c2:	e031      	b.n	8007628 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2207      	movs	r2, #7
 80075c8:	705a      	strb	r2, [r3, #1]
      break;
 80075ca:	e02d      	b.n	8007628 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d017      	beq.n	8007606 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80075e2:	23ff      	movs	r3, #255	@ 0xff
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f911 	bl	800780c <USBH_Get_StringDesc>
 80075ea:	4603      	mov	r3, r0
 80075ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d102      	bne.n	80075fa <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80075f8:	e018      	b.n	800762c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d115      	bne.n	800762c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]
      break;
 8007604:	e012      	b.n	800762c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	73fb      	strb	r3, [r7, #15]
      break;
 800760a:	e00f      	b.n	800762c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800760c:	bf00      	nop
 800760e:	e00e      	b.n	800762e <USBH_HandleEnum+0x3b6>
      break;
 8007610:	bf00      	nop
 8007612:	e00c      	b.n	800762e <USBH_HandleEnum+0x3b6>
      break;
 8007614:	bf00      	nop
 8007616:	e00a      	b.n	800762e <USBH_HandleEnum+0x3b6>
      break;
 8007618:	bf00      	nop
 800761a:	e008      	b.n	800762e <USBH_HandleEnum+0x3b6>
      break;
 800761c:	bf00      	nop
 800761e:	e006      	b.n	800762e <USBH_HandleEnum+0x3b6>
      break;
 8007620:	bf00      	nop
 8007622:	e004      	b.n	800762e <USBH_HandleEnum+0x3b6>
      break;
 8007624:	bf00      	nop
 8007626:	e002      	b.n	800762e <USBH_HandleEnum+0x3b6>
      break;
 8007628:	bf00      	nop
 800762a:	e000      	b.n	800762e <USBH_HandleEnum+0x3b6>
      break;
 800762c:	bf00      	nop
  }
  return Status;
 800762e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f804 	bl	800767a <USBH_HandleSof>
}
 8007672:	bf00      	nop
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b0b      	cmp	r3, #11
 800768a:	d10a      	bne.n	80076a2 <USBH_HandleSof+0x28>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007692:	2b00      	cmp	r3, #0
 8007694:	d005      	beq.n	80076a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	4798      	blx	r3
  }
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 80076ba:	bf00      	nop
}
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 80076de:	bf00      	nop
}
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f001 f8c0 	bl	80088be <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	791b      	ldrb	r3, [r3, #4]
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 ff0d 	bl	8008564 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	795b      	ldrb	r3, [r3, #5]
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 ff07 	bl	8008564 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af02      	add	r7, sp, #8
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800776c:	887b      	ldrh	r3, [r7, #2]
 800776e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007772:	d901      	bls.n	8007778 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007774:	2303      	movs	r3, #3
 8007776:	e01b      	b.n	80077b0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800777e:	887b      	ldrh	r3, [r7, #2]
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	4613      	mov	r3, r2
 8007784:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007788:	2100      	movs	r1, #0
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f872 	bl	8007874 <USBH_GetDescriptor>
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d109      	bne.n	80077ae <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80077a0:	887a      	ldrh	r2, [r7, #2]
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f929 	bl	80079fc <USBH_ParseDevDesc>
 80077aa:	4603      	mov	r3, r0
 80077ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af02      	add	r7, sp, #8
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	331c      	adds	r3, #28
 80077c8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80077ca:	887b      	ldrh	r3, [r7, #2]
 80077cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077d0:	d901      	bls.n	80077d6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e016      	b.n	8007804 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80077d6:	887b      	ldrh	r3, [r7, #2]
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077e0:	2100      	movs	r1, #0
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f846 	bl	8007874 <USBH_GetDescriptor>
 80077e8:	4603      	mov	r3, r0
 80077ea:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d107      	bne.n	8007802 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80077f2:	887b      	ldrh	r3, [r7, #2]
 80077f4:	461a      	mov	r2, r3
 80077f6:	68b9      	ldr	r1, [r7, #8]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f9af 	bl	8007b5c <USBH_ParseCfgDesc>
 80077fe:	4603      	mov	r3, r0
 8007800:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007802:	7bfb      	ldrb	r3, [r7, #15]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b088      	sub	sp, #32
 8007810:	af02      	add	r7, sp, #8
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	607a      	str	r2, [r7, #4]
 8007816:	461a      	mov	r2, r3
 8007818:	460b      	mov	r3, r1
 800781a:	72fb      	strb	r3, [r7, #11]
 800781c:	4613      	mov	r3, r2
 800781e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007820:	893b      	ldrh	r3, [r7, #8]
 8007822:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007826:	d802      	bhi.n	800782e <USBH_Get_StringDesc+0x22>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800782e:	2303      	movs	r3, #3
 8007830:	e01c      	b.n	800786c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007832:	7afb      	ldrb	r3, [r7, #11]
 8007834:	b29b      	uxth	r3, r3
 8007836:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800783a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007842:	893b      	ldrh	r3, [r7, #8]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	460b      	mov	r3, r1
 8007848:	2100      	movs	r1, #0
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 f812 	bl	8007874 <USBH_GetDescriptor>
 8007850:	4603      	mov	r3, r0
 8007852:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007854:	7dfb      	ldrb	r3, [r7, #23]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d107      	bne.n	800786a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007860:	893a      	ldrh	r2, [r7, #8]
 8007862:	6879      	ldr	r1, [r7, #4]
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fb8c 	bl	8007f82 <USBH_ParseStringDesc>
  }

  return status;
 800786a:	7dfb      	ldrb	r3, [r7, #23]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3718      	adds	r7, #24
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	607b      	str	r3, [r7, #4]
 800787e:	460b      	mov	r3, r1
 8007880:	72fb      	strb	r3, [r7, #11]
 8007882:	4613      	mov	r3, r2
 8007884:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	789b      	ldrb	r3, [r3, #2]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d11c      	bne.n	80078c8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007894:	b2da      	uxtb	r2, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2206      	movs	r2, #6
 800789e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	893a      	ldrh	r2, [r7, #8]
 80078a4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80078a6:	893b      	ldrh	r3, [r7, #8]
 80078a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80078ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078b0:	d104      	bne.n	80078bc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f240 4209 	movw	r2, #1033	@ 0x409
 80078b8:	829a      	strh	r2, [r3, #20]
 80078ba:	e002      	b.n	80078c2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8b3a      	ldrh	r2, [r7, #24]
 80078c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80078c8:	8b3b      	ldrh	r3, [r7, #24]
 80078ca:	461a      	mov	r2, r3
 80078cc:	6879      	ldr	r1, [r7, #4]
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f000 fba4 	bl	800801c <USBH_CtlReq>
 80078d4:	4603      	mov	r3, r0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	460b      	mov	r3, r1
 80078e8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	789b      	ldrb	r3, [r3, #2]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d10f      	bne.n	8007912 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2205      	movs	r2, #5
 80078fc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	b29a      	uxth	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007912:	2200      	movs	r2, #0
 8007914:	2100      	movs	r1, #0
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fb80 	bl	800801c <USBH_CtlReq>
 800791c:	4603      	mov	r3, r0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	789b      	ldrb	r3, [r3, #2]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d10e      	bne.n	8007958 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2209      	movs	r2, #9
 8007944:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	887a      	ldrh	r2, [r7, #2]
 800794a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007958:	2200      	movs	r2, #0
 800795a:	2100      	movs	r1, #0
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f000 fb5d 	bl	800801c <USBH_CtlReq>
 8007962:	4603      	mov	r3, r0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	789b      	ldrb	r3, [r3, #2]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10f      	bne.n	80079a0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2203      	movs	r2, #3
 800798a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	b29a      	uxth	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079a0:	2200      	movs	r2, #0
 80079a2:	2100      	movs	r1, #0
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 fb39 	bl	800801c <USBH_CtlReq>
 80079aa:	4603      	mov	r3, r0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	789b      	ldrb	r3, [r3, #2]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d10f      	bne.n	80079e8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80079da:	78fb      	ldrb	r3, [r7, #3]
 80079dc:	b29a      	uxth	r2, r3
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80079e8:	2200      	movs	r2, #0
 80079ea:	2100      	movs	r1, #0
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 fb15 	bl	800801c <USBH_CtlReq>
 80079f2:	4603      	mov	r3, r0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	4613      	mov	r3, r2
 8007a08:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007a10:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	e094      	b.n	8007b4a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	781a      	ldrb	r2, [r3, #0]
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	785a      	ldrb	r2, [r3, #1]
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	3302      	adds	r3, #2
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	3303      	adds	r3, #3
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	021b      	lsls	r3, r3, #8
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	4313      	orrs	r3, r2
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	791a      	ldrb	r2, [r3, #4]
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	795a      	ldrb	r2, [r3, #5]
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	799a      	ldrb	r2, [r3, #6]
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	79da      	ldrb	r2, [r3, #7]
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d004      	beq.n	8007a7e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d11b      	bne.n	8007ab6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	79db      	ldrb	r3, [r3, #7]
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	dc0f      	bgt.n	8007aa6 <USBH_ParseDevDesc+0xaa>
 8007a86:	2b08      	cmp	r3, #8
 8007a88:	db0f      	blt.n	8007aaa <USBH_ParseDevDesc+0xae>
 8007a8a:	3b08      	subs	r3, #8
 8007a8c:	4a32      	ldr	r2, [pc, #200]	@ (8007b58 <USBH_ParseDevDesc+0x15c>)
 8007a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	bf14      	ite	ne
 8007a9a:	2301      	movne	r3, #1
 8007a9c:	2300      	moveq	r3, #0
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d106      	bne.n	8007ab2 <USBH_ParseDevDesc+0xb6>
 8007aa4:	e001      	b.n	8007aaa <USBH_ParseDevDesc+0xae>
 8007aa6:	2b40      	cmp	r3, #64	@ 0x40
 8007aa8:	d003      	beq.n	8007ab2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	2208      	movs	r2, #8
 8007aae:	71da      	strb	r2, [r3, #7]
        break;
 8007ab0:	e000      	b.n	8007ab4 <USBH_ParseDevDesc+0xb8>
        break;
 8007ab2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007ab4:	e00e      	b.n	8007ad4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d107      	bne.n	8007ad0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	79db      	ldrb	r3, [r3, #7]
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d005      	beq.n	8007ad4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	2208      	movs	r2, #8
 8007acc:	71da      	strb	r2, [r3, #7]
 8007ace:	e001      	b.n	8007ad4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007ad4:	88fb      	ldrh	r3, [r7, #6]
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d936      	bls.n	8007b48 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	3308      	adds	r3, #8
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	3309      	adds	r3, #9
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	021b      	lsls	r3, r3, #8
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	4313      	orrs	r3, r2
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	330a      	adds	r3, #10
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	330b      	adds	r3, #11
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	021b      	lsls	r3, r3, #8
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	4313      	orrs	r3, r2
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	330c      	adds	r3, #12
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	461a      	mov	r2, r3
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	330d      	adds	r3, #13
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	021b      	lsls	r3, r3, #8
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	4313      	orrs	r3, r2
 8007b22:	b29a      	uxth	r2, r3
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	7b9a      	ldrb	r2, [r3, #14]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	7bda      	ldrb	r2, [r3, #15]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	7c1a      	ldrb	r2, [r3, #16]
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	7c5a      	ldrb	r2, [r3, #17]
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	371c      	adds	r7, #28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	01000101 	.word	0x01000101

08007b5c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08c      	sub	sp, #48	@ 0x30
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	4613      	mov	r3, r2
 8007b68:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007b70:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d101      	bne.n	8007b8e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e0de      	b.n	8007d4c <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b09      	cmp	r3, #9
 8007b98:	d002      	beq.n	8007ba0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9c:	2209      	movs	r2, #9
 8007b9e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	785a      	ldrb	r2, [r3, #1]
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	3302      	adds	r3, #2
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	3303      	adds	r3, #3
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bca:	bf28      	it	cs
 8007bcc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	791a      	ldrb	r2, [r3, #4]
 8007bda:	6a3b      	ldr	r3, [r7, #32]
 8007bdc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	795a      	ldrb	r2, [r3, #5]
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	799a      	ldrb	r2, [r3, #6]
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	79da      	ldrb	r2, [r3, #7]
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	7a1a      	ldrb	r2, [r3, #8]
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007bfe:	88fb      	ldrh	r3, [r7, #6]
 8007c00:	2b09      	cmp	r3, #9
 8007c02:	f240 80a1 	bls.w	8007d48 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8007c06:	2309      	movs	r3, #9
 8007c08:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c0e:	e085      	b.n	8007d1c <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c10:	f107 0316 	add.w	r3, r7, #22
 8007c14:	4619      	mov	r1, r3
 8007c16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c18:	f000 f9e6 	bl	8007fe8 <USBH_GetNextDesc>
 8007c1c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d17a      	bne.n	8007d1c <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2b09      	cmp	r3, #9
 8007c2c:	d002      	beq.n	8007c34 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c30:	2209      	movs	r2, #9
 8007c32:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007c34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c38:	221a      	movs	r2, #26
 8007c3a:	fb02 f303 	mul.w	r3, r2, r3
 8007c3e:	3308      	adds	r3, #8
 8007c40:	6a3a      	ldr	r2, [r7, #32]
 8007c42:	4413      	add	r3, r2
 8007c44:	3302      	adds	r3, #2
 8007c46:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c4a:	69f8      	ldr	r0, [r7, #28]
 8007c4c:	f000 f882 	bl	8007d54 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007c56:	2300      	movs	r3, #0
 8007c58:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c5a:	e043      	b.n	8007ce4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007c5c:	f107 0316 	add.w	r3, r7, #22
 8007c60:	4619      	mov	r1, r3
 8007c62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c64:	f000 f9c0 	bl	8007fe8 <USBH_GetNextDesc>
 8007c68:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6c:	785b      	ldrb	r3, [r3, #1]
 8007c6e:	2b05      	cmp	r3, #5
 8007c70:	d138      	bne.n	8007ce4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	795b      	ldrb	r3, [r3, #5]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d113      	bne.n	8007ca2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d003      	beq.n	8007c8a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	799b      	ldrb	r3, [r3, #6]
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d10b      	bne.n	8007ca2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	79db      	ldrb	r3, [r3, #7]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10b      	bne.n	8007caa <USBH_ParseCfgDesc+0x14e>
 8007c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b09      	cmp	r3, #9
 8007c98:	d007      	beq.n	8007caa <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9c:	2209      	movs	r2, #9
 8007c9e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ca0:	e003      	b.n	8007caa <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca4:	2207      	movs	r2, #7
 8007ca6:	701a      	strb	r2, [r3, #0]
 8007ca8:	e000      	b.n	8007cac <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007caa:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007cac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007cb0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007cb4:	3201      	adds	r2, #1
 8007cb6:	00d2      	lsls	r2, r2, #3
 8007cb8:	211a      	movs	r1, #26
 8007cba:	fb01 f303 	mul.w	r3, r1, r3
 8007cbe:	4413      	add	r3, r2
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	6a3a      	ldr	r2, [r7, #32]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007cca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ccc:	69b9      	ldr	r1, [r7, #24]
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 f86f 	bl	8007db2 <USBH_ParseEPDesc>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007cda:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007cde:	3301      	adds	r3, #1
 8007ce0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ce4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d80a      	bhi.n	8007d02 <USBH_ParseCfgDesc+0x1a6>
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	791b      	ldrb	r3, [r3, #4]
 8007cf0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d204      	bcs.n	8007d02 <USBH_ParseCfgDesc+0x1a6>
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	885a      	ldrh	r2, [r3, #2]
 8007cfc:	8afb      	ldrh	r3, [r7, #22]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d8ac      	bhi.n	8007c5c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	791b      	ldrb	r3, [r3, #4]
 8007d06:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d201      	bcs.n	8007d12 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e01c      	b.n	8007d4c <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8007d12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d16:	3301      	adds	r3, #1
 8007d18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d805      	bhi.n	8007d30 <USBH_ParseCfgDesc+0x1d4>
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	885a      	ldrh	r2, [r3, #2]
 8007d28:	8afb      	ldrh	r3, [r7, #22]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	f63f af70 	bhi.w	8007c10 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	791b      	ldrb	r3, [r3, #4]
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	bf28      	it	cs
 8007d38:	2302      	movcs	r3, #2
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d201      	bcs.n	8007d48 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e001      	b.n	8007d4c <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8007d48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3730      	adds	r7, #48	@ 0x30
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781a      	ldrb	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	785a      	ldrb	r2, [r3, #1]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	789a      	ldrb	r2, [r3, #2]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	78da      	ldrb	r2, [r3, #3]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	791a      	ldrb	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	795a      	ldrb	r2, [r3, #5]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	799a      	ldrb	r2, [r3, #6]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	79da      	ldrb	r2, [r3, #7]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	7a1a      	ldrb	r2, [r3, #8]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	721a      	strb	r2, [r3, #8]
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b087      	sub	sp, #28
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	781a      	ldrb	r2, [r3, #0]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	785a      	ldrb	r2, [r3, #1]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	789a      	ldrb	r2, [r3, #2]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	78da      	ldrb	r2, [r3, #3]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3304      	adds	r3, #4
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	3305      	adds	r3, #5
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	021b      	lsls	r3, r3, #8
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	4313      	orrs	r3, r2
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	799a      	ldrb	r2, [r3, #6]
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	889b      	ldrh	r3, [r3, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d009      	beq.n	8007e20 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e14:	d804      	bhi.n	8007e20 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e1e:	d901      	bls.n	8007e24 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007e20:	2303      	movs	r3, #3
 8007e22:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d136      	bne.n	8007e9c <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	78db      	ldrb	r3, [r3, #3]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d108      	bne.n	8007e4c <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	889b      	ldrh	r3, [r3, #4]
 8007e3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e42:	f240 8097 	bls.w	8007f74 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007e46:	2303      	movs	r3, #3
 8007e48:	75fb      	strb	r3, [r7, #23]
 8007e4a:	e093      	b.n	8007f74 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	78db      	ldrb	r3, [r3, #3]
 8007e50:	f003 0303 	and.w	r3, r3, #3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d107      	bne.n	8007e68 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	889b      	ldrh	r3, [r3, #4]
 8007e5c:	2b40      	cmp	r3, #64	@ 0x40
 8007e5e:	f240 8089 	bls.w	8007f74 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007e62:	2303      	movs	r3, #3
 8007e64:	75fb      	strb	r3, [r7, #23]
 8007e66:	e085      	b.n	8007f74 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	78db      	ldrb	r3, [r3, #3]
 8007e6c:	f003 0303 	and.w	r3, r3, #3
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d005      	beq.n	8007e80 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	78db      	ldrb	r3, [r3, #3]
 8007e78:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d10a      	bne.n	8007e96 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	799b      	ldrb	r3, [r3, #6]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <USBH_ParseEPDesc+0xde>
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	799b      	ldrb	r3, [r3, #6]
 8007e8c:	2b10      	cmp	r3, #16
 8007e8e:	d970      	bls.n	8007f72 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007e90:	2303      	movs	r3, #3
 8007e92:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e94:	e06d      	b.n	8007f72 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007e96:	2303      	movs	r3, #3
 8007e98:	75fb      	strb	r3, [r7, #23]
 8007e9a:	e06b      	b.n	8007f74 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d13c      	bne.n	8007f20 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	78db      	ldrb	r3, [r3, #3]
 8007eaa:	f003 0303 	and.w	r3, r3, #3
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	d005      	beq.n	8007ebe <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	78db      	ldrb	r3, [r3, #3]
 8007eb6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d106      	bne.n	8007ecc <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	889b      	ldrh	r3, [r3, #4]
 8007ec2:	2b40      	cmp	r3, #64	@ 0x40
 8007ec4:	d956      	bls.n	8007f74 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007eca:	e053      	b.n	8007f74 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	78db      	ldrb	r3, [r3, #3]
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d10e      	bne.n	8007ef6 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	799b      	ldrb	r3, [r3, #6]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d007      	beq.n	8007ef0 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007ee4:	2b10      	cmp	r3, #16
 8007ee6:	d803      	bhi.n	8007ef0 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007eec:	2b40      	cmp	r3, #64	@ 0x40
 8007eee:	d941      	bls.n	8007f74 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	75fb      	strb	r3, [r7, #23]
 8007ef4:	e03e      	b.n	8007f74 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	78db      	ldrb	r3, [r3, #3]
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d10b      	bne.n	8007f1a <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	799b      	ldrb	r3, [r3, #6]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d004      	beq.n	8007f14 <USBH_ParseEPDesc+0x162>
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	889b      	ldrh	r3, [r3, #4]
 8007f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f12:	d32f      	bcc.n	8007f74 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007f14:	2303      	movs	r3, #3
 8007f16:	75fb      	strb	r3, [r7, #23]
 8007f18:	e02c      	b.n	8007f74 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	75fb      	strb	r3, [r7, #23]
 8007f1e:	e029      	b.n	8007f74 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d120      	bne.n	8007f6c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	78db      	ldrb	r3, [r3, #3]
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d106      	bne.n	8007f44 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	889b      	ldrh	r3, [r3, #4]
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	d01a      	beq.n	8007f74 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	75fb      	strb	r3, [r7, #23]
 8007f42:	e017      	b.n	8007f74 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	78db      	ldrb	r3, [r3, #3]
 8007f48:	f003 0303 	and.w	r3, r3, #3
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d10a      	bne.n	8007f66 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	799b      	ldrb	r3, [r3, #6]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <USBH_ParseEPDesc+0x1ae>
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	889b      	ldrh	r3, [r3, #4]
 8007f5c:	2b08      	cmp	r3, #8
 8007f5e:	d909      	bls.n	8007f74 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007f60:	2303      	movs	r3, #3
 8007f62:	75fb      	strb	r3, [r7, #23]
 8007f64:	e006      	b.n	8007f74 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007f66:	2303      	movs	r3, #3
 8007f68:	75fb      	strb	r3, [r7, #23]
 8007f6a:	e003      	b.n	8007f74 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	75fb      	strb	r3, [r7, #23]
 8007f70:	e000      	b.n	8007f74 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007f72:	bf00      	nop
  }

  return status;
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b087      	sub	sp, #28
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	60b9      	str	r1, [r7, #8]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	3301      	adds	r3, #1
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	2b03      	cmp	r3, #3
 8007f98:	d120      	bne.n	8007fdc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	1e9a      	subs	r2, r3, #2
 8007fa0:	88fb      	ldrh	r3, [r7, #6]
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	bf28      	it	cs
 8007fa6:	4613      	movcs	r3, r2
 8007fa8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3302      	adds	r3, #2
 8007fae:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	82fb      	strh	r3, [r7, #22]
 8007fb4:	e00b      	b.n	8007fce <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007fb6:	8afb      	ldrh	r3, [r7, #22]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	781a      	ldrb	r2, [r3, #0]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007fc8:	8afb      	ldrh	r3, [r7, #22]
 8007fca:	3302      	adds	r3, #2
 8007fcc:	82fb      	strh	r3, [r7, #22]
 8007fce:	8afa      	ldrh	r2, [r7, #22]
 8007fd0:	8abb      	ldrh	r3, [r7, #20]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d3ef      	bcc.n	8007fb6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	701a      	strb	r2, [r3, #0]
  }
}
 8007fdc:	bf00      	nop
 8007fde:	371c      	adds	r7, #28
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	7812      	ldrb	r2, [r2, #0]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4413      	add	r3, r2
 800800c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800800e:	68fb      	ldr	r3, [r7, #12]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800802a:	2301      	movs	r3, #1
 800802c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	789b      	ldrb	r3, [r3, #2]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d002      	beq.n	800803c <USBH_CtlReq+0x20>
 8008036:	2b02      	cmp	r3, #2
 8008038:	d00f      	beq.n	800805a <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 800803a:	e027      	b.n	800808c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	88fa      	ldrh	r2, [r7, #6]
 8008046:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2201      	movs	r2, #1
 800804c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2202      	movs	r2, #2
 8008052:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008054:	2301      	movs	r3, #1
 8008056:	75fb      	strb	r3, [r7, #23]
      break;
 8008058:	e018      	b.n	800808c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 f81c 	bl	8008098 <USBH_HandleControl>
 8008060:	4603      	mov	r3, r0
 8008062:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d002      	beq.n	8008070 <USBH_CtlReq+0x54>
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	2b03      	cmp	r3, #3
 800806e:	d106      	bne.n	800807e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2201      	movs	r2, #1
 8008074:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	761a      	strb	r2, [r3, #24]
      break;
 800807c:	e005      	b.n	800808a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800807e:	7dfb      	ldrb	r3, [r7, #23]
 8008080:	2b02      	cmp	r3, #2
 8008082:	d102      	bne.n	800808a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2201      	movs	r2, #1
 8008088:	709a      	strb	r2, [r3, #2]
      break;
 800808a:	bf00      	nop
  }
  return status;
 800808c:	7dfb      	ldrb	r3, [r7, #23]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af02      	add	r7, sp, #8
 800809e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80080a0:	2301      	movs	r3, #1
 80080a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	7e1b      	ldrb	r3, [r3, #24]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	2b0a      	cmp	r3, #10
 80080b0:	f200 8157 	bhi.w	8008362 <USBH_HandleControl+0x2ca>
 80080b4:	a201      	add	r2, pc, #4	@ (adr r2, 80080bc <USBH_HandleControl+0x24>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	080080e9 	.word	0x080080e9
 80080c0:	08008103 	.word	0x08008103
 80080c4:	0800816d 	.word	0x0800816d
 80080c8:	08008193 	.word	0x08008193
 80080cc:	080081cd 	.word	0x080081cd
 80080d0:	080081f7 	.word	0x080081f7
 80080d4:	08008249 	.word	0x08008249
 80080d8:	0800826b 	.word	0x0800826b
 80080dc:	080082a7 	.word	0x080082a7
 80080e0:	080082cd 	.word	0x080082cd
 80080e4:	0800830b 	.word	0x0800830b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f103 0110 	add.w	r1, r3, #16
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	795b      	ldrb	r3, [r3, #5]
 80080f2:	461a      	mov	r2, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f945 	bl	8008384 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2202      	movs	r2, #2
 80080fe:	761a      	strb	r2, [r3, #24]
      break;
 8008100:	e13a      	b.n	8008378 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	795b      	ldrb	r3, [r3, #5]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fcb5 	bl	8008a78 <USBH_LL_GetURBState>
 800810e:	4603      	mov	r3, r0
 8008110:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008112:	7bbb      	ldrb	r3, [r7, #14]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d11e      	bne.n	8008156 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	7c1b      	ldrb	r3, [r3, #16]
 800811c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008120:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	8adb      	ldrh	r3, [r3, #22]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800812a:	7b7b      	ldrb	r3, [r7, #13]
 800812c:	2b80      	cmp	r3, #128	@ 0x80
 800812e:	d103      	bne.n	8008138 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2203      	movs	r2, #3
 8008134:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008136:	e116      	b.n	8008366 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2205      	movs	r2, #5
 800813c:	761a      	strb	r2, [r3, #24]
      break;
 800813e:	e112      	b.n	8008366 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8008140:	7b7b      	ldrb	r3, [r7, #13]
 8008142:	2b80      	cmp	r3, #128	@ 0x80
 8008144:	d103      	bne.n	800814e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2209      	movs	r2, #9
 800814a:	761a      	strb	r2, [r3, #24]
      break;
 800814c:	e10b      	b.n	8008366 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2207      	movs	r2, #7
 8008152:	761a      	strb	r2, [r3, #24]
      break;
 8008154:	e107      	b.n	8008366 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	2b04      	cmp	r3, #4
 800815a:	d003      	beq.n	8008164 <USBH_HandleControl+0xcc>
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	2b02      	cmp	r3, #2
 8008160:	f040 8101 	bne.w	8008366 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	220b      	movs	r2, #11
 8008168:	761a      	strb	r2, [r3, #24]
      break;
 800816a:	e0fc      	b.n	8008366 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008172:	b29a      	uxth	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6899      	ldr	r1, [r3, #8]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	899a      	ldrh	r2, [r3, #12]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	791b      	ldrb	r3, [r3, #4]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f93c 	bl	8008402 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2204      	movs	r2, #4
 800818e:	761a      	strb	r2, [r3, #24]
      break;
 8008190:	e0f2      	b.n	8008378 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	791b      	ldrb	r3, [r3, #4]
 8008196:	4619      	mov	r1, r3
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fc6d 	bl	8008a78 <USBH_LL_GetURBState>
 800819e:	4603      	mov	r3, r0
 80081a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d103      	bne.n	80081b0 <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2209      	movs	r2, #9
 80081ac:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80081ae:	e0dc      	b.n	800836a <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	2b05      	cmp	r3, #5
 80081b4:	d102      	bne.n	80081bc <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 80081b6:	2303      	movs	r3, #3
 80081b8:	73fb      	strb	r3, [r7, #15]
      break;
 80081ba:	e0d6      	b.n	800836a <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	2b04      	cmp	r3, #4
 80081c0:	f040 80d3 	bne.w	800836a <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	220b      	movs	r2, #11
 80081c8:	761a      	strb	r2, [r3, #24]
      break;
 80081ca:	e0ce      	b.n	800836a <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6899      	ldr	r1, [r3, #8]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	899a      	ldrh	r2, [r3, #12]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	795b      	ldrb	r3, [r3, #5]
 80081d8:	2001      	movs	r0, #1
 80081da:	9000      	str	r0, [sp, #0]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f8eb 	bl	80083b8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2206      	movs	r2, #6
 80081f2:	761a      	strb	r2, [r3, #24]
      break;
 80081f4:	e0c0      	b.n	8008378 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	795b      	ldrb	r3, [r3, #5]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 fc3b 	bl	8008a78 <USBH_LL_GetURBState>
 8008202:	4603      	mov	r3, r0
 8008204:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d103      	bne.n	8008214 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2207      	movs	r2, #7
 8008210:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008212:	e0ac      	b.n	800836e <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8008214:	7bbb      	ldrb	r3, [r7, #14]
 8008216:	2b05      	cmp	r3, #5
 8008218:	d105      	bne.n	8008226 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	220c      	movs	r2, #12
 800821e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008220:	2303      	movs	r3, #3
 8008222:	73fb      	strb	r3, [r7, #15]
      break;
 8008224:	e0a3      	b.n	800836e <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	2b02      	cmp	r3, #2
 800822a:	d103      	bne.n	8008234 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2205      	movs	r2, #5
 8008230:	761a      	strb	r2, [r3, #24]
      break;
 8008232:	e09c      	b.n	800836e <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	2b04      	cmp	r3, #4
 8008238:	f040 8099 	bne.w	800836e <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	220b      	movs	r2, #11
 8008240:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008242:	2302      	movs	r3, #2
 8008244:	73fb      	strb	r3, [r7, #15]
      break;
 8008246:	e092      	b.n	800836e <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	791b      	ldrb	r3, [r3, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	2100      	movs	r1, #0
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f8d6 	bl	8008402 <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800825c:	b29a      	uxth	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2208      	movs	r2, #8
 8008266:	761a      	strb	r2, [r3, #24]

      break;
 8008268:	e086      	b.n	8008378 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	791b      	ldrb	r3, [r3, #4]
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fc01 	bl	8008a78 <USBH_LL_GetURBState>
 8008276:	4603      	mov	r3, r0
 8008278:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800827a:	7bbb      	ldrb	r3, [r7, #14]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d105      	bne.n	800828c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	220d      	movs	r2, #13
 8008284:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 800828a:	e072      	b.n	8008372 <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 800828c:	7bbb      	ldrb	r3, [r7, #14]
 800828e:	2b04      	cmp	r3, #4
 8008290:	d103      	bne.n	800829a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	220b      	movs	r2, #11
 8008296:	761a      	strb	r2, [r3, #24]
      break;
 8008298:	e06b      	b.n	8008372 <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b05      	cmp	r3, #5
 800829e:	d168      	bne.n	8008372 <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 80082a0:	2303      	movs	r3, #3
 80082a2:	73fb      	strb	r3, [r7, #15]
      break;
 80082a4:	e065      	b.n	8008372 <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	795b      	ldrb	r3, [r3, #5]
 80082aa:	2201      	movs	r2, #1
 80082ac:	9200      	str	r2, [sp, #0]
 80082ae:	2200      	movs	r2, #0
 80082b0:	2100      	movs	r1, #0
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f880 	bl	80083b8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80082be:	b29a      	uxth	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	220a      	movs	r2, #10
 80082c8:	761a      	strb	r2, [r3, #24]
      break;
 80082ca:	e055      	b.n	8008378 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	795b      	ldrb	r3, [r3, #5]
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fbd0 	bl	8008a78 <USBH_LL_GetURBState>
 80082d8:	4603      	mov	r3, r0
 80082da:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d105      	bne.n	80082ee <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	220d      	movs	r2, #13
 80082ea:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 80082ec:	e043      	b.n	8008376 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d103      	bne.n	80082fc <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2209      	movs	r2, #9
 80082f8:	761a      	strb	r2, [r3, #24]
      break;
 80082fa:	e03c      	b.n	8008376 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b04      	cmp	r3, #4
 8008300:	d139      	bne.n	8008376 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	220b      	movs	r2, #11
 8008306:	761a      	strb	r2, [r3, #24]
      break;
 8008308:	e035      	b.n	8008376 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	7e5b      	ldrb	r3, [r3, #25]
 800830e:	3301      	adds	r3, #1
 8008310:	b2da      	uxtb	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	765a      	strb	r2, [r3, #25]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	7e5b      	ldrb	r3, [r3, #25]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d806      	bhi.n	800832c <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800832a:	e025      	b.n	8008378 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008332:	2106      	movs	r1, #6
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	795b      	ldrb	r3, [r3, #5]
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f90d 	bl	8008564 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	791b      	ldrb	r3, [r3, #4]
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f907 	bl	8008564 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800835c:	2302      	movs	r3, #2
 800835e:	73fb      	strb	r3, [r7, #15]
      break;
 8008360:	e00a      	b.n	8008378 <USBH_HandleControl+0x2e0>

    default:
      break;
 8008362:	bf00      	nop
 8008364:	e008      	b.n	8008378 <USBH_HandleControl+0x2e0>
      break;
 8008366:	bf00      	nop
 8008368:	e006      	b.n	8008378 <USBH_HandleControl+0x2e0>
      break;
 800836a:	bf00      	nop
 800836c:	e004      	b.n	8008378 <USBH_HandleControl+0x2e0>
      break;
 800836e:	bf00      	nop
 8008370:	e002      	b.n	8008378 <USBH_HandleControl+0x2e0>
      break;
 8008372:	bf00      	nop
 8008374:	e000      	b.n	8008378 <USBH_HandleControl+0x2e0>
      break;
 8008376:	bf00      	nop
  }

  return status;
 8008378:	7bfb      	ldrb	r3, [r7, #15]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop

08008384 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b088      	sub	sp, #32
 8008388:	af04      	add	r7, sp, #16
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	4613      	mov	r3, r2
 8008390:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008392:	79f9      	ldrb	r1, [r7, #7]
 8008394:	2300      	movs	r3, #0
 8008396:	9303      	str	r3, [sp, #12]
 8008398:	2308      	movs	r3, #8
 800839a:	9302      	str	r3, [sp, #8]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	9301      	str	r3, [sp, #4]
 80083a0:	2300      	movs	r3, #0
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	2300      	movs	r3, #0
 80083a6:	2200      	movs	r2, #0
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 fb34 	bl	8008a16 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af04      	add	r7, sp, #16
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	4611      	mov	r1, r2
 80083c4:	461a      	mov	r2, r3
 80083c6:	460b      	mov	r3, r1
 80083c8:	80fb      	strh	r3, [r7, #6]
 80083ca:	4613      	mov	r3, r2
 80083cc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80083d8:	2300      	movs	r3, #0
 80083da:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80083dc:	7979      	ldrb	r1, [r7, #5]
 80083de:	7e3b      	ldrb	r3, [r7, #24]
 80083e0:	9303      	str	r3, [sp, #12]
 80083e2:	88fb      	ldrh	r3, [r7, #6]
 80083e4:	9302      	str	r3, [sp, #8]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	2301      	movs	r3, #1
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	2300      	movs	r3, #0
 80083f0:	2200      	movs	r2, #0
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 fb0f 	bl	8008a16 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b088      	sub	sp, #32
 8008406:	af04      	add	r7, sp, #16
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	4611      	mov	r1, r2
 800840e:	461a      	mov	r2, r3
 8008410:	460b      	mov	r3, r1
 8008412:	80fb      	strh	r3, [r7, #6]
 8008414:	4613      	mov	r3, r2
 8008416:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008418:	7979      	ldrb	r1, [r7, #5]
 800841a:	2300      	movs	r3, #0
 800841c:	9303      	str	r3, [sp, #12]
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	9302      	str	r3, [sp, #8]
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	2301      	movs	r3, #1
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	2300      	movs	r3, #0
 800842c:	2201      	movs	r2, #1
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f000 faf1 	bl	8008a16 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008434:	2300      	movs	r3, #0

}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b088      	sub	sp, #32
 8008442:	af04      	add	r7, sp, #16
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	4611      	mov	r1, r2
 800844a:	461a      	mov	r2, r3
 800844c:	460b      	mov	r3, r1
 800844e:	80fb      	strh	r3, [r7, #6]
 8008450:	4613      	mov	r3, r2
 8008452:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800845e:	2300      	movs	r3, #0
 8008460:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008462:	7979      	ldrb	r1, [r7, #5]
 8008464:	7e3b      	ldrb	r3, [r7, #24]
 8008466:	9303      	str	r3, [sp, #12]
 8008468:	88fb      	ldrh	r3, [r7, #6]
 800846a:	9302      	str	r3, [sp, #8]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	2301      	movs	r3, #1
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	2302      	movs	r3, #2
 8008476:	2200      	movs	r2, #0
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f000 facc 	bl	8008a16 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af04      	add	r7, sp, #16
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	4611      	mov	r1, r2
 8008494:	461a      	mov	r2, r3
 8008496:	460b      	mov	r3, r1
 8008498:	80fb      	strh	r3, [r7, #6]
 800849a:	4613      	mov	r3, r2
 800849c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800849e:	7979      	ldrb	r1, [r7, #5]
 80084a0:	2300      	movs	r3, #0
 80084a2:	9303      	str	r3, [sp, #12]
 80084a4:	88fb      	ldrh	r3, [r7, #6]
 80084a6:	9302      	str	r3, [sp, #8]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	9301      	str	r3, [sp, #4]
 80084ac:	2301      	movs	r3, #1
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	2302      	movs	r3, #2
 80084b2:	2201      	movs	r2, #1
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 faae 	bl	8008a16 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af04      	add	r7, sp, #16
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	4608      	mov	r0, r1
 80084ce:	4611      	mov	r1, r2
 80084d0:	461a      	mov	r2, r3
 80084d2:	4603      	mov	r3, r0
 80084d4:	70fb      	strb	r3, [r7, #3]
 80084d6:	460b      	mov	r3, r1
 80084d8:	70bb      	strb	r3, [r7, #2]
 80084da:	4613      	mov	r3, r2
 80084dc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80084de:	7878      	ldrb	r0, [r7, #1]
 80084e0:	78ba      	ldrb	r2, [r7, #2]
 80084e2:	78f9      	ldrb	r1, [r7, #3]
 80084e4:	8b3b      	ldrh	r3, [r7, #24]
 80084e6:	9302      	str	r3, [sp, #8]
 80084e8:	7d3b      	ldrb	r3, [r7, #20]
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	7c3b      	ldrb	r3, [r7, #16]
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	4603      	mov	r3, r0
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa53 	bl	800899e <USBH_LL_OpenPipe>

  return USBH_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b082      	sub	sp, #8
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	460b      	mov	r3, r1
 800850c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	4619      	mov	r1, r3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fa72 	bl	80089fc <USBH_LL_ClosePipe>

  return USBH_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	460b      	mov	r3, r1
 800852c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f836 	bl	80085a0 <USBH_GetFreePipe>
 8008534:	4603      	mov	r3, r0
 8008536:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008538:	89fb      	ldrh	r3, [r7, #14]
 800853a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800853e:	4293      	cmp	r3, r2
 8008540:	d00a      	beq.n	8008558 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008542:	78fa      	ldrb	r2, [r7, #3]
 8008544:	89fb      	ldrh	r3, [r7, #14]
 8008546:	f003 030f 	and.w	r3, r3, #15
 800854a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	33e0      	adds	r3, #224	@ 0xe0
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	440b      	add	r3, r1
 8008556:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008558:	89fb      	ldrh	r3, [r7, #14]
 800855a:	b2db      	uxtb	r3, r3
}
 800855c:	4618      	mov	r0, r3
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	2b0f      	cmp	r3, #15
 8008574:	d80d      	bhi.n	8008592 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008576:	78fb      	ldrb	r3, [r7, #3]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	33e0      	adds	r3, #224	@ 0xe0
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008588:	6879      	ldr	r1, [r7, #4]
 800858a:	33e0      	adds	r3, #224	@ 0xe0
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	440b      	add	r3, r1
 8008590:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80085ac:	2300      	movs	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
 80085b0:	e00f      	b.n	80085d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	33e0      	adds	r3, #224	@ 0xe0
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d102      	bne.n	80085cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	e007      	b.n	80085dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
 80085ce:	3301      	adds	r3, #1
 80085d0:	73fb      	strb	r3, [r7, #15]
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	2b0f      	cmp	r3, #15
 80085d6:	d9ec      	bls.n	80085b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80085d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80085ec:	2201      	movs	r2, #1
 80085ee:	490e      	ldr	r1, [pc, #56]	@ (8008628 <MX_USB_HOST_Init+0x40>)
 80085f0:	480e      	ldr	r0, [pc, #56]	@ (800862c <MX_USB_HOST_Init+0x44>)
 80085f2:	f7fe fb0f 	bl	8006c14 <USBH_Init>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80085fc:	f7f8 fb34 	bl	8000c68 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008600:	490b      	ldr	r1, [pc, #44]	@ (8008630 <MX_USB_HOST_Init+0x48>)
 8008602:	480a      	ldr	r0, [pc, #40]	@ (800862c <MX_USB_HOST_Init+0x44>)
 8008604:	f7fe fbb1 	bl	8006d6a <USBH_RegisterClass>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800860e:	f7f8 fb2b 	bl	8000c68 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008612:	4806      	ldr	r0, [pc, #24]	@ (800862c <MX_USB_HOST_Init+0x44>)
 8008614:	f7fe fc35 	bl	8006e82 <USBH_Start>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800861e:	f7f8 fb23 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008622:	bf00      	nop
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	08008649 	.word	0x08008649
 800862c:	20000198 	.word	0x20000198
 8008630:	2000000c 	.word	0x2000000c

08008634 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008638:	4802      	ldr	r0, [pc, #8]	@ (8008644 <MX_USB_HOST_Process+0x10>)
 800863a:	f7fe fc33 	bl	8006ea4 <USBH_Process>
}
 800863e:	bf00      	nop
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20000198 	.word	0x20000198

08008648 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	460b      	mov	r3, r1
 8008652:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	3b01      	subs	r3, #1
 8008658:	2b04      	cmp	r3, #4
 800865a:	d819      	bhi.n	8008690 <USBH_UserProcess+0x48>
 800865c:	a201      	add	r2, pc, #4	@ (adr r2, 8008664 <USBH_UserProcess+0x1c>)
 800865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008662:	bf00      	nop
 8008664:	08008691 	.word	0x08008691
 8008668:	08008681 	.word	0x08008681
 800866c:	08008691 	.word	0x08008691
 8008670:	08008689 	.word	0x08008689
 8008674:	08008679 	.word	0x08008679
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008678:	4b09      	ldr	r3, [pc, #36]	@ (80086a0 <USBH_UserProcess+0x58>)
 800867a:	2203      	movs	r2, #3
 800867c:	701a      	strb	r2, [r3, #0]
  break;
 800867e:	e008      	b.n	8008692 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008680:	4b07      	ldr	r3, [pc, #28]	@ (80086a0 <USBH_UserProcess+0x58>)
 8008682:	2202      	movs	r2, #2
 8008684:	701a      	strb	r2, [r3, #0]
  break;
 8008686:	e004      	b.n	8008692 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008688:	4b05      	ldr	r3, [pc, #20]	@ (80086a0 <USBH_UserProcess+0x58>)
 800868a:	2201      	movs	r2, #1
 800868c:	701a      	strb	r2, [r3, #0]
  break;
 800868e:	e000      	b.n	8008692 <USBH_UserProcess+0x4a>

  default:
  break;
 8008690:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008692:	bf00      	nop
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	20000570 	.word	0x20000570

080086a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08a      	sub	sp, #40	@ 0x28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086ac:	f107 0314 	add.w	r3, r7, #20
 80086b0:	2200      	movs	r2, #0
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	605a      	str	r2, [r3, #4]
 80086b6:	609a      	str	r2, [r3, #8]
 80086b8:	60da      	str	r2, [r3, #12]
 80086ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086c4:	d147      	bne.n	8008756 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086c6:	2300      	movs	r3, #0
 80086c8:	613b      	str	r3, [r7, #16]
 80086ca:	4b25      	ldr	r3, [pc, #148]	@ (8008760 <HAL_HCD_MspInit+0xbc>)
 80086cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ce:	4a24      	ldr	r2, [pc, #144]	@ (8008760 <HAL_HCD_MspInit+0xbc>)
 80086d0:	f043 0301 	orr.w	r3, r3, #1
 80086d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80086d6:	4b22      	ldr	r3, [pc, #136]	@ (8008760 <HAL_HCD_MspInit+0xbc>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	613b      	str	r3, [r7, #16]
 80086e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80086e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086e8:	2300      	movs	r3, #0
 80086ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ec:	2300      	movs	r3, #0
 80086ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80086f0:	f107 0314 	add.w	r3, r7, #20
 80086f4:	4619      	mov	r1, r3
 80086f6:	481b      	ldr	r0, [pc, #108]	@ (8008764 <HAL_HCD_MspInit+0xc0>)
 80086f8:	f7f8 fe5e 	bl	80013b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80086fc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008702:	2302      	movs	r3, #2
 8008704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008706:	2300      	movs	r3, #0
 8008708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800870a:	2300      	movs	r3, #0
 800870c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800870e:	230a      	movs	r3, #10
 8008710:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008712:	f107 0314 	add.w	r3, r7, #20
 8008716:	4619      	mov	r1, r3
 8008718:	4812      	ldr	r0, [pc, #72]	@ (8008764 <HAL_HCD_MspInit+0xc0>)
 800871a:	f7f8 fe4d 	bl	80013b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800871e:	4b10      	ldr	r3, [pc, #64]	@ (8008760 <HAL_HCD_MspInit+0xbc>)
 8008720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008722:	4a0f      	ldr	r2, [pc, #60]	@ (8008760 <HAL_HCD_MspInit+0xbc>)
 8008724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008728:	6353      	str	r3, [r2, #52]	@ 0x34
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	4b0c      	ldr	r3, [pc, #48]	@ (8008760 <HAL_HCD_MspInit+0xbc>)
 8008730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008732:	4a0b      	ldr	r2, [pc, #44]	@ (8008760 <HAL_HCD_MspInit+0xbc>)
 8008734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008738:	6453      	str	r3, [r2, #68]	@ 0x44
 800873a:	4b09      	ldr	r3, [pc, #36]	@ (8008760 <HAL_HCD_MspInit+0xbc>)
 800873c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800873e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008746:	2200      	movs	r2, #0
 8008748:	2100      	movs	r1, #0
 800874a:	2043      	movs	r0, #67	@ 0x43
 800874c:	f7f8 fdfd 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008750:	2043      	movs	r0, #67	@ 0x43
 8008752:	f7f8 fe16 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008756:	bf00      	nop
 8008758:	3728      	adds	r7, #40	@ 0x28
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	40023800 	.word	0x40023800
 8008764:	40020000 	.word	0x40020000

08008768 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe ff6d 	bl	8007656 <USBH_LL_IncTimer>
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008792:	4618      	mov	r0, r3
 8008794:	f7fe ffa9 	bl	80076ea <USBH_LL_Connect>
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe ffb2 	bl	8007718 <USBH_LL_Disconnect>
}
 80087b4:	bf00      	nop
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70fb      	strb	r3, [r7, #3]
 80087c8:	4613      	mov	r3, r2
 80087ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7fe ff5f 	bl	80076aa <USBH_LL_PortEnabled>
}
 80087ec:	bf00      	nop
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008802:	4618      	mov	r0, r3
 8008804:	f7fe ff5f 	bl	80076c6 <USBH_LL_PortDisabled>
}
 8008808:	bf00      	nop
 800880a:	3708      	adds	r7, #8
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800881e:	2b01      	cmp	r3, #1
 8008820:	d12a      	bne.n	8008878 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008822:	4a18      	ldr	r2, [pc, #96]	@ (8008884 <USBH_LL_Init+0x74>)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a15      	ldr	r2, [pc, #84]	@ (8008884 <USBH_LL_Init+0x74>)
 800882e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008832:	4b14      	ldr	r3, [pc, #80]	@ (8008884 <USBH_LL_Init+0x74>)
 8008834:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008838:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800883a:	4b12      	ldr	r3, [pc, #72]	@ (8008884 <USBH_LL_Init+0x74>)
 800883c:	2208      	movs	r2, #8
 800883e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008840:	4b10      	ldr	r3, [pc, #64]	@ (8008884 <USBH_LL_Init+0x74>)
 8008842:	2201      	movs	r2, #1
 8008844:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008846:	4b0f      	ldr	r3, [pc, #60]	@ (8008884 <USBH_LL_Init+0x74>)
 8008848:	2200      	movs	r2, #0
 800884a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800884c:	4b0d      	ldr	r3, [pc, #52]	@ (8008884 <USBH_LL_Init+0x74>)
 800884e:	2202      	movs	r2, #2
 8008850:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008852:	4b0c      	ldr	r3, [pc, #48]	@ (8008884 <USBH_LL_Init+0x74>)
 8008854:	2200      	movs	r2, #0
 8008856:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008858:	480a      	ldr	r0, [pc, #40]	@ (8008884 <USBH_LL_Init+0x74>)
 800885a:	f7f8 ff86 	bl	800176a <HAL_HCD_Init>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008864:	f7f8 fa00 	bl	8000c68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008868:	4806      	ldr	r0, [pc, #24]	@ (8008884 <USBH_LL_Init+0x74>)
 800886a:	f7f9 fbc3 	bl	8001ff4 <HAL_HCD_GetCurrentFrame>
 800886e:	4603      	mov	r3, r0
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7fe fee0 	bl	8007638 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20000574 	.word	0x20000574

08008888 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800889e:	4618      	mov	r0, r3
 80088a0:	f7f9 fb30 	bl	8001f04 <HAL_HCD_Start>
 80088a4:	4603      	mov	r3, r0
 80088a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088a8:	7bfb      	ldrb	r3, [r7, #15]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 f94c 	bl	8008b48 <USBH_Get_USB_Status>
 80088b0:	4603      	mov	r3, r0
 80088b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b084      	sub	sp, #16
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7f9 fb38 	bl	8001f4a <HAL_HCD_Stop>
 80088da:	4603      	mov	r3, r0
 80088dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 f931 	bl	8008b48 <USBH_Get_USB_Status>
 80088e6:	4603      	mov	r3, r0
 80088e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80088fc:	2301      	movs	r3, #1
 80088fe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008906:	4618      	mov	r0, r3
 8008908:	f7f9 fb82 	bl	8002010 <HAL_HCD_GetCurrentSpeed>
 800890c:	4603      	mov	r3, r0
 800890e:	2b02      	cmp	r3, #2
 8008910:	d00c      	beq.n	800892c <USBH_LL_GetSpeed+0x38>
 8008912:	2b02      	cmp	r3, #2
 8008914:	d80d      	bhi.n	8008932 <USBH_LL_GetSpeed+0x3e>
 8008916:	2b00      	cmp	r3, #0
 8008918:	d002      	beq.n	8008920 <USBH_LL_GetSpeed+0x2c>
 800891a:	2b01      	cmp	r3, #1
 800891c:	d003      	beq.n	8008926 <USBH_LL_GetSpeed+0x32>
 800891e:	e008      	b.n	8008932 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008920:	2300      	movs	r3, #0
 8008922:	73fb      	strb	r3, [r7, #15]
    break;
 8008924:	e008      	b.n	8008938 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008926:	2301      	movs	r3, #1
 8008928:	73fb      	strb	r3, [r7, #15]
    break;
 800892a:	e005      	b.n	8008938 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800892c:	2302      	movs	r3, #2
 800892e:	73fb      	strb	r3, [r7, #15]
    break;
 8008930:	e002      	b.n	8008938 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008932:	2301      	movs	r3, #1
 8008934:	73fb      	strb	r3, [r7, #15]
    break;
 8008936:	bf00      	nop
  }
  return  speed;
 8008938:	7bfb      	ldrb	r3, [r7, #15]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800894e:	2300      	movs	r3, #0
 8008950:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008958:	4618      	mov	r0, r3
 800895a:	f7f9 fb13 	bl	8001f84 <HAL_HCD_ResetPort>
 800895e:	4603      	mov	r3, r0
 8008960:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	4618      	mov	r0, r3
 8008966:	f000 f8ef 	bl	8008b48 <USBH_Get_USB_Status>
 800896a:	4603      	mov	r3, r0
 800896c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800896e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800898a:	78fa      	ldrb	r2, [r7, #3]
 800898c:	4611      	mov	r1, r2
 800898e:	4618      	mov	r0, r3
 8008990:	f7f9 fb1b 	bl	8001fca <HAL_HCD_HC_GetXferCount>
 8008994:	4603      	mov	r3, r0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 800899e:	b590      	push	{r4, r7, lr}
 80089a0:	b089      	sub	sp, #36	@ 0x24
 80089a2:	af04      	add	r7, sp, #16
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	4608      	mov	r0, r1
 80089a8:	4611      	mov	r1, r2
 80089aa:	461a      	mov	r2, r3
 80089ac:	4603      	mov	r3, r0
 80089ae:	70fb      	strb	r3, [r7, #3]
 80089b0:	460b      	mov	r3, r1
 80089b2:	70bb      	strb	r3, [r7, #2]
 80089b4:	4613      	mov	r3, r2
 80089b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80089c6:	787c      	ldrb	r4, [r7, #1]
 80089c8:	78ba      	ldrb	r2, [r7, #2]
 80089ca:	78f9      	ldrb	r1, [r7, #3]
 80089cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80089ce:	9302      	str	r3, [sp, #8]
 80089d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	4623      	mov	r3, r4
 80089de:	f7f8 ff2b 	bl	8001838 <HAL_HCD_HC_Init>
 80089e2:	4603      	mov	r3, r0
 80089e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 f8ad 	bl	8008b48 <USBH_Get_USB_Status>
 80089ee:	4603      	mov	r3, r0
 80089f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd90      	pop	{r4, r7, pc}

080089fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008a16:	b590      	push	{r4, r7, lr}
 8008a18:	b089      	sub	sp, #36	@ 0x24
 8008a1a:	af04      	add	r7, sp, #16
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	4608      	mov	r0, r1
 8008a20:	4611      	mov	r1, r2
 8008a22:	461a      	mov	r2, r3
 8008a24:	4603      	mov	r3, r0
 8008a26:	70fb      	strb	r3, [r7, #3]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	70bb      	strb	r3, [r7, #2]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a30:	2300      	movs	r3, #0
 8008a32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008a3e:	787c      	ldrb	r4, [r7, #1]
 8008a40:	78ba      	ldrb	r2, [r7, #2]
 8008a42:	78f9      	ldrb	r1, [r7, #3]
 8008a44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a48:	9303      	str	r3, [sp, #12]
 8008a4a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008a4c:	9302      	str	r3, [sp, #8]
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a50:	9301      	str	r3, [sp, #4]
 8008a52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	4623      	mov	r3, r4
 8008a5a:	f7f8 ffa5 	bl	80019a8 <HAL_HCD_HC_SubmitRequest>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 f86f 	bl	8008b48 <USBH_Get_USB_Status>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd90      	pop	{r4, r7, pc}

08008a78 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	460b      	mov	r3, r1
 8008a82:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008a8a:	78fa      	ldrb	r2, [r7, #3]
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7f9 fa86 	bl	8001fa0 <HAL_HCD_HC_GetURBState>
 8008a94:	4603      	mov	r3, r0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b082      	sub	sp, #8
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d103      	bne.n	8008abc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f000 f872 	bl	8008ba0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008abc:	20c8      	movs	r0, #200	@ 0xc8
 8008abe:	f7f8 fb45 	bl	800114c <HAL_Delay>
  return USBH_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
 8008ad8:	4613      	mov	r3, r2
 8008ada:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008ae2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008ae4:	78fa      	ldrb	r2, [r7, #3]
 8008ae6:	68f9      	ldr	r1, [r7, #12]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	1a9b      	subs	r3, r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	440b      	add	r3, r1
 8008af2:	3317      	adds	r3, #23
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00a      	beq.n	8008b10 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008afa:	78fa      	ldrb	r2, [r7, #3]
 8008afc:	68f9      	ldr	r1, [r7, #12]
 8008afe:	4613      	mov	r3, r2
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	1a9b      	subs	r3, r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	440b      	add	r3, r1
 8008b08:	333c      	adds	r3, #60	@ 0x3c
 8008b0a:	78ba      	ldrb	r2, [r7, #2]
 8008b0c:	701a      	strb	r2, [r3, #0]
 8008b0e:	e009      	b.n	8008b24 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008b10:	78fa      	ldrb	r2, [r7, #3]
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	4613      	mov	r3, r2
 8008b16:	011b      	lsls	r3, r3, #4
 8008b18:	1a9b      	subs	r3, r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	440b      	add	r3, r1
 8008b1e:	333d      	adds	r3, #61	@ 0x3d
 8008b20:	78ba      	ldrb	r2, [r7, #2]
 8008b22:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b082      	sub	sp, #8
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7f8 fb06 	bl	800114c <HAL_Delay>
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d817      	bhi.n	8008b8c <USBH_Get_USB_Status+0x44>
 8008b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b64 <USBH_Get_USB_Status+0x1c>)
 8008b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b62:	bf00      	nop
 8008b64:	08008b75 	.word	0x08008b75
 8008b68:	08008b7b 	.word	0x08008b7b
 8008b6c:	08008b81 	.word	0x08008b81
 8008b70:	08008b87 	.word	0x08008b87
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
    break;
 8008b78:	e00b      	b.n	8008b92 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b7e:	e008      	b.n	8008b92 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008b80:	2301      	movs	r3, #1
 8008b82:	73fb      	strb	r3, [r7, #15]
    break;
 8008b84:	e005      	b.n	8008b92 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008b86:	2302      	movs	r3, #2
 8008b88:	73fb      	strb	r3, [r7, #15]
    break;
 8008b8a:	e002      	b.n	8008b92 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b90:	bf00      	nop
  }
  return usb_status;
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008baa:	79fb      	ldrb	r3, [r7, #7]
 8008bac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008bae:	79fb      	ldrb	r3, [r7, #7]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d102      	bne.n	8008bba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	73fb      	strb	r3, [r7, #15]
 8008bb8:	e001      	b.n	8008bbe <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	4803      	ldr	r0, [pc, #12]	@ (8008bd4 <MX_DriverVbusFS+0x34>)
 8008bc6:	f7f8 fd93 	bl	80016f0 <HAL_GPIO_WritePin>
}
 8008bca:	bf00      	nop
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	40020800 	.word	0x40020800

08008bd8 <malloc>:
 8008bd8:	4b02      	ldr	r3, [pc, #8]	@ (8008be4 <malloc+0xc>)
 8008bda:	4601      	mov	r1, r0
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	f000 b82d 	b.w	8008c3c <_malloc_r>
 8008be2:	bf00      	nop
 8008be4:	2000002c 	.word	0x2000002c

08008be8 <free>:
 8008be8:	4b02      	ldr	r3, [pc, #8]	@ (8008bf4 <free+0xc>)
 8008bea:	4601      	mov	r1, r0
 8008bec:	6818      	ldr	r0, [r3, #0]
 8008bee:	f000 b8f5 	b.w	8008ddc <_free_r>
 8008bf2:	bf00      	nop
 8008bf4:	2000002c 	.word	0x2000002c

08008bf8 <sbrk_aligned>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	4e0f      	ldr	r6, [pc, #60]	@ (8008c38 <sbrk_aligned+0x40>)
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	6831      	ldr	r1, [r6, #0]
 8008c00:	4605      	mov	r5, r0
 8008c02:	b911      	cbnz	r1, 8008c0a <sbrk_aligned+0x12>
 8008c04:	f000 f8ae 	bl	8008d64 <_sbrk_r>
 8008c08:	6030      	str	r0, [r6, #0]
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	f000 f8a9 	bl	8008d64 <_sbrk_r>
 8008c12:	1c43      	adds	r3, r0, #1
 8008c14:	d103      	bne.n	8008c1e <sbrk_aligned+0x26>
 8008c16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	bd70      	pop	{r4, r5, r6, pc}
 8008c1e:	1cc4      	adds	r4, r0, #3
 8008c20:	f024 0403 	bic.w	r4, r4, #3
 8008c24:	42a0      	cmp	r0, r4
 8008c26:	d0f8      	beq.n	8008c1a <sbrk_aligned+0x22>
 8008c28:	1a21      	subs	r1, r4, r0
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f000 f89a 	bl	8008d64 <_sbrk_r>
 8008c30:	3001      	adds	r0, #1
 8008c32:	d1f2      	bne.n	8008c1a <sbrk_aligned+0x22>
 8008c34:	e7ef      	b.n	8008c16 <sbrk_aligned+0x1e>
 8008c36:	bf00      	nop
 8008c38:	20000954 	.word	0x20000954

08008c3c <_malloc_r>:
 8008c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c40:	1ccd      	adds	r5, r1, #3
 8008c42:	f025 0503 	bic.w	r5, r5, #3
 8008c46:	3508      	adds	r5, #8
 8008c48:	2d0c      	cmp	r5, #12
 8008c4a:	bf38      	it	cc
 8008c4c:	250c      	movcc	r5, #12
 8008c4e:	2d00      	cmp	r5, #0
 8008c50:	4606      	mov	r6, r0
 8008c52:	db01      	blt.n	8008c58 <_malloc_r+0x1c>
 8008c54:	42a9      	cmp	r1, r5
 8008c56:	d904      	bls.n	8008c62 <_malloc_r+0x26>
 8008c58:	230c      	movs	r3, #12
 8008c5a:	6033      	str	r3, [r6, #0]
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d38 <_malloc_r+0xfc>
 8008c66:	f000 f869 	bl	8008d3c <__malloc_lock>
 8008c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008c6e:	461c      	mov	r4, r3
 8008c70:	bb44      	cbnz	r4, 8008cc4 <_malloc_r+0x88>
 8008c72:	4629      	mov	r1, r5
 8008c74:	4630      	mov	r0, r6
 8008c76:	f7ff ffbf 	bl	8008bf8 <sbrk_aligned>
 8008c7a:	1c43      	adds	r3, r0, #1
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	d158      	bne.n	8008d32 <_malloc_r+0xf6>
 8008c80:	f8d8 4000 	ldr.w	r4, [r8]
 8008c84:	4627      	mov	r7, r4
 8008c86:	2f00      	cmp	r7, #0
 8008c88:	d143      	bne.n	8008d12 <_malloc_r+0xd6>
 8008c8a:	2c00      	cmp	r4, #0
 8008c8c:	d04b      	beq.n	8008d26 <_malloc_r+0xea>
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	4639      	mov	r1, r7
 8008c92:	4630      	mov	r0, r6
 8008c94:	eb04 0903 	add.w	r9, r4, r3
 8008c98:	f000 f864 	bl	8008d64 <_sbrk_r>
 8008c9c:	4581      	cmp	r9, r0
 8008c9e:	d142      	bne.n	8008d26 <_malloc_r+0xea>
 8008ca0:	6821      	ldr	r1, [r4, #0]
 8008ca2:	1a6d      	subs	r5, r5, r1
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f7ff ffa6 	bl	8008bf8 <sbrk_aligned>
 8008cac:	3001      	adds	r0, #1
 8008cae:	d03a      	beq.n	8008d26 <_malloc_r+0xea>
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	442b      	add	r3, r5
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8008cba:	685a      	ldr	r2, [r3, #4]
 8008cbc:	bb62      	cbnz	r2, 8008d18 <_malloc_r+0xdc>
 8008cbe:	f8c8 7000 	str.w	r7, [r8]
 8008cc2:	e00f      	b.n	8008ce4 <_malloc_r+0xa8>
 8008cc4:	6822      	ldr	r2, [r4, #0]
 8008cc6:	1b52      	subs	r2, r2, r5
 8008cc8:	d420      	bmi.n	8008d0c <_malloc_r+0xd0>
 8008cca:	2a0b      	cmp	r2, #11
 8008ccc:	d917      	bls.n	8008cfe <_malloc_r+0xc2>
 8008cce:	1961      	adds	r1, r4, r5
 8008cd0:	42a3      	cmp	r3, r4
 8008cd2:	6025      	str	r5, [r4, #0]
 8008cd4:	bf18      	it	ne
 8008cd6:	6059      	strne	r1, [r3, #4]
 8008cd8:	6863      	ldr	r3, [r4, #4]
 8008cda:	bf08      	it	eq
 8008cdc:	f8c8 1000 	streq.w	r1, [r8]
 8008ce0:	5162      	str	r2, [r4, r5]
 8008ce2:	604b      	str	r3, [r1, #4]
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f000 f82f 	bl	8008d48 <__malloc_unlock>
 8008cea:	f104 000b 	add.w	r0, r4, #11
 8008cee:	1d23      	adds	r3, r4, #4
 8008cf0:	f020 0007 	bic.w	r0, r0, #7
 8008cf4:	1ac2      	subs	r2, r0, r3
 8008cf6:	bf1c      	itt	ne
 8008cf8:	1a1b      	subne	r3, r3, r0
 8008cfa:	50a3      	strne	r3, [r4, r2]
 8008cfc:	e7af      	b.n	8008c5e <_malloc_r+0x22>
 8008cfe:	6862      	ldr	r2, [r4, #4]
 8008d00:	42a3      	cmp	r3, r4
 8008d02:	bf0c      	ite	eq
 8008d04:	f8c8 2000 	streq.w	r2, [r8]
 8008d08:	605a      	strne	r2, [r3, #4]
 8008d0a:	e7eb      	b.n	8008ce4 <_malloc_r+0xa8>
 8008d0c:	4623      	mov	r3, r4
 8008d0e:	6864      	ldr	r4, [r4, #4]
 8008d10:	e7ae      	b.n	8008c70 <_malloc_r+0x34>
 8008d12:	463c      	mov	r4, r7
 8008d14:	687f      	ldr	r7, [r7, #4]
 8008d16:	e7b6      	b.n	8008c86 <_malloc_r+0x4a>
 8008d18:	461a      	mov	r2, r3
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	42a3      	cmp	r3, r4
 8008d1e:	d1fb      	bne.n	8008d18 <_malloc_r+0xdc>
 8008d20:	2300      	movs	r3, #0
 8008d22:	6053      	str	r3, [r2, #4]
 8008d24:	e7de      	b.n	8008ce4 <_malloc_r+0xa8>
 8008d26:	230c      	movs	r3, #12
 8008d28:	6033      	str	r3, [r6, #0]
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f000 f80c 	bl	8008d48 <__malloc_unlock>
 8008d30:	e794      	b.n	8008c5c <_malloc_r+0x20>
 8008d32:	6005      	str	r5, [r0, #0]
 8008d34:	e7d6      	b.n	8008ce4 <_malloc_r+0xa8>
 8008d36:	bf00      	nop
 8008d38:	20000958 	.word	0x20000958

08008d3c <__malloc_lock>:
 8008d3c:	4801      	ldr	r0, [pc, #4]	@ (8008d44 <__malloc_lock+0x8>)
 8008d3e:	f000 b84b 	b.w	8008dd8 <__retarget_lock_acquire_recursive>
 8008d42:	bf00      	nop
 8008d44:	20000a98 	.word	0x20000a98

08008d48 <__malloc_unlock>:
 8008d48:	4801      	ldr	r0, [pc, #4]	@ (8008d50 <__malloc_unlock+0x8>)
 8008d4a:	f000 b846 	b.w	8008dda <__retarget_lock_release_recursive>
 8008d4e:	bf00      	nop
 8008d50:	20000a98 	.word	0x20000a98

08008d54 <memset>:
 8008d54:	4402      	add	r2, r0
 8008d56:	4603      	mov	r3, r0
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d100      	bne.n	8008d5e <memset+0xa>
 8008d5c:	4770      	bx	lr
 8008d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d62:	e7f9      	b.n	8008d58 <memset+0x4>

08008d64 <_sbrk_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4d06      	ldr	r5, [pc, #24]	@ (8008d80 <_sbrk_r+0x1c>)
 8008d68:	2300      	movs	r3, #0
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	602b      	str	r3, [r5, #0]
 8008d70:	f7f8 f908 	bl	8000f84 <_sbrk>
 8008d74:	1c43      	adds	r3, r0, #1
 8008d76:	d102      	bne.n	8008d7e <_sbrk_r+0x1a>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	b103      	cbz	r3, 8008d7e <_sbrk_r+0x1a>
 8008d7c:	6023      	str	r3, [r4, #0]
 8008d7e:	bd38      	pop	{r3, r4, r5, pc}
 8008d80:	20000a94 	.word	0x20000a94

08008d84 <__errno>:
 8008d84:	4b01      	ldr	r3, [pc, #4]	@ (8008d8c <__errno+0x8>)
 8008d86:	6818      	ldr	r0, [r3, #0]
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	2000002c 	.word	0x2000002c

08008d90 <__libc_init_array>:
 8008d90:	b570      	push	{r4, r5, r6, lr}
 8008d92:	4d0d      	ldr	r5, [pc, #52]	@ (8008dc8 <__libc_init_array+0x38>)
 8008d94:	4c0d      	ldr	r4, [pc, #52]	@ (8008dcc <__libc_init_array+0x3c>)
 8008d96:	1b64      	subs	r4, r4, r5
 8008d98:	10a4      	asrs	r4, r4, #2
 8008d9a:	2600      	movs	r6, #0
 8008d9c:	42a6      	cmp	r6, r4
 8008d9e:	d109      	bne.n	8008db4 <__libc_init_array+0x24>
 8008da0:	4d0b      	ldr	r5, [pc, #44]	@ (8008dd0 <__libc_init_array+0x40>)
 8008da2:	4c0c      	ldr	r4, [pc, #48]	@ (8008dd4 <__libc_init_array+0x44>)
 8008da4:	f000 f864 	bl	8008e70 <_init>
 8008da8:	1b64      	subs	r4, r4, r5
 8008daa:	10a4      	asrs	r4, r4, #2
 8008dac:	2600      	movs	r6, #0
 8008dae:	42a6      	cmp	r6, r4
 8008db0:	d105      	bne.n	8008dbe <__libc_init_array+0x2e>
 8008db2:	bd70      	pop	{r4, r5, r6, pc}
 8008db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db8:	4798      	blx	r3
 8008dba:	3601      	adds	r6, #1
 8008dbc:	e7ee      	b.n	8008d9c <__libc_init_array+0xc>
 8008dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dc2:	4798      	blx	r3
 8008dc4:	3601      	adds	r6, #1
 8008dc6:	e7f2      	b.n	8008dae <__libc_init_array+0x1e>
 8008dc8:	08008eac 	.word	0x08008eac
 8008dcc:	08008eac 	.word	0x08008eac
 8008dd0:	08008eac 	.word	0x08008eac
 8008dd4:	08008eb0 	.word	0x08008eb0

08008dd8 <__retarget_lock_acquire_recursive>:
 8008dd8:	4770      	bx	lr

08008dda <__retarget_lock_release_recursive>:
 8008dda:	4770      	bx	lr

08008ddc <_free_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4605      	mov	r5, r0
 8008de0:	2900      	cmp	r1, #0
 8008de2:	d041      	beq.n	8008e68 <_free_r+0x8c>
 8008de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008de8:	1f0c      	subs	r4, r1, #4
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	bfb8      	it	lt
 8008dee:	18e4      	addlt	r4, r4, r3
 8008df0:	f7ff ffa4 	bl	8008d3c <__malloc_lock>
 8008df4:	4a1d      	ldr	r2, [pc, #116]	@ (8008e6c <_free_r+0x90>)
 8008df6:	6813      	ldr	r3, [r2, #0]
 8008df8:	b933      	cbnz	r3, 8008e08 <_free_r+0x2c>
 8008dfa:	6063      	str	r3, [r4, #4]
 8008dfc:	6014      	str	r4, [r2, #0]
 8008dfe:	4628      	mov	r0, r5
 8008e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e04:	f7ff bfa0 	b.w	8008d48 <__malloc_unlock>
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	d908      	bls.n	8008e1e <_free_r+0x42>
 8008e0c:	6820      	ldr	r0, [r4, #0]
 8008e0e:	1821      	adds	r1, r4, r0
 8008e10:	428b      	cmp	r3, r1
 8008e12:	bf01      	itttt	eq
 8008e14:	6819      	ldreq	r1, [r3, #0]
 8008e16:	685b      	ldreq	r3, [r3, #4]
 8008e18:	1809      	addeq	r1, r1, r0
 8008e1a:	6021      	streq	r1, [r4, #0]
 8008e1c:	e7ed      	b.n	8008dfa <_free_r+0x1e>
 8008e1e:	461a      	mov	r2, r3
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	b10b      	cbz	r3, 8008e28 <_free_r+0x4c>
 8008e24:	42a3      	cmp	r3, r4
 8008e26:	d9fa      	bls.n	8008e1e <_free_r+0x42>
 8008e28:	6811      	ldr	r1, [r2, #0]
 8008e2a:	1850      	adds	r0, r2, r1
 8008e2c:	42a0      	cmp	r0, r4
 8008e2e:	d10b      	bne.n	8008e48 <_free_r+0x6c>
 8008e30:	6820      	ldr	r0, [r4, #0]
 8008e32:	4401      	add	r1, r0
 8008e34:	1850      	adds	r0, r2, r1
 8008e36:	4283      	cmp	r3, r0
 8008e38:	6011      	str	r1, [r2, #0]
 8008e3a:	d1e0      	bne.n	8008dfe <_free_r+0x22>
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	6053      	str	r3, [r2, #4]
 8008e42:	4408      	add	r0, r1
 8008e44:	6010      	str	r0, [r2, #0]
 8008e46:	e7da      	b.n	8008dfe <_free_r+0x22>
 8008e48:	d902      	bls.n	8008e50 <_free_r+0x74>
 8008e4a:	230c      	movs	r3, #12
 8008e4c:	602b      	str	r3, [r5, #0]
 8008e4e:	e7d6      	b.n	8008dfe <_free_r+0x22>
 8008e50:	6820      	ldr	r0, [r4, #0]
 8008e52:	1821      	adds	r1, r4, r0
 8008e54:	428b      	cmp	r3, r1
 8008e56:	bf04      	itt	eq
 8008e58:	6819      	ldreq	r1, [r3, #0]
 8008e5a:	685b      	ldreq	r3, [r3, #4]
 8008e5c:	6063      	str	r3, [r4, #4]
 8008e5e:	bf04      	itt	eq
 8008e60:	1809      	addeq	r1, r1, r0
 8008e62:	6021      	streq	r1, [r4, #0]
 8008e64:	6054      	str	r4, [r2, #4]
 8008e66:	e7ca      	b.n	8008dfe <_free_r+0x22>
 8008e68:	bd38      	pop	{r3, r4, r5, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000958 	.word	0x20000958

08008e70 <_init>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	bf00      	nop
 8008e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e76:	bc08      	pop	{r3}
 8008e78:	469e      	mov	lr, r3
 8008e7a:	4770      	bx	lr

08008e7c <_fini>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	bf00      	nop
 8008e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e82:	bc08      	pop	{r3}
 8008e84:	469e      	mov	lr, r3
 8008e86:	4770      	bx	lr
