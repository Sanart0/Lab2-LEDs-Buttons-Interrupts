
Lab2-LEDs-Buttons-Interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a5c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008be4  08008be4  00009be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c00  08008c00  0000a07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008c00  08008c00  00009c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c08  08008c08  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c08  08008c08  00009c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c0c  08008c0c  00009c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008c10  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a20  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a9c  20000a9c  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c94  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038b3  00000000  00000000  0001ed40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  000225f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d32  00000000  00000000  00023750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002348f  00000000  00000000  00024482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ba8  00000000  00000000  00047911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbafe  00000000  00000000  0005e4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129fb7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b30  00000000  00000000  00129ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0012eb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008bcc 	.word	0x08008bcc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008bcc 	.word	0x08008bcc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fc6e 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f846 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f942 	bl	8000788 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000504:	f000 f8ac 	bl	8000660 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000508:	f000 f8d8 	bl	80006bc <MX_I2S3_Init>
  MX_SPI1_Init();
 800050c:	f000 f906 	bl	800071c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000510:	f007 ff18 	bl	8008344 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (led_mode == 0) {
 8000514:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <main+0x90>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d114      	bne.n	8000546 <main+0x52>
		  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000522:	4819      	ldr	r0, [pc, #100]	@ (8000588 <main+0x94>)
 8000524:	f000 ff9c 	bl	8001460 <HAL_GPIO_WritePin>
		  HAL_Delay(FQ_MS);
 8000528:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052c:	f000 fcc6 	bl	8000ebc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000536:	4814      	ldr	r0, [pc, #80]	@ (8000588 <main+0x94>)
 8000538:	f000 ff92 	bl	8001460 <HAL_GPIO_WritePin>
		  HAL_Delay(FQ_MS);
 800053c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000540:	f000 fcbc 	bl	8000ebc <HAL_Delay>
 8000544:	e01b      	b.n	800057e <main+0x8a>
	  }
	  else if (led_mode == 1) {
 8000546:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <main+0x90>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d106      	bne.n	800055c <main+0x68>
		  HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000554:	480c      	ldr	r0, [pc, #48]	@ (8000588 <main+0x94>)
 8000556:	f000 ff83 	bl	8001460 <HAL_GPIO_WritePin>
 800055a:	e010      	b.n	800057e <main+0x8a>
	  }
	  else if (led_mode == 2) {
 800055c:	4b09      	ldr	r3, [pc, #36]	@ (8000584 <main+0x90>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d106      	bne.n	8000572 <main+0x7e>
		  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800056a:	4807      	ldr	r0, [pc, #28]	@ (8000588 <main+0x94>)
 800056c:	f000 ff78 	bl	8001460 <HAL_GPIO_WritePin>
 8000570:	e005      	b.n	800057e <main+0x8a>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000578:	4803      	ldr	r0, [pc, #12]	@ (8000588 <main+0x94>)
 800057a:	f000 ff71 	bl	8001460 <HAL_GPIO_WritePin>
	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800057e:	f007 ff07 	bl	8008390 <MX_USB_HOST_Process>
	  if (led_mode == 0) {
 8000582:	e7c7      	b.n	8000514 <main+0x20>
 8000584:	2000018c 	.word	0x2000018c
 8000588:	40020c00 	.word	0x40020c00

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	@ 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	@ 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f008 fa88 	bl	8008ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b28      	ldr	r3, [pc, #160]	@ (8000658 <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	4a27      	ldr	r2, [pc, #156]	@ (8000658 <SystemClock_Config+0xcc>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c0:	4b25      	ldr	r3, [pc, #148]	@ (8000658 <SystemClock_Config+0xcc>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b22      	ldr	r3, [pc, #136]	@ (800065c <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a21      	ldr	r2, [pc, #132]	@ (800065c <SystemClock_Config+0xd0>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <SystemClock_Config+0xd0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000604:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fe4c 	bl	80042b0 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800061e:	f000 f9eb 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2105      	movs	r1, #5
 8000640:	4618      	mov	r0, r3
 8000642:	f004 f8ad 	bl	80047a0 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800064c:	f000 f9d4 	bl	80009f8 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	@ 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000666:	4a13      	ldr	r2, [pc, #76]	@ (80006b4 <MX_I2C1_Init+0x54>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_I2C1_Init+0x50>)
 800066c:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <MX_I2C1_Init+0x58>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_I2C1_Init+0x50>)
 800067e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000684:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000690:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <MX_I2C1_Init+0x50>)
 800069e:	f003 f823 	bl	80036e8 <HAL_I2C_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006a8:	f000 f9a6 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000098 	.word	0x20000098
 80006b4:	40005400 	.word	0x40005400
 80006b8:	000186a0 	.word	0x000186a0

080006bc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006c2:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <MX_I2S3_Init+0x58>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000718 <MX_I2S3_Init+0x5c>)
 80006e6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006fc:	f003 f938 	bl	8003970 <HAL_I2S_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000706:	f000 f977 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000ec 	.word	0x200000ec
 8000714:	40003c00 	.word	0x40003c00
 8000718:	00017700 	.word	0x00017700

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000722:	4a18      	ldr	r2, [pc, #96]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000768:	220a      	movs	r2, #10
 800076a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_SPI1_Init+0x64>)
 800076e:	f004 fb65 	bl	8004e3c <HAL_SPI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f93e 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000134 	.word	0x20000134
 8000784:	40013000 	.word	0x40013000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	@ 0x30
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	4b76      	ldr	r3, [pc, #472]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a75      	ldr	r2, [pc, #468]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b73      	ldr	r3, [pc, #460]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0310 	and.w	r3, r3, #16
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	4b6f      	ldr	r3, [pc, #444]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a6e      	ldr	r2, [pc, #440]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b6c      	ldr	r3, [pc, #432]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b68      	ldr	r3, [pc, #416]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a67      	ldr	r2, [pc, #412]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b65      	ldr	r3, [pc, #404]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b61      	ldr	r3, [pc, #388]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a60      	ldr	r2, [pc, #384]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b5e      	ldr	r3, [pc, #376]	@ (800097c <MX_GPIO_Init+0x1f4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b5a      	ldr	r3, [pc, #360]	@ (800097c <MX_GPIO_Init+0x1f4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a59      	ldr	r2, [pc, #356]	@ (800097c <MX_GPIO_Init+0x1f4>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b57      	ldr	r3, [pc, #348]	@ (800097c <MX_GPIO_Init+0x1f4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b53      	ldr	r3, [pc, #332]	@ (800097c <MX_GPIO_Init+0x1f4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a52      	ldr	r2, [pc, #328]	@ (800097c <MX_GPIO_Init+0x1f4>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b50      	ldr	r3, [pc, #320]	@ (800097c <MX_GPIO_Init+0x1f4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2108      	movs	r1, #8
 800084a:	484d      	ldr	r0, [pc, #308]	@ (8000980 <MX_GPIO_Init+0x1f8>)
 800084c:	f000 fe08 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2101      	movs	r1, #1
 8000854:	484b      	ldr	r0, [pc, #300]	@ (8000984 <MX_GPIO_Init+0x1fc>)
 8000856:	f000 fe03 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 800085a:	2200      	movs	r2, #0
 800085c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000860:	4849      	ldr	r0, [pc, #292]	@ (8000988 <MX_GPIO_Init+0x200>)
 8000862:	f000 fdfd 	bl	8001460 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4840      	ldr	r0, [pc, #256]	@ (8000980 <MX_GPIO_Init+0x1f8>)
 800087e:	f000 fc53 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000882:	2301      	movs	r3, #1
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	483a      	ldr	r0, [pc, #232]	@ (8000984 <MX_GPIO_Init+0x1fc>)
 800089a:	f000 fc45 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800089e:	2308      	movs	r3, #8
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ae:	2305      	movs	r3, #5
 80008b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4832      	ldr	r0, [pc, #200]	@ (8000984 <MX_GPIO_Init+0x1fc>)
 80008ba:	f000 fc35 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c8:	2302      	movs	r3, #2
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	482e      	ldr	r0, [pc, #184]	@ (800098c <MX_GPIO_Init+0x204>)
 80008d4:	f000 fc28 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008d8:	2304      	movs	r3, #4
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4829      	ldr	r0, [pc, #164]	@ (8000990 <MX_GPIO_Init+0x208>)
 80008ec:	f000 fc1c 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000902:	2305      	movs	r3, #5
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4820      	ldr	r0, [pc, #128]	@ (8000990 <MX_GPIO_Init+0x208>)
 800090e:	f000 fc0b 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_ORANGE_Pin LED_RED_Pin LED_BLUE_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin|LED_BLUE_Pin
 8000912:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000916:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4817      	ldr	r0, [pc, #92]	@ (8000988 <MX_GPIO_Init+0x200>)
 800092c:	f000 fbfc 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000930:	2320      	movs	r3, #32
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4811      	ldr	r0, [pc, #68]	@ (8000988 <MX_GPIO_Init+0x200>)
 8000944:	f000 fbf0 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000948:	2302      	movs	r3, #2
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4808      	ldr	r0, [pc, #32]	@ (8000980 <MX_GPIO_Init+0x1f8>)
 800095e:	f000 fbe3 	bl	8001128 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2006      	movs	r0, #6
 8000968:	f000 fba7 	bl	80010ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800096c:	2006      	movs	r0, #6
 800096e:	f000 fbc0 	bl	80010f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	@ 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800
 8000980:	40021000 	.word	0x40021000
 8000984:	40020800 	.word	0x40020800
 8000988:	40020c00 	.word	0x40020c00
 800098c:	40020000 	.word	0x40020000
 8000990:	40020400 	.word	0x40020400

08000994 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	80fb      	strh	r3, [r7, #6]
	  HAL_GPIO_WritePin(GPIOD, LED_GREEN_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009a4:	4812      	ldr	r0, [pc, #72]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80009a6:	f000 fd5b 	bl	8001460 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, LED_ORANGE_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b0:	480f      	ldr	r0, [pc, #60]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80009b2:	f000 fd55 	bl	8001460 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009bc:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80009be:	f000 fd4f 	bl	8001460 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009c8:	4809      	ldr	r0, [pc, #36]	@ (80009f0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80009ca:	f000 fd49 	bl	8001460 <HAL_GPIO_WritePin>

	  if (++led_mode == 4) led_mode = 0;
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0x60>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a07      	ldr	r2, [pc, #28]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0x60>)
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0x60>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d102      	bne.n	80009e6 <HAL_GPIO_EXTI_Callback+0x52>
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <HAL_GPIO_EXTI_Callback+0x60>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	2000018c 	.word	0x2000018c

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x8>

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	4a0f      	ldr	r2, [pc, #60]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a42:	2007      	movs	r0, #7
 8000a44:	f000 fb2e 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a19      	ldr	r2, [pc, #100]	@ (8000ad8 <HAL_I2C_MspInit+0x84>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12c      	bne.n	8000ad0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b18      	ldr	r3, [pc, #96]	@ (8000adc <HAL_I2C_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a17      	ldr	r2, [pc, #92]	@ (8000adc <HAL_I2C_MspInit+0x88>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b15      	ldr	r3, [pc, #84]	@ (8000adc <HAL_I2C_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a92:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a98:	2312      	movs	r3, #18
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <HAL_I2C_MspInit+0x8c>)
 8000ab0:	f000 fb3a 	bl	8001128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <HAL_I2C_MspInit+0x88>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abc:	4a07      	ldr	r2, [pc, #28]	@ (8000adc <HAL_I2C_MspInit+0x88>)
 8000abe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac4:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <HAL_I2C_MspInit+0x88>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	@ 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	@ 0x38
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a31      	ldr	r2, [pc, #196]	@ (8000bd4 <HAL_I2S_MspInit+0xf0>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d15a      	bne.n	8000bca <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b14:	2301      	movs	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b18:	23c0      	movs	r3, #192	@ 0xc0
 8000b1a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4618      	mov	r0, r3
 8000b26:	f004 f847 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b30:	f7ff ff62 	bl	80009f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	4a26      	ldr	r2, [pc, #152]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b60:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	4a18      	ldr	r2, [pc, #96]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7c:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <HAL_I2S_MspInit+0xf4>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b88:	2310      	movs	r3, #16
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b98:	2306      	movs	r3, #6
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480e      	ldr	r0, [pc, #56]	@ (8000bdc <HAL_I2S_MspInit+0xf8>)
 8000ba4:	f000 fac0 	bl	8001128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ba8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bba:	2306      	movs	r3, #6
 8000bbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <HAL_I2S_MspInit+0xfc>)
 8000bc6:	f000 faaf 	bl	8001128 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000bca:	bf00      	nop
 8000bcc:	3738      	adds	r7, #56	@ 0x38
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40003c00 	.word	0x40003c00
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020800 	.word	0x40020800

08000be4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	@ 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a19      	ldr	r2, [pc, #100]	@ (8000c68 <HAL_SPI_MspInit+0x84>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d12b      	bne.n	8000c5e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	@ (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	4a17      	ldr	r2, [pc, #92]	@ (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a10      	ldr	r2, [pc, #64]	@ (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <HAL_SPI_MspInit+0x88>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c3e:	23e0      	movs	r3, #224	@ 0xe0
 8000c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c4e:	2305      	movs	r3, #5
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <HAL_SPI_MspInit+0x8c>)
 8000c5a:	f000 fa65 	bl	8001128 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	@ 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40013000 	.word	0x40013000
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <NMI_Handler+0x4>

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cca:	f000 f8d7 	bl	8000e7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f000 fbdc 	bl	8001494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <OTG_FS_IRQHandler+0x10>)
 8000ce6:	f000 feab 	bl	8001a40 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000574 	.word	0x20000574

08000cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cfc:	4a14      	ldr	r2, [pc, #80]	@ (8000d50 <_sbrk+0x5c>)
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <_sbrk+0x60>)
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d102      	bne.n	8000d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d10:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <_sbrk+0x64>)
 8000d12:	4a12      	ldr	r2, [pc, #72]	@ (8000d5c <_sbrk+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d207      	bcs.n	8000d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d24:	f007 fedc 	bl	8008ae0 <__errno>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d32:	e009      	b.n	8000d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d34:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	4a05      	ldr	r2, [pc, #20]	@ (8000d58 <_sbrk+0x64>)
 8000d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d46:	68fb      	ldr	r3, [r7, #12]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3718      	adds	r7, #24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20020000 	.word	0x20020000
 8000d54:	00000400 	.word	0x00000400
 8000d58:	20000190 	.word	0x20000190
 8000d5c:	20000aa0 	.word	0x20000aa0

08000d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <SystemInit+0x20>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6a:	4a05      	ldr	r2, [pc, #20]	@ (8000d80 <SystemInit+0x20>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d88:	f7ff ffea 	bl	8000d60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	@ (8000dc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f007 fe9b 	bl	8008aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db6:	f7ff fb9d 	bl	80004f4 <main>
  bx  lr    
 8000dba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000dc8:	08008c10 	.word	0x08008c10
  ldr r2, =_sbss
 8000dcc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000dd0:	20000a9c 	.word	0x20000a9c

08000dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <HAL_Init+0x40>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e18 <HAL_Init+0x40>)
 8000de2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <HAL_Init+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <HAL_Init+0x40>)
 8000dee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a07      	ldr	r2, [pc, #28]	@ (8000e18 <HAL_Init+0x40>)
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f000 f94f 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f000 f808 	bl	8000e1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0c:	f7ff fdfa 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00

08000e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e24:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_InitTick+0x54>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_InitTick+0x58>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f967 	bl	800110e <HAL_SYSTICK_Config>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00e      	b.n	8000e68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d80a      	bhi.n	8000e66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e58:	f000 f92f 	bl	80010ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e5c:	4a06      	ldr	r2, [pc, #24]	@ (8000e78 <HAL_InitTick+0x5c>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	e000      	b.n	8000e68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000004 	.word	0x20000004

08000e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x20>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_IncTick+0x24>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <HAL_IncTick+0x24>)
 8000e8e:	6013      	str	r3, [r2, #0]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	20000194 	.word	0x20000194

08000ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	@ (8000eb8 <HAL_GetTick+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000194 	.word	0x20000194

08000ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff ffee 	bl	8000ea4 <HAL_GetTick>
 8000ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ed4:	d005      	beq.n	8000ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_Delay+0x44>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ee2:	bf00      	nop
 8000ee4:	f7ff ffde 	bl	8000ea4 <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d8f7      	bhi.n	8000ee4 <HAL_Delay+0x28>
  {
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	@ (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	@ (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	@ (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	@ 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	@ 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	@ (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff29 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff3e 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff8e 	bl	8000ff8 <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5d 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff31 	bl	8000f68 <__NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffa2 	bl	8001060 <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	@ 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	e16b      	b.n	800141c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001144:	2201      	movs	r2, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	429a      	cmp	r2, r3
 800115e:	f040 815a 	bne.w	8001416 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b01      	cmp	r3, #1
 800116c:	d005      	beq.n	800117a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	2b02      	cmp	r3, #2
 8001178:	d130      	bne.n	80011dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	f003 0201 	and.w	r2, r3, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d017      	beq.n	8001218 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d123      	bne.n	800126c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	08da      	lsrs	r2, r3, #3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3208      	adds	r2, #8
 800122c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	08da      	lsrs	r2, r3, #3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3208      	adds	r2, #8
 8001266:	69b9      	ldr	r1, [r7, #24]
 8001268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0203 	and.w	r2, r3, #3
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80b4 	beq.w	8001416 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b60      	ldr	r3, [pc, #384]	@ (8001434 <HAL_GPIO_Init+0x30c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	4a5f      	ldr	r2, [pc, #380]	@ (8001434 <HAL_GPIO_Init+0x30c>)
 80012b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012be:	4b5d      	ldr	r3, [pc, #372]	@ (8001434 <HAL_GPIO_Init+0x30c>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001438 <HAL_GPIO_Init+0x310>)
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a52      	ldr	r2, [pc, #328]	@ (800143c <HAL_GPIO_Init+0x314>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d02b      	beq.n	800134e <HAL_GPIO_Init+0x226>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a51      	ldr	r2, [pc, #324]	@ (8001440 <HAL_GPIO_Init+0x318>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d025      	beq.n	800134a <HAL_GPIO_Init+0x222>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a50      	ldr	r2, [pc, #320]	@ (8001444 <HAL_GPIO_Init+0x31c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d01f      	beq.n	8001346 <HAL_GPIO_Init+0x21e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4f      	ldr	r2, [pc, #316]	@ (8001448 <HAL_GPIO_Init+0x320>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d019      	beq.n	8001342 <HAL_GPIO_Init+0x21a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4e      	ldr	r2, [pc, #312]	@ (800144c <HAL_GPIO_Init+0x324>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0x216>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4d      	ldr	r2, [pc, #308]	@ (8001450 <HAL_GPIO_Init+0x328>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d00d      	beq.n	800133a <HAL_GPIO_Init+0x212>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4c      	ldr	r2, [pc, #304]	@ (8001454 <HAL_GPIO_Init+0x32c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d007      	beq.n	8001336 <HAL_GPIO_Init+0x20e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4b      	ldr	r2, [pc, #300]	@ (8001458 <HAL_GPIO_Init+0x330>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d101      	bne.n	8001332 <HAL_GPIO_Init+0x20a>
 800132e:	2307      	movs	r3, #7
 8001330:	e00e      	b.n	8001350 <HAL_GPIO_Init+0x228>
 8001332:	2308      	movs	r3, #8
 8001334:	e00c      	b.n	8001350 <HAL_GPIO_Init+0x228>
 8001336:	2306      	movs	r3, #6
 8001338:	e00a      	b.n	8001350 <HAL_GPIO_Init+0x228>
 800133a:	2305      	movs	r3, #5
 800133c:	e008      	b.n	8001350 <HAL_GPIO_Init+0x228>
 800133e:	2304      	movs	r3, #4
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x228>
 8001342:	2303      	movs	r3, #3
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x228>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x228>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x228>
 800134e:	2300      	movs	r3, #0
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	f002 0203 	and.w	r2, r2, #3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001360:	4935      	ldr	r1, [pc, #212]	@ (8001438 <HAL_GPIO_Init+0x310>)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b3b      	ldr	r3, [pc, #236]	@ (800145c <HAL_GPIO_Init+0x334>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001392:	4a32      	ldr	r2, [pc, #200]	@ (800145c <HAL_GPIO_Init+0x334>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001398:	4b30      	ldr	r3, [pc, #192]	@ (800145c <HAL_GPIO_Init+0x334>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013bc:	4a27      	ldr	r2, [pc, #156]	@ (800145c <HAL_GPIO_Init+0x334>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013c2:	4b26      	ldr	r3, [pc, #152]	@ (800145c <HAL_GPIO_Init+0x334>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013e6:	4a1d      	ldr	r2, [pc, #116]	@ (800145c <HAL_GPIO_Init+0x334>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <HAL_GPIO_Init+0x334>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001410:	4a12      	ldr	r2, [pc, #72]	@ (800145c <HAL_GPIO_Init+0x334>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	f67f ae90 	bls.w	8001144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3724      	adds	r7, #36	@ 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40013800 	.word	0x40013800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020400 	.word	0x40020400
 8001444:	40020800 	.word	0x40020800
 8001448:	40020c00 	.word	0x40020c00
 800144c:	40021000 	.word	0x40021000
 8001450:	40021400 	.word	0x40021400
 8001454:	40021800 	.word	0x40021800
 8001458:	40021c00 	.word	0x40021c00
 800145c:	40013c00 	.word	0x40013c00

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800147c:	e003      	b.n	8001486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	619a      	str	r2, [r3, #24]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a0:	695a      	ldr	r2, [r3, #20]
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014aa:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fa6e 	bl	8000994 <HAL_GPIO_EXTI_Callback>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40013c00 	.word	0x40013c00

080014c4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af02      	add	r7, sp, #8
 80014ca:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e059      	b.n	800158a <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d106      	bne.n	80014f6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f006 ff85 	bl	8008400 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2203      	movs	r2, #3
 80014fa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001504:	d102      	bne.n	800150c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f003 fd91 	bl	8005038 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7c1a      	ldrb	r2, [r3, #16]
 800151e:	f88d 2000 	strb.w	r2, [sp]
 8001522:	3304      	adds	r3, #4
 8001524:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001526:	f003 fd12 	bl	8004f4e <USB_CoreInit>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2202      	movs	r2, #2
 8001534:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e026      	b.n	800158a <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2101      	movs	r1, #1
 8001542:	4618      	mov	r0, r3
 8001544:	f003 fd89 	bl	800505a <USB_SetCurrentMode>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2202      	movs	r2, #2
 8001552:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e017      	b.n	800158a <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6818      	ldr	r0, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7c1a      	ldrb	r2, [r3, #16]
 8001562:	f88d 2000 	strb.w	r2, [sp]
 8001566:	3304      	adds	r3, #4
 8001568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800156a:	f003 ff33 	bl	80053d4 <USB_HostInit>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e004      	b.n	800158a <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001592:	b590      	push	{r4, r7, lr}
 8001594:	b08b      	sub	sp, #44	@ 0x2c
 8001596:	af04      	add	r7, sp, #16
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	4608      	mov	r0, r1
 800159c:	4611      	mov	r1, r2
 800159e:	461a      	mov	r2, r3
 80015a0:	4603      	mov	r3, r0
 80015a2:	70fb      	strb	r3, [r7, #3]
 80015a4:	460b      	mov	r3, r1
 80015a6:	70bb      	strb	r3, [r7, #2]
 80015a8:	4613      	mov	r3, r2
 80015aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015ac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015ae:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_HCD_HC_Init+0x2c>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e09d      	b.n	80016fa <HAL_HCD_HC_Init+0x168>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015c6:	78fa      	ldrb	r2, [r7, #3]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	1a9b      	subs	r3, r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	3319      	adds	r3, #25
 80015d6:	2200      	movs	r2, #0
 80015d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015da:	78fa      	ldrb	r2, [r7, #3]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	3314      	adds	r3, #20
 80015ea:	787a      	ldrb	r2, [r7, #1]
 80015ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	1a9b      	subs	r3, r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	3315      	adds	r3, #21
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	1a9b      	subs	r3, r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	3326      	adds	r3, #38	@ 0x26
 8001612:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001616:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	78bb      	ldrb	r3, [r7, #2]
 800161c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001620:	b2d8      	uxtb	r0, r3
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	011b      	lsls	r3, r3, #4
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	3316      	adds	r3, #22
 8001630:	4602      	mov	r2, r0
 8001632:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	4619      	mov	r1, r3
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fba5 	bl	8001d88 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800163e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001642:	2b00      	cmp	r3, #0
 8001644:	da0a      	bge.n	800165c <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001646:	78fa      	ldrb	r2, [r7, #3]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	1a9b      	subs	r3, r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3317      	adds	r3, #23
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	e009      	b.n	8001670 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800165c:	78fa      	ldrb	r2, [r7, #3]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	3317      	adds	r3, #23
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f004 f811 	bl	800569c <USB_GetHostSpeed>
 800167a:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800167c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001680:	2b01      	cmp	r3, #1
 8001682:	d10b      	bne.n	800169c <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001684:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001688:	2b01      	cmp	r3, #1
 800168a:	d107      	bne.n	800169c <HAL_HCD_HC_Init+0x10a>
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d104      	bne.n	800169c <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	2bbc      	cmp	r3, #188	@ 0xbc
 8001696:	d901      	bls.n	800169c <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001698:	23bc      	movs	r3, #188	@ 0xbc
 800169a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800169c:	78fa      	ldrb	r2, [r7, #3]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	011b      	lsls	r3, r3, #4
 80016a4:	1a9b      	subs	r3, r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	3318      	adds	r3, #24
 80016ac:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016b0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	b298      	uxth	r0, r3
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	011b      	lsls	r3, r3, #4
 80016be:	1a9b      	subs	r3, r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	3328      	adds	r3, #40	@ 0x28
 80016c6:	4602      	mov	r2, r0
 80016c8:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6818      	ldr	r0, [r3, #0]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	787c      	ldrb	r4, [r7, #1]
 80016d4:	78ba      	ldrb	r2, [r7, #2]
 80016d6:	78f9      	ldrb	r1, [r7, #3]
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	4623      	mov	r3, r4
 80016e8:	f004 f800 	bl	80056ec <USB_HC_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd90      	pop	{r4, r7, pc}
	...

08001704 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	4608      	mov	r0, r1
 800170e:	4611      	mov	r1, r2
 8001710:	461a      	mov	r2, r3
 8001712:	4603      	mov	r3, r0
 8001714:	70fb      	strb	r3, [r7, #3]
 8001716:	460b      	mov	r3, r1
 8001718:	70bb      	strb	r3, [r7, #2]
 800171a:	4613      	mov	r3, r2
 800171c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	3317      	adds	r3, #23
 800172e:	78ba      	ldrb	r2, [r7, #2]
 8001730:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001732:	78fa      	ldrb	r2, [r7, #3]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3326      	adds	r3, #38	@ 0x26
 8001742:	787a      	ldrb	r2, [r7, #1]
 8001744:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001746:	7c3b      	ldrb	r3, [r7, #16]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d114      	bne.n	8001776 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800174c:	78fa      	ldrb	r2, [r7, #3]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	332a      	adds	r3, #42	@ 0x2a
 800175c:	2203      	movs	r2, #3
 800175e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001760:	78fa      	ldrb	r2, [r7, #3]
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	1a9b      	subs	r3, r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	3319      	adds	r3, #25
 8001770:	7f3a      	ldrb	r2, [r7, #28]
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	e009      	b.n	800178a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	332a      	adds	r3, #42	@ 0x2a
 8001786:	2202      	movs	r2, #2
 8001788:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800178a:	787b      	ldrb	r3, [r7, #1]
 800178c:	2b03      	cmp	r3, #3
 800178e:	f200 8102 	bhi.w	8001996 <HAL_HCD_HC_SubmitRequest+0x292>
 8001792:	a201      	add	r2, pc, #4	@ (adr r2, 8001798 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001798:	080017a9 	.word	0x080017a9
 800179c:	08001981 	.word	0x08001981
 80017a0:	0800186d 	.word	0x0800186d
 80017a4:	080018f7 	.word	0x080018f7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80017a8:	7c3b      	ldrb	r3, [r7, #16]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	f040 80f5 	bne.w	800199a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80017b0:	78bb      	ldrb	r3, [r7, #2]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d12d      	bne.n	8001812 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017b6:	8b3b      	ldrh	r3, [r7, #24]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d109      	bne.n	80017d0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	333d      	adds	r3, #61	@ 0x3d
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80017d0:	78fa      	ldrb	r2, [r7, #3]
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	1a9b      	subs	r3, r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	333d      	adds	r3, #61	@ 0x3d
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10a      	bne.n	80017fc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	1a9b      	subs	r3, r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	332a      	adds	r3, #42	@ 0x2a
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80017fa:	e0ce      	b.n	800199a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	332a      	adds	r3, #42	@ 0x2a
 800180c:	2202      	movs	r2, #2
 800180e:	701a      	strb	r2, [r3, #0]
      break;
 8001810:	e0c3      	b.n	800199a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	011b      	lsls	r3, r3, #4
 800181a:	1a9b      	subs	r3, r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	331a      	adds	r3, #26
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	f040 80b8 	bne.w	800199a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800182a:	78fa      	ldrb	r2, [r7, #3]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	333c      	adds	r3, #60	@ 0x3c
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d10a      	bne.n	8001856 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001840:	78fa      	ldrb	r2, [r7, #3]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	332a      	adds	r3, #42	@ 0x2a
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
      break;
 8001854:	e0a1      	b.n	800199a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	332a      	adds	r3, #42	@ 0x2a
 8001866:	2202      	movs	r2, #2
 8001868:	701a      	strb	r2, [r3, #0]
      break;
 800186a:	e096      	b.n	800199a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d120      	bne.n	80018b4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	6879      	ldr	r1, [r7, #4]
 8001876:	4613      	mov	r3, r2
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	1a9b      	subs	r3, r3, r2
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	440b      	add	r3, r1
 8001880:	333d      	adds	r3, #61	@ 0x3d
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10a      	bne.n	800189e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	011b      	lsls	r3, r3, #4
 8001890:	1a9b      	subs	r3, r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	332a      	adds	r3, #42	@ 0x2a
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800189c:	e07e      	b.n	800199c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189e:	78fa      	ldrb	r2, [r7, #3]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	1a9b      	subs	r3, r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	332a      	adds	r3, #42	@ 0x2a
 80018ae:	2202      	movs	r2, #2
 80018b0:	701a      	strb	r2, [r3, #0]
      break;
 80018b2:	e073      	b.n	800199c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	333c      	adds	r3, #60	@ 0x3c
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10a      	bne.n	80018e0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	1a9b      	subs	r3, r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	332a      	adds	r3, #42	@ 0x2a
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
      break;
 80018de:	e05d      	b.n	800199c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	332a      	adds	r3, #42	@ 0x2a
 80018f0:	2202      	movs	r2, #2
 80018f2:	701a      	strb	r2, [r3, #0]
      break;
 80018f4:	e052      	b.n	800199c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80018f6:	78bb      	ldrb	r3, [r7, #2]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d120      	bne.n	800193e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018fc:	78fa      	ldrb	r2, [r7, #3]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	333d      	adds	r3, #61	@ 0x3d
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10a      	bne.n	8001928 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001912:	78fa      	ldrb	r2, [r7, #3]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	332a      	adds	r3, #42	@ 0x2a
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001926:	e039      	b.n	800199c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001928:	78fa      	ldrb	r2, [r7, #3]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	011b      	lsls	r3, r3, #4
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	332a      	adds	r3, #42	@ 0x2a
 8001938:	2202      	movs	r2, #2
 800193a:	701a      	strb	r2, [r3, #0]
      break;
 800193c:	e02e      	b.n	800199c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800193e:	78fa      	ldrb	r2, [r7, #3]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	1a9b      	subs	r3, r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	333c      	adds	r3, #60	@ 0x3c
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10a      	bne.n	800196a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	332a      	adds	r3, #42	@ 0x2a
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
      break;
 8001968:	e018      	b.n	800199c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	332a      	adds	r3, #42	@ 0x2a
 800197a:	2202      	movs	r2, #2
 800197c:	701a      	strb	r2, [r3, #0]
      break;
 800197e:	e00d      	b.n	800199c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	332a      	adds	r3, #42	@ 0x2a
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
      break;
 8001994:	e002      	b.n	800199c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001996:	bf00      	nop
 8001998:	e000      	b.n	800199c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800199a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	4613      	mov	r3, r2
 80019a2:	011b      	lsls	r3, r3, #4
 80019a4:	1a9b      	subs	r3, r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	332c      	adds	r3, #44	@ 0x2c
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	8b39      	ldrh	r1, [r7, #24]
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	1a9b      	subs	r3, r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4403      	add	r3, r0
 80019c0:	3334      	adds	r3, #52	@ 0x34
 80019c2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	011b      	lsls	r3, r3, #4
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	334c      	adds	r3, #76	@ 0x4c
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	3338      	adds	r3, #56	@ 0x38
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	3315      	adds	r3, #21
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	1a9b      	subs	r3, r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	334d      	adds	r3, #77	@ 0x4d
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	3310      	adds	r3, #16
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	4413      	add	r3, r2
 8001a28:	1d19      	adds	r1, r3, #4
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	799b      	ldrb	r3, [r3, #6]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	f003 ff88 	bl	8005944 <USB_HC_StartXfer>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop

08001a40 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fc75 	bl	8005346 <USB_GetMode>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	f040 80fb 	bne.w	8001c5a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 fc38 	bl	80052de <USB_ReadInterrupts>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 80f1 	beq.w	8001c58 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f003 fc2f 	bl	80052de <USB_ReadInterrupts>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a8a:	d104      	bne.n	8001a96 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f003 fc1f 	bl	80052de <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aa6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001aaa:	d104      	bne.n	8001ab6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ab4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 fc0f 	bl	80052de <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ac6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001aca:	d104      	bne.n	8001ad6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ad4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fbff 	bl	80052de <USB_ReadInterrupts>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d103      	bne.n	8001af2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2202      	movs	r2, #2
 8001af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fbf1 	bl	80052de <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b06:	d120      	bne.n	8001b4a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b10:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d113      	bne.n	8001b4a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b22:	2110      	movs	r1, #16
 8001b24:	6938      	ldr	r0, [r7, #16]
 8001b26:	f003 fae4 	bl	80050f2 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b2a:	6938      	ldr	r0, [r7, #16]
 8001b2c:	f003 fb13 	bl	8005156 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7a5b      	ldrb	r3, [r3, #9]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d105      	bne.n	8001b44 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 fd0c 	bl	800555c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f006 fcd9 	bl	80084fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fbc5 	bl	80052de <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b5e:	d102      	bne.n	8001b66 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f001 fd4d 	bl	8003600 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 fbb7 	bl	80052de <USB_ReadInterrupts>
 8001b70:	4603      	mov	r3, r0
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d106      	bne.n	8001b88 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f006 fca2 	bl	80084c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2208      	movs	r2, #8
 8001b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f003 fba6 	bl	80052de <USB_ReadInterrupts>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b9c:	d139      	bne.n	8001c12 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f004 f948 	bl	8005e38 <USB_HC_ReadInterrupt>
 8001ba8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e025      	b.n	8001bfc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d018      	beq.n	8001bf6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bda:	d106      	bne.n	8001bea <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	4619      	mov	r1, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f905 	bl	8001df2 <HCD_HC_IN_IRQHandler>
 8001be8:	e005      	b.n	8001bf6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4619      	mov	r1, r3
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 ff67 	bl	8002ac4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	795b      	ldrb	r3, [r3, #5]
 8001c00:	461a      	mov	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d3d3      	bcc.n	8001bb0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fb61 	bl	80052de <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d101      	bne.n	8001c2a <HAL_HCD_IRQHandler+0x1ea>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_HCD_IRQHandler+0x1ec>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d014      	beq.n	8001c5a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0210 	bic.w	r2, r2, #16
 8001c3e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f001 fbfe 	bl	8003442 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699a      	ldr	r2, [r3, #24]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0210 	orr.w	r2, r2, #16
 8001c54:	619a      	str	r2, [r3, #24]
 8001c56:	e000      	b.n	8001c5a <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c58:	bf00      	nop
    }
  }
}
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_HCD_Start+0x16>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e013      	b.n	8001c9e <HAL_HCD_Start+0x3e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2101      	movs	r1, #1
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fcd0 	bl	800562a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f003 f9c1 	bl	8005016 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_HCD_Stop+0x16>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e00d      	b.n	8001cd8 <HAL_HCD_Stop+0x32>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 fa23 	bl	8006114 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f003 fc72 	bl	80055d6 <USB_ResetPort>
 8001cf2:	4603      	mov	r3, r0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d08:	78fa      	ldrb	r2, [r7, #3]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	334c      	adds	r3, #76	@ 0x4c
 8001d18:	781b      	ldrb	r3, [r3, #0]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	440b      	add	r3, r1
 8001d40:	3338      	adds	r3, #56	@ 0x38
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 fcb4 	bl	80056ca <USB_GetCurrentFrame>
 8001d62:	4603      	mov	r3, r0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f003 fc8f 	bl	800569c <USB_GetHostSpeed>
 8001d7e:	4603      	mov	r3, r0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	331a      	adds	r3, #26
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001da8:	78fa      	ldrb	r2, [r7, #3]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	1a9b      	subs	r3, r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	331b      	adds	r3, #27
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001dbc:	78fa      	ldrb	r2, [r7, #3]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	1a9b      	subs	r3, r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	3325      	adds	r3, #37	@ 0x25
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	3324      	adds	r3, #36	@ 0x24
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f003 fa77 	bl	8005304 <USB_ReadChInterrupts>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d11a      	bne.n	8001e56 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2304      	movs	r3, #4
 8001e30:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e32:	78fa      	ldrb	r2, [r7, #3]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	334d      	adds	r3, #77	@ 0x4d
 8001e42:	2207      	movs	r2, #7
 8001e44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 f803 	bl	8005e5a <USB_HC_Halt>
 8001e54:	e09e      	b.n	8001f94 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 fa50 	bl	8005304 <USB_ReadChInterrupts>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e6e:	d11b      	bne.n	8001ea8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e82:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	334d      	adds	r3, #77	@ 0x4d
 8001e94:	2208      	movs	r2, #8
 8001e96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 ffda 	bl	8005e5a <USB_HC_Halt>
 8001ea6:	e075      	b.n	8001f94 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 fa27 	bl	8005304 <USB_ReadChInterrupts>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d11a      	bne.n	8001ef6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2308      	movs	r3, #8
 8001ed0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001ed2:	78fa      	ldrb	r2, [r7, #3]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	1a9b      	subs	r3, r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	334d      	adds	r3, #77	@ 0x4d
 8001ee2:	2206      	movs	r2, #6
 8001ee4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	4611      	mov	r1, r2
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 ffb3 	bl	8005e5a <USB_HC_Halt>
 8001ef4:	e04e      	b.n	8001f94 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fa00 	bl	8005304 <USB_ReadChInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f0e:	d11b      	bne.n	8001f48 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	334d      	adds	r3, #77	@ 0x4d
 8001f34:	2209      	movs	r2, #9
 8001f36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f003 ff8a 	bl	8005e5a <USB_HC_Halt>
 8001f46:	e025      	b.n	8001f94 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f003 f9d7 	bl	8005304 <USB_ReadChInterrupts>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5c:	2b80      	cmp	r3, #128	@ 0x80
 8001f5e:	d119      	bne.n	8001f94 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	2380      	movs	r3, #128	@ 0x80
 8001f70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	334d      	adds	r3, #77	@ 0x4d
 8001f82:	2207      	movs	r2, #7
 8001f84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 ff63 	bl	8005e5a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f003 f9b1 	bl	8005304 <USB_ReadChInterrupts>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fac:	d112      	bne.n	8001fd4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f003 ff4f 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fce:	6093      	str	r3, [r2, #8]
 8001fd0:	f000 bd75 	b.w	8002abe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 f991 	bl	8005304 <USB_ReadChInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	f040 8128 	bne.w	800223e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002000:	78fa      	ldrb	r2, [r7, #3]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	331b      	adds	r3, #27
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d119      	bne.n	800204a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002016:	78fa      	ldrb	r2, [r7, #3]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	331b      	adds	r3, #27
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4413      	add	r3, r2
 8002032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	0151      	lsls	r1, r2, #5
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	440a      	add	r2, r1
 8002040:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002048:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	799b      	ldrb	r3, [r3, #6]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01b      	beq.n	800208a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	3330      	adds	r3, #48	@ 0x30
 8002062:	6819      	ldr	r1, [r3, #0]
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002076:	78fa      	ldrb	r2, [r7, #3]
 8002078:	1ac9      	subs	r1, r1, r3
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4403      	add	r3, r0
 8002086:	3338      	adds	r3, #56	@ 0x38
 8002088:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	334d      	adds	r3, #77	@ 0x4d
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	3344      	adds	r3, #68	@ 0x44
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020be:	461a      	mov	r2, r3
 80020c0:	2301      	movs	r3, #1
 80020c2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	3326      	adds	r3, #38	@ 0x26
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3326      	adds	r3, #38	@ 0x26
 80020ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d110      	bne.n	8002112 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f003 feae 	bl	8005e5a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800210a:	461a      	mov	r2, r3
 800210c:	2310      	movs	r3, #16
 800210e:	6093      	str	r3, [r2, #8]
 8002110:	e03d      	b.n	800218e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	3326      	adds	r3, #38	@ 0x26
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d00a      	beq.n	800213e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3326      	adds	r3, #38	@ 0x26
 8002138:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800213a:	2b01      	cmp	r3, #1
 800213c:	d127      	bne.n	800218e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	0151      	lsls	r1, r2, #5
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	440a      	add	r2, r1
 8002154:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002158:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800215c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	334c      	adds	r3, #76	@ 0x4c
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	334c      	adds	r3, #76	@ 0x4c
 8002182:	781a      	ldrb	r2, [r3, #0]
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	4619      	mov	r1, r3
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f006 f9c5 	bl	8008518 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	799b      	ldrb	r3, [r3, #6]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d13b      	bne.n	800220e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	3338      	adds	r3, #56	@ 0x38
 80021a6:	6819      	ldr	r1, [r3, #0]
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4403      	add	r3, r0
 80021b6:	3328      	adds	r3, #40	@ 0x28
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	440b      	add	r3, r1
 80021bc:	1e59      	subs	r1, r3, #1
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4403      	add	r3, r0
 80021cc:	3328      	adds	r3, #40	@ 0x28
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8470 	beq.w	8002abe <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	333c      	adds	r3, #60	@ 0x3c
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	f083 0301 	eor.w	r3, r3, #1
 80021f6:	b2d8      	uxtb	r0, r3
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	333c      	adds	r3, #60	@ 0x3c
 8002206:	4602      	mov	r2, r0
 8002208:	701a      	strb	r2, [r3, #0]
 800220a:	f000 bc58 	b.w	8002abe <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	333c      	adds	r3, #60	@ 0x3c
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	f083 0301 	eor.w	r3, r3, #1
 8002226:	b2d8      	uxtb	r0, r3
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	333c      	adds	r3, #60	@ 0x3c
 8002236:	4602      	mov	r2, r0
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	f000 bc40 	b.w	8002abe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f003 f85c 	bl	8005304 <USB_ReadChInterrupts>
 800224c:	4603      	mov	r3, r0
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b20      	cmp	r3, #32
 8002254:	d131      	bne.n	80022ba <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002262:	461a      	mov	r2, r3
 8002264:	2320      	movs	r3, #32
 8002266:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	331a      	adds	r3, #26
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	f040 841f 	bne.w	8002abe <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	331b      	adds	r3, #27
 8002290:	2201      	movs	r2, #1
 8002292:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	334d      	adds	r3, #77	@ 0x4d
 80022a4:	2203      	movs	r2, #3
 80022a6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 fdd2 	bl	8005e5a <USB_HC_Halt>
 80022b6:	f000 bc02 	b.w	8002abe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	78fa      	ldrb	r2, [r7, #3]
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f003 f81e 	bl	8005304 <USB_ReadChInterrupts>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	f040 8305 	bne.w	80028de <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022e0:	461a      	mov	r2, r3
 80022e2:	2302      	movs	r3, #2
 80022e4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	1a9b      	subs	r3, r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	334d      	adds	r3, #77	@ 0x4d
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d114      	bne.n	8002326 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	334d      	adds	r3, #77	@ 0x4d
 800230c:	2202      	movs	r2, #2
 800230e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	334c      	adds	r3, #76	@ 0x4c
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	e2cc      	b.n	80028c0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	334d      	adds	r3, #77	@ 0x4d
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b06      	cmp	r3, #6
 800233a:	d114      	bne.n	8002366 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	334d      	adds	r3, #77	@ 0x4d
 800234c:	2202      	movs	r2, #2
 800234e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	334c      	adds	r3, #76	@ 0x4c
 8002360:	2205      	movs	r2, #5
 8002362:	701a      	strb	r2, [r3, #0]
 8002364:	e2ac      	b.n	80028c0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	334d      	adds	r3, #77	@ 0x4d
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b07      	cmp	r3, #7
 800237a:	d00b      	beq.n	8002394 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	334d      	adds	r3, #77	@ 0x4d
 800238c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800238e:	2b09      	cmp	r3, #9
 8002390:	f040 80a6 	bne.w	80024e0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	334d      	adds	r3, #77	@ 0x4d
 80023a4:	2202      	movs	r2, #2
 80023a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3344      	adds	r3, #68	@ 0x44
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	1c59      	adds	r1, r3, #1
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4403      	add	r3, r0
 80023c8:	3344      	adds	r3, #68	@ 0x44
 80023ca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	3344      	adds	r3, #68	@ 0x44
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d943      	bls.n	800246a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80023e2:	78fa      	ldrb	r2, [r7, #3]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	1a9b      	subs	r3, r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3344      	adds	r3, #68	@ 0x44
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80023f6:	78fa      	ldrb	r2, [r7, #3]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	331a      	adds	r3, #26
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d123      	bne.n	8002454 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	331b      	adds	r3, #27
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	331c      	adds	r3, #28
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	0151      	lsls	r1, r2, #5
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	440a      	add	r2, r1
 800244a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800244e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002452:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	334c      	adds	r3, #76	@ 0x4c
 8002464:	2204      	movs	r2, #4
 8002466:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002468:	e229      	b.n	80028be <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	334c      	adds	r3, #76	@ 0x4c
 800247a:	2202      	movs	r2, #2
 800247c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	3326      	adds	r3, #38	@ 0x26
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00b      	beq.n	80024ac <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	3326      	adds	r3, #38	@ 0x26
 80024a4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	f040 8209 	bne.w	80028be <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80024c2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024ca:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d8:	461a      	mov	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024de:	e1ee      	b.n	80028be <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	334d      	adds	r3, #77	@ 0x4d
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	f040 80c8 	bne.w	8002688 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024f8:	78fa      	ldrb	r2, [r7, #3]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	334d      	adds	r3, #77	@ 0x4d
 8002508:	2202      	movs	r2, #2
 800250a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	1a9b      	subs	r3, r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	440b      	add	r3, r1
 800251a:	331b      	adds	r3, #27
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	f040 81ce 	bne.w	80028c0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3326      	adds	r3, #38	@ 0x26
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b03      	cmp	r3, #3
 8002538:	d16b      	bne.n	8002612 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800253a:	78fa      	ldrb	r2, [r7, #3]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	1a9b      	subs	r3, r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	3348      	adds	r3, #72	@ 0x48
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	1c59      	adds	r1, r3, #1
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4403      	add	r3, r0
 800255a:	3348      	adds	r3, #72	@ 0x48
 800255c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	3348      	adds	r3, #72	@ 0x48
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d943      	bls.n	80025fc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	3348      	adds	r3, #72	@ 0x48
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	331b      	adds	r3, #27
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3344      	adds	r3, #68	@ 0x44
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d809      	bhi.n	80025c6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	331c      	adds	r3, #28
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	015a      	lsls	r2, r3, #5
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4413      	add	r3, r2
 80025ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	0151      	lsls	r1, r2, #5
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	440a      	add	r2, r1
 80025dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025e4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	334c      	adds	r3, #76	@ 0x4c
 80025f6:	2204      	movs	r2, #4
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e014      	b.n	8002626 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	334c      	adds	r3, #76	@ 0x4c
 800260c:	2202      	movs	r2, #2
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e009      	b.n	8002626 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	334c      	adds	r3, #76	@ 0x4c
 8002622:	2202      	movs	r2, #2
 8002624:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002626:	78fa      	ldrb	r2, [r7, #3]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	3326      	adds	r3, #38	@ 0x26
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00b      	beq.n	8002654 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3326      	adds	r3, #38	@ 0x26
 800264c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800264e:	2b02      	cmp	r3, #2
 8002650:	f040 8136 	bne.w	80028c0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800266a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002672:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002680:	461a      	mov	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e11b      	b.n	80028c0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	334d      	adds	r3, #77	@ 0x4d
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b03      	cmp	r3, #3
 800269c:	f040 8081 	bne.w	80027a2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	334d      	adds	r3, #77	@ 0x4d
 80026b0:	2202      	movs	r2, #2
 80026b2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	331b      	adds	r3, #27
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	f040 80fa 	bne.w	80028c0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	334c      	adds	r3, #76	@ 0x4c
 80026dc:	2202      	movs	r2, #2
 80026de:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	0151      	lsls	r1, r2, #5
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	440a      	add	r2, r1
 80026f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fe:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	78fa      	ldrb	r2, [r7, #3]
 8002710:	0151      	lsls	r1, r2, #5
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	440a      	add	r2, r1
 8002716:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800271a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800271e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	78fa      	ldrb	r2, [r7, #3]
 8002730:	0151      	lsls	r1, r2, #5
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	440a      	add	r2, r1
 8002736:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800273a:	f023 0320 	bic.w	r3, r3, #32
 800273e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002740:	78fa      	ldrb	r2, [r7, #3]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	1a9b      	subs	r3, r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	3326      	adds	r3, #38	@ 0x26
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002756:	78fa      	ldrb	r2, [r7, #3]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	440b      	add	r3, r1
 8002764:	3326      	adds	r3, #38	@ 0x26
 8002766:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002768:	2b02      	cmp	r3, #2
 800276a:	f040 80a9 	bne.w	80028c0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002784:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800278c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	015a      	lsls	r2, r3, #5
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4413      	add	r3, r2
 8002796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800279a:	461a      	mov	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	e08e      	b.n	80028c0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	334d      	adds	r3, #77	@ 0x4d
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d143      	bne.n	8002840 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	334d      	adds	r3, #77	@ 0x4d
 80027c8:	2202      	movs	r2, #2
 80027ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	334c      	adds	r3, #76	@ 0x4c
 80027dc:	2202      	movs	r2, #2
 80027de:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027e0:	78fa      	ldrb	r2, [r7, #3]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	3326      	adds	r3, #38	@ 0x26
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	3326      	adds	r3, #38	@ 0x26
 8002806:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002808:	2b02      	cmp	r3, #2
 800280a:	d159      	bne.n	80028c0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002822:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800282a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002838:	461a      	mov	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e03f      	b.n	80028c0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	334d      	adds	r3, #77	@ 0x4d
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b08      	cmp	r3, #8
 8002854:	d126      	bne.n	80028a4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	334d      	adds	r3, #77	@ 0x4d
 8002866:	2202      	movs	r2, #2
 8002868:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	3344      	adds	r3, #68	@ 0x44
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	1c59      	adds	r1, r3, #1
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4403      	add	r3, r0
 800288a:	3344      	adds	r3, #68	@ 0x44
 800288c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	1a9b      	subs	r3, r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	334c      	adds	r3, #76	@ 0x4c
 800289e:	2204      	movs	r2, #4
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e00d      	b.n	80028c0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	334d      	adds	r3, #77	@ 0x4d
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	f000 8100 	beq.w	8002abc <HCD_HC_IN_IRQHandler+0xcca>
 80028bc:	e000      	b.n	80028c0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028be:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	334c      	adds	r3, #76	@ 0x4c
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f005 fe1e 	bl	8008518 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028dc:	e0ef      	b.n	8002abe <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f002 fd0c 	bl	8005304 <USB_ReadChInterrupts>
 80028ec:	4603      	mov	r3, r0
 80028ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f2:	2b40      	cmp	r3, #64	@ 0x40
 80028f4:	d12f      	bne.n	8002956 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002902:	461a      	mov	r2, r3
 8002904:	2340      	movs	r3, #64	@ 0x40
 8002906:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	334d      	adds	r3, #77	@ 0x4d
 8002918:	2205      	movs	r2, #5
 800291a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	331a      	adds	r3, #26
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3344      	adds	r3, #68	@ 0x44
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	4611      	mov	r1, r2
 800294e:	4618      	mov	r0, r3
 8002950:	f003 fa83 	bl	8005e5a <USB_HC_Halt>
 8002954:	e0b3      	b.n	8002abe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f002 fcd0 	bl	8005304 <USB_ReadChInterrupts>
 8002964:	4603      	mov	r3, r0
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	2b10      	cmp	r3, #16
 800296c:	f040 80a7 	bne.w	8002abe <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	3326      	adds	r3, #38	@ 0x26
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d11b      	bne.n	80029be <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	3344      	adds	r3, #68	@ 0x44
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	334d      	adds	r3, #77	@ 0x4d
 80029aa:	2204      	movs	r2, #4
 80029ac:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f003 fa4f 	bl	8005e5a <USB_HC_Halt>
 80029bc:	e03f      	b.n	8002a3e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3326      	adds	r3, #38	@ 0x26
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	3326      	adds	r3, #38	@ 0x26
 80029e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d129      	bne.n	8002a3e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029ea:	78fa      	ldrb	r2, [r7, #3]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3344      	adds	r3, #68	@ 0x44
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	799b      	ldrb	r3, [r3, #6]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HCD_HC_IN_IRQHandler+0xc2a>
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	331b      	adds	r3, #27
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d110      	bne.n	8002a3e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	334d      	adds	r3, #77	@ 0x4d
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f003 fa0e 	bl	8005e5a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	331b      	adds	r3, #27
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d129      	bne.n	8002aa8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	331b      	adds	r3, #27
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	015a      	lsls	r2, r3, #5
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4413      	add	r3, r2
 8002a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	0151      	lsls	r1, r2, #5
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	440a      	add	r2, r1
 8002a7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a86:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	0151      	lsls	r1, r2, #5
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	440a      	add	r2, r1
 8002a9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002aa2:	f043 0320 	orr.w	r3, r3, #32
 8002aa6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	6093      	str	r3, [r2, #8]
 8002aba:	e000      	b.n	8002abe <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002abc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f002 fc0e 	bl	8005304 <USB_ReadChInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d11b      	bne.n	8002b2a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002afe:	461a      	mov	r2, r3
 8002b00:	2304      	movs	r3, #4
 8002b02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	334d      	adds	r3, #77	@ 0x4d
 8002b14:	2207      	movs	r2, #7
 8002b16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f003 f99a 	bl	8005e5a <USB_HC_Halt>
 8002b26:	f000 bc89 	b.w	800343c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f002 fbe6 	bl	8005304 <USB_ReadChInterrupts>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	f040 8082 	bne.w	8002c48 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b50:	461a      	mov	r2, r3
 8002b52:	2320      	movs	r3, #32
 8002b54:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	3319      	adds	r3, #25
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d124      	bne.n	8002bb6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	3319      	adds	r3, #25
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	334c      	adds	r3, #76	@ 0x4c
 8002b90:	2202      	movs	r2, #2
 8002b92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	334d      	adds	r3, #77	@ 0x4d
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 f952 	bl	8005e5a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	331a      	adds	r3, #26
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	f040 8437 	bne.w	800343c <HCD_HC_OUT_IRQHandler+0x978>
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	331b      	adds	r3, #27
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f040 842b 	bne.w	800343c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3326      	adds	r3, #38	@ 0x26
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d009      	beq.n	8002c10 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	331b      	adds	r3, #27
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	334d      	adds	r3, #77	@ 0x4d
 8002c20:	2203      	movs	r2, #3
 8002c22:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 f914 	bl	8005e5a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	3344      	adds	r3, #68	@ 0x44
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	e3f9      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 fb57 	bl	8005304 <USB_ReadChInterrupts>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c60:	d111      	bne.n	8002c86 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c74:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 f8eb 	bl	8005e5a <USB_HC_Halt>
 8002c84:	e3da      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f002 fb38 	bl	8005304 <USB_ReadChInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d168      	bne.n	8002d70 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	3344      	adds	r3, #68	@ 0x44
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 fb22 	bl	8005304 <USB_ReadChInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc6:	2b40      	cmp	r3, #64	@ 0x40
 8002cc8:	d112      	bne.n	8002cf0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3319      	adds	r3, #25
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cea:	461a      	mov	r2, r3
 8002cec:	2340      	movs	r3, #64	@ 0x40
 8002cee:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002cf0:	78fa      	ldrb	r2, [r7, #3]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	331b      	adds	r3, #27
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d019      	beq.n	8002d3a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	1a9b      	subs	r3, r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	331b      	adds	r3, #27
 8002d16:	2200      	movs	r2, #0
 8002d18:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	015a      	lsls	r2, r3, #5
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4413      	add	r3, r2
 8002d22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	0151      	lsls	r1, r2, #5
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	440a      	add	r2, r1
 8002d30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d38:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	2301      	movs	r3, #1
 8002d4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	334d      	adds	r3, #77	@ 0x4d
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f003 f876 	bl	8005e5a <USB_HC_Halt>
 8002d6e:	e365      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f002 fac3 	bl	8005304 <USB_ReadChInterrupts>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d84:	2b40      	cmp	r3, #64	@ 0x40
 8002d86:	d139      	bne.n	8002dfc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	334d      	adds	r3, #77	@ 0x4d
 8002d98:	2205      	movs	r2, #5
 8002d9a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	331a      	adds	r3, #26
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3319      	adds	r3, #25
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3344      	adds	r3, #68	@ 0x44
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	4611      	mov	r1, r2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f003 f839 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df4:	461a      	mov	r2, r3
 8002df6:	2340      	movs	r3, #64	@ 0x40
 8002df8:	6093      	str	r3, [r2, #8]
 8002dfa:	e31f      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	4611      	mov	r1, r2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f002 fa7d 	bl	8005304 <USB_ReadChInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d11a      	bne.n	8002e4a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e20:	461a      	mov	r2, r3
 8002e22:	2308      	movs	r3, #8
 8002e24:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	334d      	adds	r3, #77	@ 0x4d
 8002e36:	2206      	movs	r2, #6
 8002e38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f003 f809 	bl	8005e5a <USB_HC_Halt>
 8002e48:	e2f8      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f002 fa56 	bl	8005304 <USB_ReadChInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	d144      	bne.n	8002eec <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	3344      	adds	r3, #68	@ 0x44
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	334d      	adds	r3, #77	@ 0x4d
 8002e86:	2204      	movs	r2, #4
 8002e88:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3319      	adds	r3, #25
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d114      	bne.n	8002eca <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	3318      	adds	r3, #24
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	1a9b      	subs	r3, r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	3319      	adds	r3, #25
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f002 ffc1 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2310      	movs	r3, #16
 8002ee8:	6093      	str	r3, [r2, #8]
 8002eea:	e2a7      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 fa05 	bl	8005304 <USB_ReadChInterrupts>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f00:	2b80      	cmp	r3, #128	@ 0x80
 8002f02:	f040 8083 	bne.w	800300c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	799b      	ldrb	r3, [r3, #6]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d111      	bne.n	8002f32 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	334d      	adds	r3, #77	@ 0x4d
 8002f1e:	2207      	movs	r2, #7
 8002f20:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 ff95 	bl	8005e5a <USB_HC_Halt>
 8002f30:	e062      	b.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	3344      	adds	r3, #68	@ 0x44
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	1c59      	adds	r1, r3, #1
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4403      	add	r3, r0
 8002f52:	3344      	adds	r3, #68	@ 0x44
 8002f54:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3344      	adds	r3, #68	@ 0x44
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d922      	bls.n	8002fb2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	3344      	adds	r3, #68	@ 0x44
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	334c      	adds	r3, #76	@ 0x4c
 8002f90:	2204      	movs	r2, #4
 8002f92:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	334c      	adds	r3, #76	@ 0x4c
 8002fa4:	781a      	ldrb	r2, [r3, #0]
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f005 fab4 	bl	8008518 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fb0:	e022      	b.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	334c      	adds	r3, #76	@ 0x4c
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fdc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fe4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003004:	461a      	mov	r2, r3
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	6093      	str	r3, [r2, #8]
 800300a:	e217      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f002 f975 	bl	8005304 <USB_ReadChInterrupts>
 800301a:	4603      	mov	r3, r0
 800301c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003020:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003024:	d11b      	bne.n	800305e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	334d      	adds	r3, #77	@ 0x4d
 8003036:	2209      	movs	r2, #9
 8003038:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f002 ff09 	bl	8005e5a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003054:	461a      	mov	r2, r3
 8003056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800305a:	6093      	str	r3, [r2, #8]
 800305c:	e1ee      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	78fa      	ldrb	r2, [r7, #3]
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f002 f94c 	bl	8005304 <USB_ReadChInterrupts>
 800306c:	4603      	mov	r3, r0
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	f040 81df 	bne.w	8003436 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003084:	461a      	mov	r2, r3
 8003086:	2302      	movs	r3, #2
 8003088:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	334d      	adds	r3, #77	@ 0x4d
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b01      	cmp	r3, #1
 800309e:	f040 8093 	bne.w	80031c8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	334d      	adds	r3, #77	@ 0x4d
 80030b2:	2202      	movs	r2, #2
 80030b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	334c      	adds	r3, #76	@ 0x4c
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	3326      	adds	r3, #38	@ 0x26
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d00b      	beq.n	80030f8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3326      	adds	r3, #38	@ 0x26
 80030f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	f040 8190 	bne.w	8003418 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	799b      	ldrb	r3, [r3, #6]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d115      	bne.n	800312c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	333d      	adds	r3, #61	@ 0x3d
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	f083 0301 	eor.w	r3, r3, #1
 8003118:	b2d8      	uxtb	r0, r3
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	333d      	adds	r3, #61	@ 0x3d
 8003128:	4602      	mov	r2, r0
 800312a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	799b      	ldrb	r3, [r3, #6]
 8003130:	2b01      	cmp	r3, #1
 8003132:	f040 8171 	bne.w	8003418 <HCD_HC_OUT_IRQHandler+0x954>
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	3334      	adds	r3, #52	@ 0x34
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8165 	beq.w	8003418 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3334      	adds	r3, #52	@ 0x34
 800315e:	6819      	ldr	r1, [r3, #0]
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	1a9b      	subs	r3, r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4403      	add	r3, r0
 800316e:	3328      	adds	r3, #40	@ 0x28
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	440b      	add	r3, r1
 8003174:	1e59      	subs	r1, r3, #1
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4403      	add	r3, r0
 8003184:	3328      	adds	r3, #40	@ 0x28
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	fbb1 f3f3 	udiv	r3, r1, r3
 800318c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 813f 	beq.w	8003418 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	333d      	adds	r3, #61	@ 0x3d
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	f083 0301 	eor.w	r3, r3, #1
 80031b2:	b2d8      	uxtb	r0, r3
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	333d      	adds	r3, #61	@ 0x3d
 80031c2:	4602      	mov	r2, r0
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e127      	b.n	8003418 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	334d      	adds	r3, #77	@ 0x4d
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d120      	bne.n	8003220 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	334d      	adds	r3, #77	@ 0x4d
 80031ee:	2202      	movs	r2, #2
 80031f0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	331b      	adds	r3, #27
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	f040 8107 	bne.w	8003418 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	334c      	adds	r3, #76	@ 0x4c
 800321a:	2202      	movs	r2, #2
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e0fb      	b.n	8003418 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	334d      	adds	r3, #77	@ 0x4d
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b04      	cmp	r3, #4
 8003234:	d13a      	bne.n	80032ac <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	334d      	adds	r3, #77	@ 0x4d
 8003246:	2202      	movs	r2, #2
 8003248:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	334c      	adds	r3, #76	@ 0x4c
 800325a:	2202      	movs	r2, #2
 800325c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	331b      	adds	r3, #27
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	f040 80d1 	bne.w	8003418 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003276:	78fa      	ldrb	r2, [r7, #3]
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	1a9b      	subs	r3, r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	331b      	adds	r3, #27
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4413      	add	r3, r2
 8003292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	0151      	lsls	r1, r2, #5
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	440a      	add	r2, r1
 80032a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032a8:	6053      	str	r3, [r2, #4]
 80032aa:	e0b5      	b.n	8003418 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	334d      	adds	r3, #77	@ 0x4d
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d114      	bne.n	80032ec <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	334d      	adds	r3, #77	@ 0x4d
 80032d2:	2202      	movs	r2, #2
 80032d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334c      	adds	r3, #76	@ 0x4c
 80032e6:	2202      	movs	r2, #2
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	e095      	b.n	8003418 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	334d      	adds	r3, #77	@ 0x4d
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d114      	bne.n	800332c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	334d      	adds	r3, #77	@ 0x4d
 8003312:	2202      	movs	r2, #2
 8003314:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	334c      	adds	r3, #76	@ 0x4c
 8003326:	2205      	movs	r2, #5
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	e075      	b.n	8003418 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	334d      	adds	r3, #77	@ 0x4d
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b07      	cmp	r3, #7
 8003340:	d00a      	beq.n	8003358 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	334d      	adds	r3, #77	@ 0x4d
 8003352:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003354:	2b09      	cmp	r3, #9
 8003356:	d170      	bne.n	800343a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	334d      	adds	r3, #77	@ 0x4d
 8003368:	2202      	movs	r2, #2
 800336a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	011b      	lsls	r3, r3, #4
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	3344      	adds	r3, #68	@ 0x44
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	1c59      	adds	r1, r3, #1
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4403      	add	r3, r0
 800338c:	3344      	adds	r3, #68	@ 0x44
 800338e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	3344      	adds	r3, #68	@ 0x44
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d914      	bls.n	80033d0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	3344      	adds	r3, #68	@ 0x44
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	334c      	adds	r3, #76	@ 0x4c
 80033ca:	2204      	movs	r2, #4
 80033cc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033ce:	e022      	b.n	8003416 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	334c      	adds	r3, #76	@ 0x4c
 80033e0:	2202      	movs	r2, #2
 80033e2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003402:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003410:	461a      	mov	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003416:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	334c      	adds	r3, #76	@ 0x4c
 8003428:	781a      	ldrb	r2, [r3, #0]
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	4619      	mov	r1, r3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f005 f872 	bl	8008518 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003434:	e002      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003436:	bf00      	nop
 8003438:	e000      	b.n	800343c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800343a:	bf00      	nop
  }
}
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003442:	b580      	push	{r7, lr}
 8003444:	b08a      	sub	sp, #40	@ 0x28
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	0c5b      	lsrs	r3, r3, #17
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003476:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d004      	beq.n	8003488 <HCD_RXQLVL_IRQHandler+0x46>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b05      	cmp	r3, #5
 8003482:	f000 80b6 	beq.w	80035f2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003486:	e0b7      	b.n	80035f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80b3 	beq.w	80035f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	332c      	adds	r3, #44	@ 0x2c
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80a7 	beq.w	80035f6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	3338      	adds	r3, #56	@ 0x38
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	18d1      	adds	r1, r2, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4403      	add	r3, r0
 80034cc:	3334      	adds	r3, #52	@ 0x34
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4299      	cmp	r1, r3
 80034d2:	f200 8083 	bhi.w	80035dc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	332c      	adds	r3, #44	@ 0x2c
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	b292      	uxth	r2, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	f001 fe9c 	bl	800522e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4613      	mov	r3, r2
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	332c      	adds	r3, #44	@ 0x2c
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	18d1      	adds	r1, r2, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4613      	mov	r3, r2
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4403      	add	r3, r0
 800351a:	332c      	adds	r3, #44	@ 0x2c
 800351c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3338      	adds	r3, #56	@ 0x38
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	18d1      	adds	r1, r2, r3
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4403      	add	r3, r0
 8003542:	3338      	adds	r3, #56	@ 0x38
 8003544:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	0cdb      	lsrs	r3, r3, #19
 8003556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800355a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3328      	adds	r3, #40	@ 0x28
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4293      	cmp	r3, r2
 8003574:	d13f      	bne.n	80035f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d03c      	beq.n	80035f6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	4413      	add	r3, r2
 8003584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003592:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800359a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a8:	461a      	mov	r2, r3
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	333c      	adds	r3, #60	@ 0x3c
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	f083 0301 	eor.w	r3, r3, #1
 80035c4:	b2d8      	uxtb	r0, r3
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	333c      	adds	r3, #60	@ 0x3c
 80035d6:	4602      	mov	r2, r0
 80035d8:	701a      	strb	r2, [r3, #0]
      break;
 80035da:	e00c      	b.n	80035f6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4613      	mov	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	334c      	adds	r3, #76	@ 0x4c
 80035ec:	2204      	movs	r2, #4
 80035ee:	701a      	strb	r2, [r3, #0]
      break;
 80035f0:	e001      	b.n	80035f6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80035f6:	bf00      	nop
  }
}
 80035f8:	bf00      	nop
 80035fa:	3728      	adds	r7, #40	@ 0x28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800362c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b02      	cmp	r3, #2
 8003636:	d10b      	bne.n	8003650 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f004 ff4c 	bl	80084e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f043 0302 	orr.w	r3, r3, #2
 800364e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0308 	and.w	r3, r3, #8
 8003656:	2b08      	cmp	r3, #8
 8003658:	d132      	bne.n	80036c0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f043 0308 	orr.w	r3, r3, #8
 8003660:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b04      	cmp	r3, #4
 800366a:	d126      	bne.n	80036ba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7a5b      	ldrb	r3, [r3, #9]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d113      	bne.n	800369c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800367a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800367e:	d106      	bne.n	800368e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2102      	movs	r1, #2
 8003686:	4618      	mov	r0, r3
 8003688:	f001 ff68 	bl	800555c <USB_InitFSLSPClkSel>
 800368c:	e011      	b.n	80036b2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2101      	movs	r1, #1
 8003694:	4618      	mov	r0, r3
 8003696:	f001 ff61 	bl	800555c <USB_InitFSLSPClkSel>
 800369a:	e00a      	b.n	80036b2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	79db      	ldrb	r3, [r3, #7]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d106      	bne.n	80036b2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036aa:	461a      	mov	r2, r3
 80036ac:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80036b0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f004 ff3e 	bl	8008534 <HAL_HCD_PortEnabled_Callback>
 80036b8:	e002      	b.n	80036c0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f004 ff48 	bl	8008550 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b20      	cmp	r3, #32
 80036c8:	d103      	bne.n	80036d2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f043 0320 	orr.w	r3, r3, #32
 80036d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036d8:	461a      	mov	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6013      	str	r3, [r2, #0]
}
 80036de:	bf00      	nop
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e12b      	b.n	8003952 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd f9a0 	bl	8000a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	@ 0x24
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800373a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800374a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800374c:	f001 fa20 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8003750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4a81      	ldr	r2, [pc, #516]	@ (800395c <HAL_I2C_Init+0x274>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d807      	bhi.n	800376c <HAL_I2C_Init+0x84>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a80      	ldr	r2, [pc, #512]	@ (8003960 <HAL_I2C_Init+0x278>)
 8003760:	4293      	cmp	r3, r2
 8003762:	bf94      	ite	ls
 8003764:	2301      	movls	r3, #1
 8003766:	2300      	movhi	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e006      	b.n	800377a <HAL_I2C_Init+0x92>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a7d      	ldr	r2, [pc, #500]	@ (8003964 <HAL_I2C_Init+0x27c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0e7      	b.n	8003952 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a78      	ldr	r2, [pc, #480]	@ (8003968 <HAL_I2C_Init+0x280>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0c9b      	lsrs	r3, r3, #18
 800378c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a6a      	ldr	r2, [pc, #424]	@ (800395c <HAL_I2C_Init+0x274>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d802      	bhi.n	80037bc <HAL_I2C_Init+0xd4>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3301      	adds	r3, #1
 80037ba:	e009      	b.n	80037d0 <HAL_I2C_Init+0xe8>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	4a69      	ldr	r2, [pc, #420]	@ (800396c <HAL_I2C_Init+0x284>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	3301      	adds	r3, #1
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	495c      	ldr	r1, [pc, #368]	@ (800395c <HAL_I2C_Init+0x274>)
 80037ec:	428b      	cmp	r3, r1
 80037ee:	d819      	bhi.n	8003824 <HAL_I2C_Init+0x13c>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e59      	subs	r1, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80037fe:	1c59      	adds	r1, r3, #1
 8003800:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003804:	400b      	ands	r3, r1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_I2C_Init+0x138>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1e59      	subs	r1, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fbb1 f3f3 	udiv	r3, r1, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381e:	e051      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 8003820:	2304      	movs	r3, #4
 8003822:	e04f      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d111      	bne.n	8003850 <HAL_I2C_Init+0x168>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e58      	subs	r0, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e012      	b.n	8003876 <HAL_I2C_Init+0x18e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e58      	subs	r0, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	0099      	lsls	r1, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	fbb0 f3f3 	udiv	r3, r0, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Init+0x196>
 800387a:	2301      	movs	r3, #1
 800387c:	e022      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10e      	bne.n	80038a4 <HAL_I2C_Init+0x1bc>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1e58      	subs	r0, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	440b      	add	r3, r1
 8003894:	fbb0 f3f3 	udiv	r3, r0, r3
 8003898:	3301      	adds	r3, #1
 800389a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038a2:	e00f      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1e58      	subs	r0, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	0099      	lsls	r1, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ba:	3301      	adds	r3, #1
 80038bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	6809      	ldr	r1, [r1, #0]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6911      	ldr	r1, [r2, #16]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68d2      	ldr	r2, [r2, #12]
 80038fe:	4311      	orrs	r1, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	430b      	orrs	r3, r1
 8003906:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	000186a0 	.word	0x000186a0
 8003960:	001e847f 	.word	0x001e847f
 8003964:	003d08ff 	.word	0x003d08ff
 8003968:	431bde83 	.word	0x431bde83
 800396c:	10624dd3 	.word	0x10624dd3

08003970 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e128      	b.n	8003bd4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d109      	bne.n	80039a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a90      	ldr	r2, [pc, #576]	@ (8003bdc <HAL_I2S_Init+0x26c>)
 800399a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7fd f8a1 	bl	8000ae4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039b8:	f023 030f 	bic.w	r3, r3, #15
 80039bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2202      	movs	r2, #2
 80039c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d060      	beq.n	8003a90 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039d6:	2310      	movs	r3, #16
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	e001      	b.n	80039e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039dc:	2320      	movs	r3, #32
 80039de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d802      	bhi.n	80039ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039ee:	2001      	movs	r0, #1
 80039f0:	f001 f9c4 	bl	8004d7c <HAL_RCCEx_GetPeriphCLKFreq>
 80039f4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039fe:	d125      	bne.n	8003a4c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d010      	beq.n	8003a2a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	3305      	adds	r3, #5
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	e01f      	b.n	8003a6a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	3305      	adds	r3, #5
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	e00e      	b.n	8003a6a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	3305      	adds	r3, #5
 8003a68:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4a5c      	ldr	r2, [pc, #368]	@ (8003be0 <HAL_I2S_Init+0x270>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	08db      	lsrs	r3, r3, #3
 8003a74:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	e003      	b.n	8003a98 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a90:	2302      	movs	r3, #2
 8003a92:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d902      	bls.n	8003aa4 <HAL_I2S_Init+0x134>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	2bff      	cmp	r3, #255	@ 0xff
 8003aa2:	d907      	bls.n	8003ab4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa8:	f043 0210 	orr.w	r2, r3, #16
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e08f      	b.n	8003bd4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	ea42 0103 	orr.w	r1, r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ad2:	f023 030f 	bic.w	r3, r3, #15
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6851      	ldr	r1, [r2, #4]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6892      	ldr	r2, [r2, #8]
 8003ade:	4311      	orrs	r1, r2
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	68d2      	ldr	r2, [r2, #12]
 8003ae4:	4311      	orrs	r1, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6992      	ldr	r2, [r2, #24]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003af6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d161      	bne.n	8003bc4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a38      	ldr	r2, [pc, #224]	@ (8003be4 <HAL_I2S_Init+0x274>)
 8003b04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a37      	ldr	r2, [pc, #220]	@ (8003be8 <HAL_I2S_Init+0x278>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d101      	bne.n	8003b14 <HAL_I2S_Init+0x1a4>
 8003b10:	4b36      	ldr	r3, [pc, #216]	@ (8003bec <HAL_I2S_Init+0x27c>)
 8003b12:	e001      	b.n	8003b18 <HAL_I2S_Init+0x1a8>
 8003b14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	4932      	ldr	r1, [pc, #200]	@ (8003be8 <HAL_I2S_Init+0x278>)
 8003b20:	428a      	cmp	r2, r1
 8003b22:	d101      	bne.n	8003b28 <HAL_I2S_Init+0x1b8>
 8003b24:	4a31      	ldr	r2, [pc, #196]	@ (8003bec <HAL_I2S_Init+0x27c>)
 8003b26:	e001      	b.n	8003b2c <HAL_I2S_Init+0x1bc>
 8003b28:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003b2c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b30:	f023 030f 	bic.w	r3, r3, #15
 8003b34:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003be8 <HAL_I2S_Init+0x278>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <HAL_I2S_Init+0x1d4>
 8003b40:	4b2a      	ldr	r3, [pc, #168]	@ (8003bec <HAL_I2S_Init+0x27c>)
 8003b42:	e001      	b.n	8003b48 <HAL_I2S_Init+0x1d8>
 8003b44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b48:	2202      	movs	r2, #2
 8003b4a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a25      	ldr	r2, [pc, #148]	@ (8003be8 <HAL_I2S_Init+0x278>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d101      	bne.n	8003b5a <HAL_I2S_Init+0x1ea>
 8003b56:	4b25      	ldr	r3, [pc, #148]	@ (8003bec <HAL_I2S_Init+0x27c>)
 8003b58:	e001      	b.n	8003b5e <HAL_I2S_Init+0x1ee>
 8003b5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b6a:	d003      	beq.n	8003b74 <HAL_I2S_Init+0x204>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d103      	bne.n	8003b7c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	e001      	b.n	8003b80 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b94:	4313      	orrs	r3, r2
 8003b96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	897b      	ldrh	r3, [r7, #10]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003bac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8003be8 <HAL_I2S_Init+0x278>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d101      	bne.n	8003bbc <HAL_I2S_Init+0x24c>
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bec <HAL_I2S_Init+0x27c>)
 8003bba:	e001      	b.n	8003bc0 <HAL_I2S_Init+0x250>
 8003bbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bc0:	897a      	ldrh	r2, [r7, #10]
 8003bc2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3720      	adds	r7, #32
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	08003ce7 	.word	0x08003ce7
 8003be0:	cccccccd 	.word	0xcccccccd
 8003be4:	08003dfd 	.word	0x08003dfd
 8003be8:	40003800 	.word	0x40003800
 8003bec:	40003400 	.word	0x40003400

08003bf0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	881a      	ldrh	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	1c9a      	adds	r2, r3, #2
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10e      	bne.n	8003c80 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c70:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff ffb8 	bl	8003bf0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c80:	bf00      	nop
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9a:	b292      	uxth	r2, r2
 8003c9c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca2:	1c9a      	adds	r2, r3, #2
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10e      	bne.n	8003cde <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ff93 	bl	8003c04 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b086      	sub	sp, #24
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d13a      	bne.n	8003d78 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d109      	bne.n	8003d20 <I2S_IRQHandler+0x3a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d16:	2b40      	cmp	r3, #64	@ 0x40
 8003d18:	d102      	bne.n	8003d20 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff ffb4 	bl	8003c88 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d26:	2b40      	cmp	r3, #64	@ 0x40
 8003d28:	d126      	bne.n	8003d78 <I2S_IRQHandler+0x92>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d11f      	bne.n	8003d78 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6a:	f043 0202 	orr.w	r2, r3, #2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ff50 	bl	8003c18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d136      	bne.n	8003df2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d109      	bne.n	8003da2 <I2S_IRQHandler+0xbc>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d98:	2b80      	cmp	r3, #128	@ 0x80
 8003d9a:	d102      	bne.n	8003da2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff ff45 	bl	8003c2c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d122      	bne.n	8003df2 <I2S_IRQHandler+0x10c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d11b      	bne.n	8003df2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dc8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de4:	f043 0204 	orr.w	r2, r3, #4
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff ff13 	bl	8003c18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003df2:	bf00      	nop
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a92      	ldr	r2, [pc, #584]	@ (800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d101      	bne.n	8003e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e16:	4b92      	ldr	r3, [pc, #584]	@ (8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e18:	e001      	b.n	8003e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a8b      	ldr	r2, [pc, #556]	@ (800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d101      	bne.n	8003e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e34:	4b8a      	ldr	r3, [pc, #552]	@ (8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e36:	e001      	b.n	8003e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e48:	d004      	beq.n	8003e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f040 8099 	bne.w	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d107      	bne.n	8003e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f925 	bl	80040b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d107      	bne.n	8003e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f9c8 	bl	8004218 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8e:	2b40      	cmp	r3, #64	@ 0x40
 8003e90:	d13a      	bne.n	8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d035      	beq.n	8003f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a6e      	ldr	r2, [pc, #440]	@ (800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ea6:	4b6e      	ldr	r3, [pc, #440]	@ (8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea8:	e001      	b.n	8003eae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003eaa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4969      	ldr	r1, [pc, #420]	@ (800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb6:	428b      	cmp	r3, r1
 8003eb8:	d101      	bne.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003eba:	4b69      	ldr	r3, [pc, #420]	@ (8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ebc:	e001      	b.n	8003ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ebe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ec2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ec6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ed6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ed8:	2300      	movs	r3, #0
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efa:	f043 0202 	orr.w	r2, r3, #2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fe88 	bl	8003c18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	f040 80c3 	bne.w	800409a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 80bd 	beq.w	800409a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f2e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a49      	ldr	r2, [pc, #292]	@ (800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f3a:	4b49      	ldr	r3, [pc, #292]	@ (8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f3c:	e001      	b.n	8003f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4944      	ldr	r1, [pc, #272]	@ (800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f4a:	428b      	cmp	r3, r1
 8003f4c:	d101      	bne.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f4e:	4b44      	ldr	r3, [pc, #272]	@ (8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f50:	e001      	b.n	8003f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f5a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60bb      	str	r3, [r7, #8]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f76:	f043 0204 	orr.w	r2, r3, #4
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fe4a 	bl	8003c18 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f84:	e089      	b.n	800409a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d107      	bne.n	8003fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f8be 	bl	800411c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d107      	bne.n	8003fba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f8fd 	bl	80041b4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc0:	2b40      	cmp	r3, #64	@ 0x40
 8003fc2:	d12f      	bne.n	8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d02a      	beq.n	8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fdc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d101      	bne.n	8003fec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fea:	e001      	b.n	8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4919      	ldr	r1, [pc, #100]	@ (800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff8:	428b      	cmp	r3, r1
 8003ffa:	d101      	bne.n	8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ffc:	4b18      	ldr	r3, [pc, #96]	@ (8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffe:	e001      	b.n	8004004 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004000:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004004:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004008:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	f043 0202 	orr.w	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff fdfa 	bl	8003c18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b08      	cmp	r3, #8
 800402c:	d136      	bne.n	800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d031      	beq.n	800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a07      	ldr	r2, [pc, #28]	@ (800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004042:	4b07      	ldr	r3, [pc, #28]	@ (8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004044:	e001      	b.n	800404a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004046:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4902      	ldr	r1, [pc, #8]	@ (800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004052:	428b      	cmp	r3, r1
 8004054:	d106      	bne.n	8004064 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004056:	4b02      	ldr	r3, [pc, #8]	@ (8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004058:	e006      	b.n	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800405a:	bf00      	nop
 800405c:	40003800 	.word	0x40003800
 8004060:	40003400 	.word	0x40003400
 8004064:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004068:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800406c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800407c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	f043 0204 	orr.w	r2, r3, #4
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff fdc0 	bl	8003c18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004098:	e000      	b.n	800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800409a:	bf00      	nop
}
 800409c:	bf00      	nop
 800409e:	3720      	adds	r7, #32
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c4:	1c99      	adds	r1, r3, #2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6251      	str	r1, [r2, #36]	@ 0x24
 80040ca:	881a      	ldrh	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d113      	bne.n	8004112 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d106      	bne.n	8004112 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff ffc9 	bl	80040a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004112:	bf00      	nop
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	1c99      	adds	r1, r3, #2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6251      	str	r1, [r2, #36]	@ 0x24
 800412e:	8819      	ldrh	r1, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1d      	ldr	r2, [pc, #116]	@ (80041ac <I2SEx_TxISR_I2SExt+0x90>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <I2SEx_TxISR_I2SExt+0x22>
 800413a:	4b1d      	ldr	r3, [pc, #116]	@ (80041b0 <I2SEx_TxISR_I2SExt+0x94>)
 800413c:	e001      	b.n	8004142 <I2SEx_TxISR_I2SExt+0x26>
 800413e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004142:	460a      	mov	r2, r1
 8004144:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d121      	bne.n	80041a2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a12      	ldr	r2, [pc, #72]	@ (80041ac <I2SEx_TxISR_I2SExt+0x90>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d101      	bne.n	800416c <I2SEx_TxISR_I2SExt+0x50>
 8004168:	4b11      	ldr	r3, [pc, #68]	@ (80041b0 <I2SEx_TxISR_I2SExt+0x94>)
 800416a:	e001      	b.n	8004170 <I2SEx_TxISR_I2SExt+0x54>
 800416c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	490d      	ldr	r1, [pc, #52]	@ (80041ac <I2SEx_TxISR_I2SExt+0x90>)
 8004178:	428b      	cmp	r3, r1
 800417a:	d101      	bne.n	8004180 <I2SEx_TxISR_I2SExt+0x64>
 800417c:	4b0c      	ldr	r3, [pc, #48]	@ (80041b0 <I2SEx_TxISR_I2SExt+0x94>)
 800417e:	e001      	b.n	8004184 <I2SEx_TxISR_I2SExt+0x68>
 8004180:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004184:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004188:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d106      	bne.n	80041a2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7ff ff81 	bl	80040a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40003800 	.word	0x40003800
 80041b0:	40003400 	.word	0x40003400

080041b4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68d8      	ldr	r0, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c6:	1c99      	adds	r1, r3, #2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80041cc:	b282      	uxth	r2, r0
 80041ce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d113      	bne.n	8004210 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041f6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7ff ff4a 	bl	80040a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a20      	ldr	r2, [pc, #128]	@ (80042a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d101      	bne.n	800422e <I2SEx_RxISR_I2SExt+0x16>
 800422a:	4b20      	ldr	r3, [pc, #128]	@ (80042ac <I2SEx_RxISR_I2SExt+0x94>)
 800422c:	e001      	b.n	8004232 <I2SEx_RxISR_I2SExt+0x1a>
 800422e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004232:	68d8      	ldr	r0, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004238:	1c99      	adds	r1, r3, #2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800423e:	b282      	uxth	r2, r0
 8004240:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d121      	bne.n	800429e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a12      	ldr	r2, [pc, #72]	@ (80042a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d101      	bne.n	8004268 <I2SEx_RxISR_I2SExt+0x50>
 8004264:	4b11      	ldr	r3, [pc, #68]	@ (80042ac <I2SEx_RxISR_I2SExt+0x94>)
 8004266:	e001      	b.n	800426c <I2SEx_RxISR_I2SExt+0x54>
 8004268:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	490d      	ldr	r1, [pc, #52]	@ (80042a8 <I2SEx_RxISR_I2SExt+0x90>)
 8004274:	428b      	cmp	r3, r1
 8004276:	d101      	bne.n	800427c <I2SEx_RxISR_I2SExt+0x64>
 8004278:	4b0c      	ldr	r3, [pc, #48]	@ (80042ac <I2SEx_RxISR_I2SExt+0x94>)
 800427a:	e001      	b.n	8004280 <I2SEx_RxISR_I2SExt+0x68>
 800427c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004280:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004284:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d106      	bne.n	800429e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f7ff ff03 	bl	80040a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40003800 	.word	0x40003800
 80042ac:	40003400 	.word	0x40003400

080042b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e267      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d075      	beq.n	80043ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042ce:	4b88      	ldr	r3, [pc, #544]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d00c      	beq.n	80042f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042da:	4b85      	ldr	r3, [pc, #532]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d112      	bne.n	800430c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042e6:	4b82      	ldr	r3, [pc, #520]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042f2:	d10b      	bne.n	800430c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f4:	4b7e      	ldr	r3, [pc, #504]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d05b      	beq.n	80043b8 <HAL_RCC_OscConfig+0x108>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d157      	bne.n	80043b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e242      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004314:	d106      	bne.n	8004324 <HAL_RCC_OscConfig+0x74>
 8004316:	4b76      	ldr	r3, [pc, #472]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a75      	ldr	r2, [pc, #468]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800431c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	e01d      	b.n	8004360 <HAL_RCC_OscConfig+0xb0>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800432c:	d10c      	bne.n	8004348 <HAL_RCC_OscConfig+0x98>
 800432e:	4b70      	ldr	r3, [pc, #448]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a6f      	ldr	r2, [pc, #444]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004338:	6013      	str	r3, [r2, #0]
 800433a:	4b6d      	ldr	r3, [pc, #436]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a6c      	ldr	r2, [pc, #432]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	e00b      	b.n	8004360 <HAL_RCC_OscConfig+0xb0>
 8004348:	4b69      	ldr	r3, [pc, #420]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a68      	ldr	r2, [pc, #416]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800434e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	4b66      	ldr	r3, [pc, #408]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a65      	ldr	r2, [pc, #404]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800435a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800435e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d013      	beq.n	8004390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fc fd9c 	bl	8000ea4 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fc fd98 	bl	8000ea4 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	@ 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e207      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	4b5b      	ldr	r3, [pc, #364]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0xc0>
 800438e:	e014      	b.n	80043ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fc fd88 	bl	8000ea4 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004398:	f7fc fd84 	bl	8000ea4 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	@ 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e1f3      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	4b51      	ldr	r3, [pc, #324]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0xe8>
 80043b6:	e000      	b.n	80043ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d063      	beq.n	800448e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043c6:	4b4a      	ldr	r3, [pc, #296]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00b      	beq.n	80043ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d2:	4b47      	ldr	r3, [pc, #284]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d11c      	bne.n	8004418 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043de:	4b44      	ldr	r3, [pc, #272]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d116      	bne.n	8004418 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ea:	4b41      	ldr	r3, [pc, #260]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <HAL_RCC_OscConfig+0x152>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e1c7      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004402:	4b3b      	ldr	r3, [pc, #236]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4937      	ldr	r1, [pc, #220]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004412:	4313      	orrs	r3, r2
 8004414:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004416:	e03a      	b.n	800448e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d020      	beq.n	8004462 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004420:	4b34      	ldr	r3, [pc, #208]	@ (80044f4 <HAL_RCC_OscConfig+0x244>)
 8004422:	2201      	movs	r2, #1
 8004424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004426:	f7fc fd3d 	bl	8000ea4 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800442e:	f7fc fd39 	bl	8000ea4 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e1a8      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	4b2b      	ldr	r3, [pc, #172]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800444c:	4b28      	ldr	r3, [pc, #160]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	00db      	lsls	r3, r3, #3
 800445a:	4925      	ldr	r1, [pc, #148]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 800445c:	4313      	orrs	r3, r2
 800445e:	600b      	str	r3, [r1, #0]
 8004460:	e015      	b.n	800448e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004462:	4b24      	ldr	r3, [pc, #144]	@ (80044f4 <HAL_RCC_OscConfig+0x244>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fc fd1c 	bl	8000ea4 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004470:	f7fc fd18 	bl	8000ea4 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e187      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004482:	4b1b      	ldr	r3, [pc, #108]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d036      	beq.n	8004508 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d016      	beq.n	80044d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a2:	4b15      	ldr	r3, [pc, #84]	@ (80044f8 <HAL_RCC_OscConfig+0x248>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a8:	f7fc fcfc 	bl	8000ea4 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b0:	f7fc fcf8 	bl	8000ea4 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e167      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	4b0b      	ldr	r3, [pc, #44]	@ (80044f0 <HAL_RCC_OscConfig+0x240>)
 80044c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x200>
 80044ce:	e01b      	b.n	8004508 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d0:	4b09      	ldr	r3, [pc, #36]	@ (80044f8 <HAL_RCC_OscConfig+0x248>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d6:	f7fc fce5 	bl	8000ea4 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044dc:	e00e      	b.n	80044fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044de:	f7fc fce1 	bl	8000ea4 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d907      	bls.n	80044fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e150      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
 80044f0:	40023800 	.word	0x40023800
 80044f4:	42470000 	.word	0x42470000
 80044f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044fc:	4b88      	ldr	r3, [pc, #544]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80044fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1ea      	bne.n	80044de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 8097 	beq.w	8004644 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004516:	2300      	movs	r3, #0
 8004518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451a:	4b81      	ldr	r3, [pc, #516]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10f      	bne.n	8004546 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	4b7d      	ldr	r3, [pc, #500]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	4a7c      	ldr	r2, [pc, #496]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004534:	6413      	str	r3, [r2, #64]	@ 0x40
 8004536:	4b7a      	ldr	r3, [pc, #488]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004542:	2301      	movs	r3, #1
 8004544:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004546:	4b77      	ldr	r3, [pc, #476]	@ (8004724 <HAL_RCC_OscConfig+0x474>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d118      	bne.n	8004584 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004552:	4b74      	ldr	r3, [pc, #464]	@ (8004724 <HAL_RCC_OscConfig+0x474>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a73      	ldr	r2, [pc, #460]	@ (8004724 <HAL_RCC_OscConfig+0x474>)
 8004558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800455c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800455e:	f7fc fca1 	bl	8000ea4 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004566:	f7fc fc9d 	bl	8000ea4 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e10c      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004578:	4b6a      	ldr	r3, [pc, #424]	@ (8004724 <HAL_RCC_OscConfig+0x474>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d106      	bne.n	800459a <HAL_RCC_OscConfig+0x2ea>
 800458c:	4b64      	ldr	r3, [pc, #400]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004590:	4a63      	ldr	r2, [pc, #396]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6713      	str	r3, [r2, #112]	@ 0x70
 8004598:	e01c      	b.n	80045d4 <HAL_RCC_OscConfig+0x324>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b05      	cmp	r3, #5
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0x30c>
 80045a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045a8:	f043 0304 	orr.w	r3, r3, #4
 80045ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ba:	e00b      	b.n	80045d4 <HAL_RCC_OscConfig+0x324>
 80045bc:	4b58      	ldr	r3, [pc, #352]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c0:	4a57      	ldr	r2, [pc, #348]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045c2:	f023 0301 	bic.w	r3, r3, #1
 80045c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c8:	4b55      	ldr	r3, [pc, #340]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045cc:	4a54      	ldr	r2, [pc, #336]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045ce:	f023 0304 	bic.w	r3, r3, #4
 80045d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d015      	beq.n	8004608 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045dc:	f7fc fc62 	bl	8000ea4 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e4:	f7fc fc5e 	bl	8000ea4 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e0cb      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fa:	4b49      	ldr	r3, [pc, #292]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0ee      	beq.n	80045e4 <HAL_RCC_OscConfig+0x334>
 8004606:	e014      	b.n	8004632 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004608:	f7fc fc4c 	bl	8000ea4 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460e:	e00a      	b.n	8004626 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004610:	f7fc fc48 	bl	8000ea4 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461e:	4293      	cmp	r3, r2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e0b5      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004626:	4b3e      	ldr	r3, [pc, #248]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1ee      	bne.n	8004610 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004632:	7dfb      	ldrb	r3, [r7, #23]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d105      	bne.n	8004644 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004638:	4b39      	ldr	r3, [pc, #228]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 800463a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463c:	4a38      	ldr	r2, [pc, #224]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 800463e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004642:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a1 	beq.w	8004790 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800464e:	4b34      	ldr	r3, [pc, #208]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
 8004656:	2b08      	cmp	r3, #8
 8004658:	d05c      	beq.n	8004714 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d141      	bne.n	80046e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004662:	4b31      	ldr	r3, [pc, #196]	@ (8004728 <HAL_RCC_OscConfig+0x478>)
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004668:	f7fc fc1c 	bl	8000ea4 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004670:	f7fc fc18 	bl	8000ea4 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e087      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004682:	4b27      	ldr	r3, [pc, #156]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1f0      	bne.n	8004670 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69da      	ldr	r2, [r3, #28]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469c:	019b      	lsls	r3, r3, #6
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	3b01      	subs	r3, #1
 80046a8:	041b      	lsls	r3, r3, #16
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b0:	061b      	lsls	r3, r3, #24
 80046b2:	491b      	ldr	r1, [pc, #108]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004728 <HAL_RCC_OscConfig+0x478>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046be:	f7fc fbf1 	bl	8000ea4 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c6:	f7fc fbed 	bl	8000ea4 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e05c      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d8:	4b11      	ldr	r3, [pc, #68]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x416>
 80046e4:	e054      	b.n	8004790 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e6:	4b10      	ldr	r3, [pc, #64]	@ (8004728 <HAL_RCC_OscConfig+0x478>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fc fbda 	bl	8000ea4 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fc fbd6 	bl	8000ea4 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e045      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	4b06      	ldr	r3, [pc, #24]	@ (8004720 <HAL_RCC_OscConfig+0x470>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x444>
 8004712:	e03d      	b.n	8004790 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d107      	bne.n	800472c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e038      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
 8004720:	40023800 	.word	0x40023800
 8004724:	40007000 	.word	0x40007000
 8004728:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800472c:	4b1b      	ldr	r3, [pc, #108]	@ (800479c <HAL_RCC_OscConfig+0x4ec>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d028      	beq.n	800478c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d121      	bne.n	800478c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004752:	429a      	cmp	r2, r3
 8004754:	d11a      	bne.n	800478c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800475c:	4013      	ands	r3, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004762:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004764:	4293      	cmp	r3, r2
 8004766:	d111      	bne.n	800478c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004772:	085b      	lsrs	r3, r3, #1
 8004774:	3b01      	subs	r3, #1
 8004776:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004778:	429a      	cmp	r2, r3
 800477a:	d107      	bne.n	800478c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004786:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40023800 	.word	0x40023800

080047a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0cc      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b4:	4b68      	ldr	r3, [pc, #416]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d90c      	bls.n	80047dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b65      	ldr	r3, [pc, #404]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	b2d2      	uxtb	r2, r2
 80047c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b63      	ldr	r3, [pc, #396]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0b8      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f4:	4b59      	ldr	r3, [pc, #356]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a58      	ldr	r2, [pc, #352]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800480c:	4b53      	ldr	r3, [pc, #332]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	4a52      	ldr	r2, [pc, #328]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004816:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004818:	4b50      	ldr	r3, [pc, #320]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	494d      	ldr	r1, [pc, #308]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d044      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d107      	bne.n	800484e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	4b47      	ldr	r3, [pc, #284]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d119      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e07f      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d003      	beq.n	800485e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485a:	2b03      	cmp	r3, #3
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485e:	4b3f      	ldr	r3, [pc, #252]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e06f      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486e:	4b3b      	ldr	r3, [pc, #236]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e067      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487e:	4b37      	ldr	r3, [pc, #220]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f023 0203 	bic.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4934      	ldr	r1, [pc, #208]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	4313      	orrs	r3, r2
 800488e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004890:	f7fc fb08 	bl	8000ea4 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	e00a      	b.n	80048ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004898:	f7fc fb04 	bl	8000ea4 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e04f      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ae:	4b2b      	ldr	r3, [pc, #172]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 020c 	and.w	r2, r3, #12
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	429a      	cmp	r2, r3
 80048be:	d1eb      	bne.n	8004898 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048c0:	4b25      	ldr	r3, [pc, #148]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d20c      	bcs.n	80048e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b22      	ldr	r3, [pc, #136]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	4b20      	ldr	r3, [pc, #128]	@ (8004958 <HAL_RCC_ClockConfig+0x1b8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e032      	b.n	800494e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f4:	4b19      	ldr	r3, [pc, #100]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4916      	ldr	r1, [pc, #88]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	4313      	orrs	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004912:	4b12      	ldr	r3, [pc, #72]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	490e      	ldr	r1, [pc, #56]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004926:	f000 f821 	bl	800496c <HAL_RCC_GetSysClockFreq>
 800492a:	4602      	mov	r2, r0
 800492c:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	490a      	ldr	r1, [pc, #40]	@ (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	5ccb      	ldrb	r3, [r1, r3]
 800493a:	fa22 f303 	lsr.w	r3, r2, r3
 800493e:	4a09      	ldr	r2, [pc, #36]	@ (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <HAL_RCC_ClockConfig+0x1c8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7fc fa68 	bl	8000e1c <HAL_InitTick>

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40023c00 	.word	0x40023c00
 800495c:	40023800 	.word	0x40023800
 8004960:	08008be8 	.word	0x08008be8
 8004964:	20000000 	.word	0x20000000
 8004968:	20000004 	.word	0x20000004

0800496c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800496c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004970:	b094      	sub	sp, #80	@ 0x50
 8004972:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004974:	2300      	movs	r3, #0
 8004976:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004984:	4b79      	ldr	r3, [pc, #484]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	2b08      	cmp	r3, #8
 800498e:	d00d      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x40>
 8004990:	2b08      	cmp	r3, #8
 8004992:	f200 80e1 	bhi.w	8004b58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x34>
 800499a:	2b04      	cmp	r3, #4
 800499c:	d003      	beq.n	80049a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800499e:	e0db      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049a0:	4b73      	ldr	r3, [pc, #460]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x204>)
 80049a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049a4:	e0db      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049a6:	4b73      	ldr	r3, [pc, #460]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x208>)
 80049a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049aa:	e0d8      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049ac:	4b6f      	ldr	r3, [pc, #444]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049b6:	4b6d      	ldr	r3, [pc, #436]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d063      	beq.n	8004a8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	2200      	movs	r2, #0
 80049ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049d6:	2300      	movs	r3, #0
 80049d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049de:	4622      	mov	r2, r4
 80049e0:	462b      	mov	r3, r5
 80049e2:	f04f 0000 	mov.w	r0, #0
 80049e6:	f04f 0100 	mov.w	r1, #0
 80049ea:	0159      	lsls	r1, r3, #5
 80049ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f0:	0150      	lsls	r0, r2, #5
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4621      	mov	r1, r4
 80049f8:	1a51      	subs	r1, r2, r1
 80049fa:	6139      	str	r1, [r7, #16]
 80049fc:	4629      	mov	r1, r5
 80049fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a10:	4659      	mov	r1, fp
 8004a12:	018b      	lsls	r3, r1, #6
 8004a14:	4651      	mov	r1, sl
 8004a16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a1a:	4651      	mov	r1, sl
 8004a1c:	018a      	lsls	r2, r1, #6
 8004a1e:	4651      	mov	r1, sl
 8004a20:	ebb2 0801 	subs.w	r8, r2, r1
 8004a24:	4659      	mov	r1, fp
 8004a26:	eb63 0901 	sbc.w	r9, r3, r1
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a3e:	4690      	mov	r8, r2
 8004a40:	4699      	mov	r9, r3
 8004a42:	4623      	mov	r3, r4
 8004a44:	eb18 0303 	adds.w	r3, r8, r3
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	462b      	mov	r3, r5
 8004a4c:	eb49 0303 	adc.w	r3, r9, r3
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a5e:	4629      	mov	r1, r5
 8004a60:	024b      	lsls	r3, r1, #9
 8004a62:	4621      	mov	r1, r4
 8004a64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a68:	4621      	mov	r1, r4
 8004a6a:	024a      	lsls	r2, r1, #9
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a72:	2200      	movs	r2, #0
 8004a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a7c:	f7fb fba4 	bl	80001c8 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4613      	mov	r3, r2
 8004a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a88:	e058      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8a:	4b38      	ldr	r3, [pc, #224]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	099b      	lsrs	r3, r3, #6
 8004a90:	2200      	movs	r2, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	4611      	mov	r1, r2
 8004a96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a9a:	623b      	str	r3, [r7, #32]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	f04f 0000 	mov.w	r0, #0
 8004aac:	f04f 0100 	mov.w	r1, #0
 8004ab0:	0159      	lsls	r1, r3, #5
 8004ab2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab6:	0150      	lsls	r0, r2, #5
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4641      	mov	r1, r8
 8004abe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ad4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ad8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004adc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ae0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	00eb      	lsls	r3, r5, #3
 8004aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004af2:	00e2      	lsls	r2, r4, #3
 8004af4:	4614      	mov	r4, r2
 8004af6:	461d      	mov	r5, r3
 8004af8:	4643      	mov	r3, r8
 8004afa:	18e3      	adds	r3, r4, r3
 8004afc:	603b      	str	r3, [r7, #0]
 8004afe:	464b      	mov	r3, r9
 8004b00:	eb45 0303 	adc.w	r3, r5, r3
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b12:	4629      	mov	r1, r5
 8004b14:	028b      	lsls	r3, r1, #10
 8004b16:	4621      	mov	r1, r4
 8004b18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	028a      	lsls	r2, r1, #10
 8004b20:	4610      	mov	r0, r2
 8004b22:	4619      	mov	r1, r3
 8004b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b26:	2200      	movs	r2, #0
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	61fa      	str	r2, [r7, #28]
 8004b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b30:	f7fb fb4a 	bl	80001c8 <__aeabi_uldivmod>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4613      	mov	r3, r2
 8004b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	3301      	adds	r3, #1
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b56:	e002      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b58:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3750      	adds	r7, #80	@ 0x50
 8004b64:	46bd      	mov	sp, r7
 8004b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	00f42400 	.word	0x00f42400
 8004b74:	007a1200 	.word	0x007a1200

08004b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	@ (8004b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000000 	.word	0x20000000

08004b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b94:	f7ff fff0 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	4b05      	ldr	r3, [pc, #20]	@ (8004bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	0a9b      	lsrs	r3, r3, #10
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	4903      	ldr	r1, [pc, #12]	@ (8004bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba6:	5ccb      	ldrb	r3, [r1, r3]
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	08008bf8 	.word	0x08008bf8

08004bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d035      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004be0:	4b62      	ldr	r3, [pc, #392]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004be6:	f7fc f95d 	bl	8000ea4 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bec:	e008      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bee:	f7fc f959 	bl	8000ea4 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e0b0      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c00:	4b5b      	ldr	r3, [pc, #364]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f0      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	019a      	lsls	r2, r3, #6
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	071b      	lsls	r3, r3, #28
 8004c18:	4955      	ldr	r1, [pc, #340]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c20:	4b52      	ldr	r3, [pc, #328]	@ (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c26:	f7fc f93d 	bl	8000ea4 <HAL_GetTick>
 8004c2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c2c:	e008      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c2e:	f7fc f939 	bl	8000ea4 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e090      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c40:	4b4b      	ldr	r3, [pc, #300]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8083 	beq.w	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	4b44      	ldr	r3, [pc, #272]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	4a43      	ldr	r2, [pc, #268]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c6a:	4b41      	ldr	r3, [pc, #260]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c76:	4b3f      	ldr	r3, [pc, #252]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a3e      	ldr	r2, [pc, #248]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c82:	f7fc f90f 	bl	8000ea4 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c88:	e008      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8a:	f7fc f90b 	bl	8000ea4 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e062      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c9c:	4b35      	ldr	r3, [pc, #212]	@ (8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ca8:	4b31      	ldr	r3, [pc, #196]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cb0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d02f      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d028      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cd0:	4b29      	ldr	r3, [pc, #164]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd6:	4b28      	ldr	r3, [pc, #160]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cdc:	4a24      	ldr	r2, [pc, #144]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ce2:	4b23      	ldr	r3, [pc, #140]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d114      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cee:	f7fc f8d9 	bl	8000ea4 <HAL_GetTick>
 8004cf2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf6:	f7fc f8d5 	bl	8000ea4 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e02a      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0c:	4b18      	ldr	r3, [pc, #96]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0ee      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d24:	d10d      	bne.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d26:	4b12      	ldr	r3, [pc, #72]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d3a:	490d      	ldr	r1, [pc, #52]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	608b      	str	r3, [r1, #8]
 8004d40:	e005      	b.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d42:	4b0b      	ldr	r3, [pc, #44]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	4a0a      	ldr	r2, [pc, #40]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d48:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d4c:	6093      	str	r3, [r2, #8]
 8004d4e:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d50:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d5a:	4905      	ldr	r1, [pc, #20]	@ (8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	42470068 	.word	0x42470068
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40007000 	.word	0x40007000
 8004d78:	42470e40 	.word	0x42470e40

08004d7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d13f      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d9a:	4b24      	ldr	r3, [pc, #144]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004da2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d006      	beq.n	8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004db0:	d12f      	bne.n	8004e12 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004db2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004db4:	617b      	str	r3, [r7, #20]
          break;
 8004db6:	e02f      	b.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004db8:	4b1c      	ldr	r3, [pc, #112]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dc4:	d108      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dc6:	4b19      	ldr	r3, [pc, #100]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dce:	4a19      	ldr	r2, [pc, #100]	@ (8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	e007      	b.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dd8:	4b14      	ldr	r3, [pc, #80]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004de0:	4a15      	ldr	r2, [pc, #84]	@ (8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004de8:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dee:	099b      	lsrs	r3, r3, #6
 8004df0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e02:	0f1b      	lsrs	r3, r3, #28
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	617b      	str	r3, [r7, #20]
          break;
 8004e10:	e002      	b.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
          break;
 8004e16:	bf00      	nop
        }
      }
      break;
 8004e18:	e000      	b.n	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004e1a:	bf00      	nop
    }
  }
  return frequency;
 8004e1c:	697b      	ldr	r3, [r7, #20]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	00bb8000 	.word	0x00bb8000
 8004e34:	007a1200 	.word	0x007a1200
 8004e38:	00f42400 	.word	0x00f42400

08004e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e07b      	b.n	8004f46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d108      	bne.n	8004e68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e5e:	d009      	beq.n	8004e74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	61da      	str	r2, [r3, #28]
 8004e66:	e005      	b.n	8004e74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fb fea8 	bl	8000be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef8:	ea42 0103 	orr.w	r1, r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	0c1b      	lsrs	r3, r3, #16
 8004f12:	f003 0104 	and.w	r1, r3, #4
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	f003 0210 	and.w	r2, r3, #16
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f4e:	b084      	sub	sp, #16
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	f107 001c 	add.w	r0, r7, #28
 8004f5c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f60:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d123      	bne.n	8004fb0 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f90:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d105      	bne.n	8004fa4 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f9dc 	bl	8005362 <USB_CoreReset>
 8004faa:	4603      	mov	r3, r0
 8004fac:	73fb      	strb	r3, [r7, #15]
 8004fae:	e01b      	b.n	8004fe8 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f9d0 	bl	8005362 <USB_CoreReset>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fc6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fda:	e005      	b.n	8004fe8 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004fe8:	7fbb      	ldrb	r3, [r7, #30]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d10b      	bne.n	8005006 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f043 0206 	orr.w	r2, r3, #6
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f043 0220 	orr.w	r2, r3, #32
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005006:	7bfb      	ldrb	r3, [r7, #15]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005012:	b004      	add	sp, #16
 8005014:	4770      	bx	lr

08005016 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f043 0201 	orr.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f023 0201 	bic.w	r2, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	460b      	mov	r3, r1
 8005064:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d115      	bne.n	80050a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005088:	200a      	movs	r0, #10
 800508a:	f7fb ff17 	bl	8000ebc <HAL_Delay>
      ms += 10U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	330a      	adds	r3, #10
 8005092:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f956 	bl	8005346 <USB_GetMode>
 800509a:	4603      	mov	r3, r0
 800509c:	2b01      	cmp	r3, #1
 800509e:	d01e      	beq.n	80050de <USB_SetCurrentMode+0x84>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80050a4:	d9f0      	bls.n	8005088 <USB_SetCurrentMode+0x2e>
 80050a6:	e01a      	b.n	80050de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d115      	bne.n	80050da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050ba:	200a      	movs	r0, #10
 80050bc:	f7fb fefe 	bl	8000ebc <HAL_Delay>
      ms += 10U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	330a      	adds	r3, #10
 80050c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f93d 	bl	8005346 <USB_GetMode>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <USB_SetCurrentMode+0x84>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80050d6:	d9f0      	bls.n	80050ba <USB_SetCurrentMode+0x60>
 80050d8:	e001      	b.n	80050de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e005      	b.n	80050ea <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2bc8      	cmp	r3, #200	@ 0xc8
 80050e2:	d101      	bne.n	80050e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b085      	sub	sp, #20
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3301      	adds	r3, #1
 8005104:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800510c:	d901      	bls.n	8005112 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e01b      	b.n	800514a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	daf2      	bge.n	8005100 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	019b      	lsls	r3, r3, #6
 8005122:	f043 0220 	orr.w	r2, r3, #32
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3301      	adds	r3, #1
 800512e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005136:	d901      	bls.n	800513c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e006      	b.n	800514a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f003 0320 	and.w	r3, r3, #32
 8005144:	2b20      	cmp	r3, #32
 8005146:	d0f0      	beq.n	800512a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005156:	b480      	push	{r7}
 8005158:	b085      	sub	sp, #20
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3301      	adds	r3, #1
 8005166:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800516e:	d901      	bls.n	8005174 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e018      	b.n	80051a6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	daf2      	bge.n	8005162 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2210      	movs	r2, #16
 8005184:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	3301      	adds	r3, #1
 800518a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005192:	d901      	bls.n	8005198 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e006      	b.n	80051a6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f003 0310 	and.w	r3, r3, #16
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d0f0      	beq.n	8005186 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b089      	sub	sp, #36	@ 0x24
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	4611      	mov	r1, r2
 80051be:	461a      	mov	r2, r3
 80051c0:	460b      	mov	r3, r1
 80051c2:	71fb      	strb	r3, [r7, #7]
 80051c4:	4613      	mov	r3, r2
 80051c6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80051d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d123      	bne.n	8005220 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80051d8:	88bb      	ldrh	r3, [r7, #4]
 80051da:	3303      	adds	r3, #3
 80051dc:	089b      	lsrs	r3, r3, #2
 80051de:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80051e0:	2300      	movs	r3, #0
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	e018      	b.n	8005218 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	031a      	lsls	r2, r3, #12
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051f2:	461a      	mov	r2, r3
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	3301      	adds	r3, #1
 80051fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	3301      	adds	r3, #1
 8005204:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	3301      	adds	r3, #1
 800520a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	3301      	adds	r3, #1
 8005210:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	3301      	adds	r3, #1
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	429a      	cmp	r2, r3
 800521e:	d3e2      	bcc.n	80051e6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3724      	adds	r7, #36	@ 0x24
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800522e:	b480      	push	{r7}
 8005230:	b08b      	sub	sp, #44	@ 0x2c
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	4613      	mov	r3, r2
 800523a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	089b      	lsrs	r3, r3, #2
 8005248:	b29b      	uxth	r3, r3
 800524a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005254:	2300      	movs	r3, #0
 8005256:	623b      	str	r3, [r7, #32]
 8005258:	e014      	b.n	8005284 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	601a      	str	r2, [r3, #0]
    pDest++;
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	3301      	adds	r3, #1
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800526c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526e:	3301      	adds	r3, #1
 8005270:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	3301      	adds	r3, #1
 8005276:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	3301      	adds	r3, #1
 800527c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	3301      	adds	r3, #1
 8005282:	623b      	str	r3, [r7, #32]
 8005284:	6a3a      	ldr	r2, [r7, #32]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	429a      	cmp	r2, r3
 800528a:	d3e6      	bcc.n	800525a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800528c:	8bfb      	ldrh	r3, [r7, #30]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01e      	beq.n	80052d0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800529c:	461a      	mov	r2, r3
 800529e:	f107 0310 	add.w	r3, r7, #16
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	fa22 f303 	lsr.w	r3, r2, r3
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	701a      	strb	r2, [r3, #0]
      i++;
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	3301      	adds	r3, #1
 80052bc:	623b      	str	r3, [r7, #32]
      pDest++;
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	3301      	adds	r3, #1
 80052c2:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80052c4:	8bfb      	ldrh	r3, [r7, #30]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80052ca:	8bfb      	ldrh	r3, [r7, #30]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1ea      	bne.n	80052a6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	372c      	adds	r7, #44	@ 0x2c
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80052de:	b480      	push	{r7}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4013      	ands	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80052f6:	68fb      	ldr	r3, [r7, #12]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	68ba      	ldr	r2, [r7, #8]
 8005334:	4013      	ands	r3, r2
 8005336:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005338:	68bb      	ldr	r3, [r7, #8]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f003 0301 	and.w	r3, r3, #1
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005362:	b480      	push	{r7}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3301      	adds	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800537a:	d901      	bls.n	8005380 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e022      	b.n	80053c6 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	daf2      	bge.n	800536e <USB_CoreReset+0xc>

  count = 10U;
 8005388:	230a      	movs	r3, #10
 800538a:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800538c:	e002      	b.n	8005394 <USB_CoreReset+0x32>
  {
    count--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	3b01      	subs	r3, #1
 8005392:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f9      	bne.n	800538e <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f043 0201 	orr.w	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3301      	adds	r3, #1
 80053aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053b2:	d901      	bls.n	80053b8 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e006      	b.n	80053c6 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d0f0      	beq.n	80053a6 <USB_CoreReset+0x44>

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
	...

080053d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053d4:	b084      	sub	sp, #16
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b086      	sub	sp, #24
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80053e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053f4:	461a      	mov	r2, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005416:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d119      	bne.n	800545e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800542a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800542e:	2b01      	cmp	r3, #1
 8005430:	d10a      	bne.n	8005448 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005440:	f043 0304 	orr.w	r3, r3, #4
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	e014      	b.n	8005472 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005456:	f023 0304 	bic.w	r3, r3, #4
 800545a:	6013      	str	r3, [r2, #0]
 800545c:	e009      	b.n	8005472 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800546c:	f023 0304 	bic.w	r3, r3, #4
 8005470:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005472:	2110      	movs	r1, #16
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff fe3c 	bl	80050f2 <USB_FlushTxFifo>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7ff fe66 	bl	8005156 <USB_FlushRxFifo>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	e015      	b.n	80054c6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054a6:	461a      	mov	r2, r3
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054ac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054ba:	461a      	mov	r2, r3
 80054bc:	2300      	movs	r3, #0
 80054be:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	3301      	adds	r3, #1
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80054ca:	461a      	mov	r2, r3
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d3e3      	bcc.n	800549a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054de:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a18      	ldr	r2, [pc, #96]	@ (8005544 <USB_HostInit+0x170>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d10b      	bne.n	8005500 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054ee:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a15      	ldr	r2, [pc, #84]	@ (8005548 <USB_HostInit+0x174>)
 80054f4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a14      	ldr	r2, [pc, #80]	@ (800554c <USB_HostInit+0x178>)
 80054fa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80054fe:	e009      	b.n	8005514 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2280      	movs	r2, #128	@ 0x80
 8005504:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a11      	ldr	r2, [pc, #68]	@ (8005550 <USB_HostInit+0x17c>)
 800550a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a11      	ldr	r2, [pc, #68]	@ (8005554 <USB_HostInit+0x180>)
 8005510:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005514:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005518:	2b00      	cmp	r3, #0
 800551a:	d105      	bne.n	8005528 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	f043 0210 	orr.w	r2, r3, #16
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	4b0a      	ldr	r3, [pc, #40]	@ (8005558 <USB_HostInit+0x184>)
 800552e:	4313      	orrs	r3, r2
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005534:	7dfb      	ldrb	r3, [r7, #23]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005540:	b004      	add	sp, #16
 8005542:	4770      	bx	lr
 8005544:	40040000 	.word	0x40040000
 8005548:	01000200 	.word	0x01000200
 800554c:	00e00300 	.word	0x00e00300
 8005550:	00600080 	.word	0x00600080
 8005554:	004000e0 	.word	0x004000e0
 8005558:	a3200008 	.word	0xa3200008

0800555c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800557a:	f023 0303 	bic.w	r3, r3, #3
 800557e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	68f9      	ldr	r1, [r7, #12]
 8005590:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005594:	4313      	orrs	r3, r2
 8005596:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d107      	bne.n	80055ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055a4:	461a      	mov	r2, r3
 80055a6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80055aa:	6053      	str	r3, [r2, #4]
 80055ac:	e00c      	b.n	80055c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d107      	bne.n	80055c4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055ba:	461a      	mov	r2, r3
 80055bc:	f241 7370 	movw	r3, #6000	@ 0x1770
 80055c0:	6053      	str	r3, [r2, #4]
 80055c2:	e001      	b.n	80055c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80055f6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005604:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005606:	2064      	movs	r0, #100	@ 0x64
 8005608:	f7fb fc58 	bl	8000ebc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005618:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800561a:	200a      	movs	r0, #10
 800561c:	f7fb fc4e 	bl	8000ebc <HAL_Delay>

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800564e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <USB_DriveVbus+0x44>
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d106      	bne.n	800566e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005668:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800566c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005674:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005678:	d109      	bne.n	800568e <USB_DriveVbus+0x64>
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005688:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800568c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	0c5b      	lsrs	r3, r3, #17
 80056ba:	f003 0303 	and.w	r3, r3, #3
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	b29b      	uxth	r3, r3
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	4608      	mov	r0, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	461a      	mov	r2, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	70fb      	strb	r3, [r7, #3]
 80056fe:	460b      	mov	r3, r1
 8005700:	70bb      	strb	r3, [r7, #2]
 8005702:	4613      	mov	r3, r2
 8005704:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4413      	add	r3, r2
 8005716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800571a:	461a      	mov	r2, r3
 800571c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005720:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005722:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005726:	2b03      	cmp	r3, #3
 8005728:	d87c      	bhi.n	8005824 <USB_HC_Init+0x138>
 800572a:	a201      	add	r2, pc, #4	@ (adr r2, 8005730 <USB_HC_Init+0x44>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005741 	.word	0x08005741
 8005734:	080057e7 	.word	0x080057e7
 8005738:	08005741 	.word	0x08005741
 800573c:	080057a9 	.word	0x080057a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800574c:	461a      	mov	r2, r3
 800574e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005752:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005754:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005758:	2b00      	cmp	r3, #0
 800575a:	da10      	bge.n	800577e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4413      	add	r3, r2
 8005764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	0151      	lsls	r1, r2, #5
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	440a      	add	r2, r1
 8005772:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800577a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800577c:	e055      	b.n	800582a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a6f      	ldr	r2, [pc, #444]	@ (8005940 <USB_HC_Init+0x254>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d151      	bne.n	800582a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4413      	add	r3, r2
 800578e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	78fa      	ldrb	r2, [r7, #3]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	440a      	add	r2, r1
 800579c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057a0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80057a4:	60d3      	str	r3, [r2, #12]
      break;
 80057a6:	e040      	b.n	800582a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057b4:	461a      	mov	r2, r3
 80057b6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80057ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	da34      	bge.n	800582e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	78fa      	ldrb	r2, [r7, #3]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057e4:	e023      	b.n	800582e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057e6:	78fb      	ldrb	r3, [r7, #3]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f2:	461a      	mov	r2, r3
 80057f4:	f240 2325 	movw	r3, #549	@ 0x225
 80057f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	da17      	bge.n	8005832 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	4413      	add	r3, r2
 800580a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	440a      	add	r2, r1
 8005818:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800581c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005820:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005822:	e006      	b.n	8005832 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	77fb      	strb	r3, [r7, #31]
      break;
 8005828:	e004      	b.n	8005834 <USB_HC_Init+0x148>
      break;
 800582a:	bf00      	nop
 800582c:	e002      	b.n	8005834 <USB_HC_Init+0x148>
      break;
 800582e:	bf00      	nop
 8005830:	e000      	b.n	8005834 <USB_HC_Init+0x148>
      break;
 8005832:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4413      	add	r3, r2
 800583c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005840:	461a      	mov	r2, r3
 8005842:	2300      	movs	r3, #0
 8005844:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	4413      	add	r3, r2
 800584e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	78fa      	ldrb	r2, [r7, #3]
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	440a      	add	r2, r1
 800585c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005860:	f043 0302 	orr.w	r3, r3, #2
 8005864:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800586c:	699a      	ldr	r2, [r3, #24]
 800586e:	78fb      	ldrb	r3, [r7, #3]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	2101      	movs	r1, #1
 8005876:	fa01 f303 	lsl.w	r3, r1, r3
 800587a:	6939      	ldr	r1, [r7, #16]
 800587c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005880:	4313      	orrs	r3, r2
 8005882:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005890:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005894:	2b00      	cmp	r3, #0
 8005896:	da03      	bge.n	80058a0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005898:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	e001      	b.n	80058a4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff fef9 	bl	800569c <USB_GetHostSpeed>
 80058aa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80058ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d106      	bne.n	80058c2 <USB_HC_Init+0x1d6>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d003      	beq.n	80058c2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	e001      	b.n	80058c6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058c6:	787b      	ldrb	r3, [r7, #1]
 80058c8:	059b      	lsls	r3, r3, #22
 80058ca:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058ce:	78bb      	ldrb	r3, [r7, #2]
 80058d0:	02db      	lsls	r3, r3, #11
 80058d2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058dc:	049b      	lsls	r3, r3, #18
 80058de:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80058e4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80058e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058ea:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	431a      	orrs	r2, r3
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058f4:	78fa      	ldrb	r2, [r7, #3]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005900:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005904:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005906:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800590a:	2b03      	cmp	r3, #3
 800590c:	d003      	beq.n	8005916 <USB_HC_Init+0x22a>
 800590e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d10f      	bne.n	8005936 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	78fa      	ldrb	r2, [r7, #3]
 8005926:	0151      	lsls	r1, r2, #5
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	440a      	add	r2, r1
 800592c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005930:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005934:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005936:	7ffb      	ldrb	r3, [r7, #31]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	40040000 	.word	0x40040000

08005944 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08c      	sub	sp, #48	@ 0x30
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	4613      	mov	r3, r2
 8005950:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800595c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005960:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4a5d      	ldr	r2, [pc, #372]	@ (8005adc <USB_HC_StartXfer+0x198>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d12f      	bne.n	80059ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d11c      	bne.n	80059aa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	7c9b      	ldrb	r3, [r3, #18]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <USB_HC_StartXfer+0x3c>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	7c9b      	ldrb	r3, [r3, #18]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d124      	bne.n	80059ca <USB_HC_StartXfer+0x86>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	799b      	ldrb	r3, [r3, #6]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d120      	bne.n	80059ca <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	4413      	add	r3, r2
 8005990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	6a3a      	ldr	r2, [r7, #32]
 800599c:	440a      	add	r2, r1
 800599e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a6:	60d3      	str	r3, [r2, #12]
 80059a8:	e00f      	b.n	80059ca <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	791b      	ldrb	r3, [r3, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10b      	bne.n	80059ca <USB_HC_StartXfer+0x86>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	795b      	ldrb	r3, [r3, #5]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d107      	bne.n	80059ca <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	4619      	mov	r1, r3
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 fb6b 	bl	800609c <USB_DoPing>
        return HAL_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e232      	b.n	8005e30 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	799b      	ldrb	r3, [r3, #6]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d158      	bne.n	8005a84 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80059d2:	2301      	movs	r3, #1
 80059d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	78db      	ldrb	r3, [r3, #3]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d007      	beq.n	80059ee <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	8a92      	ldrh	r2, [r2, #20]
 80059e4:	fb03 f202 	mul.w	r2, r3, r2
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	61da      	str	r2, [r3, #28]
 80059ec:	e07c      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	7c9b      	ldrb	r3, [r3, #18]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d130      	bne.n	8005a58 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	2bbc      	cmp	r3, #188	@ 0xbc
 80059fc:	d918      	bls.n	8005a30 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	8a9b      	ldrh	r3, [r3, #20]
 8005a02:	461a      	mov	r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	69da      	ldr	r2, [r3, #28]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d003      	beq.n	8005a20 <USB_HC_StartXfer+0xdc>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d103      	bne.n	8005a28 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2202      	movs	r2, #2
 8005a24:	60da      	str	r2, [r3, #12]
 8005a26:	e05f      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	60da      	str	r2, [r3, #12]
 8005a2e:	e05b      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d007      	beq.n	8005a50 <USB_HC_StartXfer+0x10c>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d003      	beq.n	8005a50 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	60da      	str	r2, [r3, #12]
 8005a4e:	e04b      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2203      	movs	r2, #3
 8005a54:	60da      	str	r2, [r3, #12]
 8005a56:	e047      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005a58:	79fb      	ldrb	r3, [r7, #7]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d10d      	bne.n	8005a7a <USB_HC_StartXfer+0x136>
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	8a92      	ldrh	r2, [r2, #20]
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d907      	bls.n	8005a7a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a6a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	8a92      	ldrh	r2, [r2, #20]
 8005a70:	fb03 f202 	mul.w	r2, r3, r2
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	61da      	str	r2, [r3, #28]
 8005a78:	e036      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6a1a      	ldr	r2, [r3, #32]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	61da      	str	r2, [r3, #28]
 8005a82:	e031      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d018      	beq.n	8005abe <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	8a92      	ldrh	r2, [r2, #20]
 8005a94:	4413      	add	r3, r2
 8005a96:	3b01      	subs	r3, #1
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	8a92      	ldrh	r2, [r2, #20]
 8005a9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005aa0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005aa2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005aa4:	8b7b      	ldrh	r3, [r7, #26]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d90b      	bls.n	8005ac2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005aaa:	8b7b      	ldrh	r3, [r7, #26]
 8005aac:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005aae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	8a92      	ldrh	r2, [r2, #20]
 8005ab4:	fb03 f202 	mul.w	r2, r3, r2
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	61da      	str	r2, [r3, #28]
 8005abc:	e001      	b.n	8005ac2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	78db      	ldrb	r3, [r3, #3]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005aca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	8a92      	ldrh	r2, [r2, #20]
 8005ad0:	fb03 f202 	mul.w	r2, r3, r2
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	61da      	str	r2, [r3, #28]
 8005ad8:	e006      	b.n	8005ae8 <USB_HC_StartXfer+0x1a4>
 8005ada:	bf00      	nop
 8005adc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005af0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005af2:	04d9      	lsls	r1, r3, #19
 8005af4:	4ba3      	ldr	r3, [pc, #652]	@ (8005d84 <USB_HC_StartXfer+0x440>)
 8005af6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005af8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	7d9b      	ldrb	r3, [r3, #22]
 8005afe:	075b      	lsls	r3, r3, #29
 8005b00:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b04:	69f9      	ldr	r1, [r7, #28]
 8005b06:	0148      	lsls	r0, r1, #5
 8005b08:	6a39      	ldr	r1, [r7, #32]
 8005b0a:	4401      	add	r1, r0
 8005b0c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b10:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b12:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d009      	beq.n	8005b2e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6999      	ldr	r1, [r3, #24]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b2a:	460a      	mov	r2, r1
 8005b2c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bf0c      	ite	eq
 8005b3e:	2301      	moveq	r3, #1
 8005b40:	2300      	movne	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	6a3a      	ldr	r2, [r7, #32]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b64:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	7e7b      	ldrb	r3, [r7, #25]
 8005b76:	075b      	lsls	r3, r3, #29
 8005b78:	69f9      	ldr	r1, [r7, #28]
 8005b7a:	0148      	lsls	r0, r1, #5
 8005b7c:	6a39      	ldr	r1, [r7, #32]
 8005b7e:	4401      	add	r1, r0
 8005b80:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005b84:	4313      	orrs	r3, r2
 8005b86:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	799b      	ldrb	r3, [r3, #6]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	f040 80c3 	bne.w	8005d18 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	7c5b      	ldrb	r3, [r3, #17]
 8005b96:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	0151      	lsls	r1, r2, #5
 8005ba2:	6a3a      	ldr	r2, [r7, #32]
 8005ba4:	440a      	add	r2, r1
 8005ba6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005baa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005bae:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	69fa      	ldr	r2, [r7, #28]
 8005bc0:	0151      	lsls	r1, r2, #5
 8005bc2:	6a3a      	ldr	r2, [r7, #32]
 8005bc4:	440a      	add	r2, r1
 8005bc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005bce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	79db      	ldrb	r3, [r3, #7]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d123      	bne.n	8005c20 <USB_HC_StartXfer+0x2dc>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	78db      	ldrb	r3, [r3, #3]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d11f      	bne.n	8005c20 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	6a3a      	ldr	r2, [r7, #32]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bfe:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	6a3b      	ldr	r3, [r7, #32]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	6a3a      	ldr	r2, [r7, #32]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c1e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	7c9b      	ldrb	r3, [r3, #18]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d003      	beq.n	8005c30 <USB_HC_StartXfer+0x2ec>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	7c9b      	ldrb	r3, [r3, #18]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d117      	bne.n	8005c60 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d113      	bne.n	8005c60 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	78db      	ldrb	r3, [r3, #3]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d10f      	bne.n	8005c60 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	0151      	lsls	r1, r2, #5
 8005c52:	6a3a      	ldr	r2, [r7, #32]
 8005c54:	440a      	add	r2, r1
 8005c56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c5e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	7c9b      	ldrb	r3, [r3, #18]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d162      	bne.n	8005d2e <USB_HC_StartXfer+0x3ea>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	78db      	ldrb	r3, [r3, #3]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d15e      	bne.n	8005d2e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d858      	bhi.n	8005d2c <USB_HC_StartXfer+0x3e8>
 8005c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c80 <USB_HC_StartXfer+0x33c>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005c91 	.word	0x08005c91
 8005c84:	08005cb3 	.word	0x08005cb3
 8005c88:	08005cd5 	.word	0x08005cd5
 8005c8c:	08005cf7 	.word	0x08005cf7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	6a3a      	ldr	r2, [r7, #32]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cae:	6053      	str	r3, [r2, #4]
          break;
 8005cb0:	e03d      	b.n	8005d2e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	6a3a      	ldr	r2, [r7, #32]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ccc:	f043 030e 	orr.w	r3, r3, #14
 8005cd0:	6053      	str	r3, [r2, #4]
          break;
 8005cd2:	e02c      	b.n	8005d2e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cf2:	6053      	str	r3, [r2, #4]
          break;
 8005cf4:	e01b      	b.n	8005d2e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	69fa      	ldr	r2, [r7, #28]
 8005d06:	0151      	lsls	r1, r2, #5
 8005d08:	6a3a      	ldr	r2, [r7, #32]
 8005d0a:	440a      	add	r2, r1
 8005d0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d14:	6053      	str	r3, [r2, #4]
          break;
 8005d16:	e00a      	b.n	8005d2e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d24:	461a      	mov	r2, r3
 8005d26:	2300      	movs	r3, #0
 8005d28:	6053      	str	r3, [r2, #4]
 8005d2a:	e000      	b.n	8005d2e <USB_HC_StartXfer+0x3ea>
          break;
 8005d2c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d44:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	78db      	ldrb	r3, [r3, #3]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	e003      	b.n	8005d60 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d5e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d66:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d74:	461a      	mov	r2, r3
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e055      	b.n	8005e30 <USB_HC_StartXfer+0x4ec>
 8005d84:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	78db      	ldrb	r3, [r3, #3]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d14e      	bne.n	8005e2e <USB_HC_StartXfer+0x4ea>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d04a      	beq.n	8005e2e <USB_HC_StartXfer+0x4ea>
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	79db      	ldrb	r3, [r3, #7]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d146      	bne.n	8005e2e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	7c9b      	ldrb	r3, [r3, #18]
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d831      	bhi.n	8005e0c <USB_HC_StartXfer+0x4c8>
 8005da8:	a201      	add	r2, pc, #4	@ (adr r2, 8005db0 <USB_HC_StartXfer+0x46c>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005dc1 	.word	0x08005dc1
 8005db4:	08005de5 	.word	0x08005de5
 8005db8:	08005dc1 	.word	0x08005dc1
 8005dbc:	08005de5 	.word	0x08005de5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	3303      	adds	r3, #3
 8005dc6:	089b      	lsrs	r3, r3, #2
 8005dc8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005dca:	8afa      	ldrh	r2, [r7, #22]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d91c      	bls.n	8005e10 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	f043 0220 	orr.w	r2, r3, #32
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005de2:	e015      	b.n	8005e10 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	3303      	adds	r3, #3
 8005dea:	089b      	lsrs	r3, r3, #2
 8005dec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005dee:	8afa      	ldrh	r2, [r7, #22]
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d90a      	bls.n	8005e14 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e0a:	e003      	b.n	8005e14 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005e0c:	bf00      	nop
 8005e0e:	e002      	b.n	8005e16 <USB_HC_StartXfer+0x4d2>
        break;
 8005e10:	bf00      	nop
 8005e12:	e000      	b.n	8005e16 <USB_HC_StartXfer+0x4d2>
        break;
 8005e14:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6999      	ldr	r1, [r3, #24]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	785a      	ldrb	r2, [r3, #1]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	2000      	movs	r0, #0
 8005e26:	9000      	str	r0, [sp, #0]
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f7ff f9c2 	bl	80051b2 <USB_WritePacket>
  }

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3728      	adds	r7, #40	@ 0x28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	b29b      	uxth	r3, r3
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b089      	sub	sp, #36	@ 0x24
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	460b      	mov	r3, r1
 8005e64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	0c9b      	lsrs	r3, r3, #18
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	0fdb      	lsrs	r3, r3, #31
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	015a      	lsls	r2, r3, #5
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	0fdb      	lsrs	r3, r3, #31
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d10d      	bne.n	8005edc <USB_HC_Halt+0x82>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <USB_HC_Halt+0x82>
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d002      	beq.n	8005ed8 <USB_HC_Halt+0x7e>
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d101      	bne.n	8005edc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e0d8      	b.n	800608e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d002      	beq.n	8005ee8 <USB_HC_Halt+0x8e>
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d173      	bne.n	8005fd0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f06:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d14a      	bne.n	8005faa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d133      	bne.n	8005f88 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f3e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f5e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f6c:	d82e      	bhi.n	8005fcc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f84:	d0ec      	beq.n	8005f60 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f86:	e081      	b.n	800608c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fa6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fa8:	e070      	b.n	800608c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	0151      	lsls	r1, r2, #5
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	440a      	add	r2, r1
 8005fc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fc8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fca:	e05f      	b.n	800608c <USB_HC_Halt+0x232>
            break;
 8005fcc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fce:	e05d      	b.n	800608c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d133      	bne.n	8006068 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	69fa      	ldr	r2, [r7, #28]
 8006014:	440a      	add	r2, r1
 8006016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800601a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800601e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	4413      	add	r3, r2
 8006028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	69fa      	ldr	r2, [r7, #28]
 8006034:	440a      	add	r2, r1
 8006036:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800603a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800603e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	3301      	adds	r3, #1
 8006044:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800604c:	d81d      	bhi.n	800608a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006060:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006064:	d0ec      	beq.n	8006040 <USB_HC_Halt+0x1e6>
 8006066:	e011      	b.n	800608c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	440a      	add	r2, r1
 800607e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006082:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	e000      	b.n	800608c <USB_HC_Halt+0x232>
          break;
 800608a:	bf00      	nop
    }
  }

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3724      	adds	r7, #36	@ 0x24
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
	...

0800609c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800609c:	b480      	push	{r7}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80060b0:	2301      	movs	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	04da      	lsls	r2, r3, #19
 80060b8:	4b15      	ldr	r3, [pc, #84]	@ (8006110 <USB_DoPing+0x74>)
 80060ba:	4013      	ands	r3, r2
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	0151      	lsls	r1, r2, #5
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	440a      	add	r2, r1
 80060c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060fa:	461a      	mov	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	1ff80000 	.word	0x1ff80000

08006114 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7fe ff85 	bl	8005038 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800612e:	2110      	movs	r1, #16
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fe ffde 	bl	80050f2 <USB_FlushTxFifo>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff f808 	bl	8005156 <USB_FlushRxFifo>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006150:	2300      	movs	r3, #0
 8006152:	61bb      	str	r3, [r7, #24]
 8006154:	e01f      	b.n	8006196 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	4413      	add	r3, r2
 800615e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800616c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006174:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800617c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	4413      	add	r3, r2
 8006186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800618a:	461a      	mov	r2, r3
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	3301      	adds	r3, #1
 8006194:	61bb      	str	r3, [r7, #24]
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b0f      	cmp	r3, #15
 800619a:	d9dc      	bls.n	8006156 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800619c:	2300      	movs	r3, #0
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	e034      	b.n	800620c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d6:	461a      	mov	r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3301      	adds	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061e8:	d80c      	bhi.n	8006204 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006200:	d0ec      	beq.n	80061dc <USB_StopHost+0xc8>
 8006202:	e000      	b.n	8006206 <USB_StopHost+0xf2>
        break;
 8006204:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	3301      	adds	r3, #1
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b0f      	cmp	r3, #15
 8006210:	d9c7      	bls.n	80061a2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006218:	461a      	mov	r2, r3
 800621a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800621e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006226:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7fe fef4 	bl	8005016 <USB_EnableGlobalInt>

  return ret;
 800622e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006238:	b590      	push	{r4, r7, lr}
 800623a:	b089      	sub	sp, #36	@ 0x24
 800623c:	af04      	add	r7, sp, #16
 800623e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006240:	2301      	movs	r3, #1
 8006242:	2202      	movs	r2, #2
 8006244:	2102      	movs	r1, #2
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fc83 	bl	8006b52 <USBH_FindInterface>
 800624c:	4603      	mov	r3, r0
 800624e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	2bff      	cmp	r3, #255	@ 0xff
 8006254:	d002      	beq.n	800625c <USBH_CDC_InterfaceInit+0x24>
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d901      	bls.n	8006260 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800625c:	2302      	movs	r3, #2
 800625e:	e13d      	b.n	80064dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fc58 	bl	8006b1a <USBH_SelectInterface>
 800626a:	4603      	mov	r3, r0
 800626c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800626e:	7bbb      	ldrb	r3, [r7, #14]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006274:	2302      	movs	r3, #2
 8006276:	e131      	b.n	80064dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800627e:	2050      	movs	r0, #80	@ 0x50
 8006280:	f002 fb58 	bl	8008934 <malloc>
 8006284:	4603      	mov	r3, r0
 8006286:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006298:	2302      	movs	r3, #2
 800629a:	e11f      	b.n	80064dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800629c:	2250      	movs	r2, #80	@ 0x50
 800629e:	2100      	movs	r1, #0
 80062a0:	68b8      	ldr	r0, [r7, #8]
 80062a2:	f002 fc05 	bl	8008ab0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	211a      	movs	r1, #26
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	4413      	add	r3, r2
 80062b2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	b25b      	sxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	da15      	bge.n	80062ea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	211a      	movs	r1, #26
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	4413      	add	r3, r2
 80062ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062ce:	781a      	ldrb	r2, [r3, #0]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	211a      	movs	r1, #26
 80062da:	fb01 f303 	mul.w	r3, r1, r3
 80062de:	4413      	add	r3, r2
 80062e0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062e4:	881a      	ldrh	r2, [r3, #0]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 ffc4 	bl	800827e <USBH_AllocPipe>
 80062f6:	4603      	mov	r3, r0
 80062f8:	461a      	mov	r2, r3
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	7819      	ldrb	r1, [r3, #0]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	7858      	ldrb	r0, [r3, #1]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	8952      	ldrh	r2, [r2, #10]
 8006316:	9202      	str	r2, [sp, #8]
 8006318:	2203      	movs	r2, #3
 800631a:	9201      	str	r2, [sp, #4]
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	4623      	mov	r3, r4
 8006320:	4602      	mov	r2, r0
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 ff7c 	bl	8008220 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2200      	movs	r2, #0
 800632e:	4619      	mov	r1, r3
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f002 fa79 	bl	8008828 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006336:	2300      	movs	r3, #0
 8006338:	2200      	movs	r2, #0
 800633a:	210a      	movs	r1, #10
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc08 	bl	8006b52 <USBH_FindInterface>
 8006342:	4603      	mov	r3, r0
 8006344:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	2bff      	cmp	r3, #255	@ 0xff
 800634a:	d002      	beq.n	8006352 <USBH_CDC_InterfaceInit+0x11a>
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d901      	bls.n	8006356 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006352:	2302      	movs	r3, #2
 8006354:	e0c2      	b.n	80064dc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	211a      	movs	r1, #26
 800635c:	fb01 f303 	mul.w	r3, r1, r3
 8006360:	4413      	add	r3, r2
 8006362:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	b25b      	sxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	da16      	bge.n	800639c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	211a      	movs	r1, #26
 8006374:	fb01 f303 	mul.w	r3, r1, r3
 8006378:	4413      	add	r3, r2
 800637a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800637e:	781a      	ldrb	r2, [r3, #0]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	211a      	movs	r1, #26
 800638a:	fb01 f303 	mul.w	r3, r1, r3
 800638e:	4413      	add	r3, r2
 8006390:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006394:	881a      	ldrh	r2, [r3, #0]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	835a      	strh	r2, [r3, #26]
 800639a:	e015      	b.n	80063c8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	211a      	movs	r1, #26
 80063a2:	fb01 f303 	mul.w	r3, r1, r3
 80063a6:	4413      	add	r3, r2
 80063a8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80063ac:	781a      	ldrb	r2, [r3, #0]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	211a      	movs	r1, #26
 80063b8:	fb01 f303 	mul.w	r3, r1, r3
 80063bc:	4413      	add	r3, r2
 80063be:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063c2:	881a      	ldrh	r2, [r3, #0]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	211a      	movs	r1, #26
 80063ce:	fb01 f303 	mul.w	r3, r1, r3
 80063d2:	4413      	add	r3, r2
 80063d4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	b25b      	sxtb	r3, r3
 80063dc:	2b00      	cmp	r3, #0
 80063de:	da16      	bge.n	800640e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	211a      	movs	r1, #26
 80063e6:	fb01 f303 	mul.w	r3, r1, r3
 80063ea:	4413      	add	r3, r2
 80063ec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80063f0:	781a      	ldrb	r2, [r3, #0]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	211a      	movs	r1, #26
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	4413      	add	r3, r2
 8006402:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006406:	881a      	ldrh	r2, [r3, #0]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	835a      	strh	r2, [r3, #26]
 800640c:	e015      	b.n	800643a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	211a      	movs	r1, #26
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	4413      	add	r3, r2
 800641a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800641e:	781a      	ldrb	r2, [r3, #0]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	211a      	movs	r1, #26
 800642a:	fb01 f303 	mul.w	r3, r1, r3
 800642e:	4413      	add	r3, r2
 8006430:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006434:	881a      	ldrh	r2, [r3, #0]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	7b9b      	ldrb	r3, [r3, #14]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 ff1c 	bl	800827e <USBH_AllocPipe>
 8006446:	4603      	mov	r3, r0
 8006448:	461a      	mov	r2, r3
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	7bdb      	ldrb	r3, [r3, #15]
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f001 ff12 	bl	800827e <USBH_AllocPipe>
 800645a:	4603      	mov	r3, r0
 800645c:	461a      	mov	r2, r3
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	7b59      	ldrb	r1, [r3, #13]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	7b98      	ldrb	r0, [r3, #14]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	8b12      	ldrh	r2, [r2, #24]
 800647a:	9202      	str	r2, [sp, #8]
 800647c:	2202      	movs	r2, #2
 800647e:	9201      	str	r2, [sp, #4]
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	4623      	mov	r3, r4
 8006484:	4602      	mov	r2, r0
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 feca 	bl	8008220 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	7b19      	ldrb	r1, [r3, #12]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	7bd8      	ldrb	r0, [r3, #15]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	8b52      	ldrh	r2, [r2, #26]
 80064a4:	9202      	str	r2, [sp, #8]
 80064a6:	2202      	movs	r2, #2
 80064a8:	9201      	str	r2, [sp, #4]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	4623      	mov	r3, r4
 80064ae:	4602      	mov	r2, r0
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 feb5 	bl	8008220 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	7b5b      	ldrb	r3, [r3, #13]
 80064c2:	2200      	movs	r2, #0
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f002 f9ae 	bl	8008828 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	7b1b      	ldrb	r3, [r3, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f002 f9a7 	bl	8008828 <USBH_LL_SetToggle>

  return USBH_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd90      	pop	{r4, r7, pc}

080064e4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00e      	beq.n	800651c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 feaa 	bl	800825e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	4619      	mov	r1, r3
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f001 fed5 	bl	80082c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	7b1b      	ldrb	r3, [r3, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00e      	beq.n	8006542 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	7b1b      	ldrb	r3, [r3, #12]
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 fe97 	bl	800825e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	7b1b      	ldrb	r3, [r3, #12]
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f001 fec2 	bl	80082c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	7b5b      	ldrb	r3, [r3, #13]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00e      	beq.n	8006568 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	7b5b      	ldrb	r3, [r3, #13]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f001 fe84 	bl	800825e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	7b5b      	ldrb	r3, [r3, #13]
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 feaf 	bl	80082c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	4618      	mov	r0, r3
 800657e:	f002 f9e1 	bl	8008944 <free>
    phost->pActiveClass->pData = 0U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006588:	2200      	movs	r2, #0
 800658a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3340      	adds	r3, #64	@ 0x40
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f8b1 	bl	8006716 <GetLineCoding>
 80065b4:	4603      	mov	r3, r0
 80065b6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065b8:	7afb      	ldrb	r3, [r7, #11]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d105      	bne.n	80065ca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80065c4:	2102      	movs	r1, #2
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065ca:	7afb      	ldrb	r3, [r7, #11]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065dc:	2301      	movs	r3, #1
 80065de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80065f4:	2b04      	cmp	r3, #4
 80065f6:	d877      	bhi.n	80066e8 <USBH_CDC_Process+0x114>
 80065f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006600 <USBH_CDC_Process+0x2c>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006615 	.word	0x08006615
 8006604:	0800661b 	.word	0x0800661b
 8006608:	0800664b 	.word	0x0800664b
 800660c:	080066bf 	.word	0x080066bf
 8006610:	080066cd 	.word	0x080066cd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	73fb      	strb	r3, [r7, #15]
      break;
 8006618:	e06d      	b.n	80066f6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f897 	bl	8006754 <SetLineCoding>
 8006626:	4603      	mov	r3, r0
 8006628:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d104      	bne.n	800663a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006638:	e058      	b.n	80066ec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d055      	beq.n	80066ec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2204      	movs	r2, #4
 8006644:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006648:	e050      	b.n	80066ec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	3340      	adds	r3, #64	@ 0x40
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f860 	bl	8006716 <GetLineCoding>
 8006656:	4603      	mov	r3, r0
 8006658:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d126      	bne.n	80066ae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006672:	791b      	ldrb	r3, [r3, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	d13b      	bne.n	80066f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006682:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006684:	429a      	cmp	r2, r3
 8006686:	d133      	bne.n	80066f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006692:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006694:	429a      	cmp	r2, r3
 8006696:	d12b      	bne.n	80066f0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066a0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d124      	bne.n	80066f0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f958 	bl	800695c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066ac:	e020      	b.n	80066f0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066ae:	7bbb      	ldrb	r3, [r7, #14]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d01d      	beq.n	80066f0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2204      	movs	r2, #4
 80066b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80066bc:	e018      	b.n	80066f0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f867 	bl	8006792 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f8da 	bl	800687e <CDC_ProcessReception>
      break;
 80066ca:	e014      	b.n	80066f6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066cc:	2100      	movs	r1, #0
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 f81e 	bl	8007710 <USBH_ClrFeature>
 80066d4:	4603      	mov	r3, r0
 80066d6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066d8:	7bbb      	ldrb	r3, [r7, #14]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80066e6:	e005      	b.n	80066f4 <USBH_CDC_Process+0x120>

    default:
      break;
 80066e8:	bf00      	nop
 80066ea:	e004      	b.n	80066f6 <USBH_CDC_Process+0x122>
      break;
 80066ec:	bf00      	nop
 80066ee:	e002      	b.n	80066f6 <USBH_CDC_Process+0x122>
      break;
 80066f0:	bf00      	nop
 80066f2:	e000      	b.n	80066f6 <USBH_CDC_Process+0x122>
      break;
 80066f4:	bf00      	nop

  }

  return status;
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	22a1      	movs	r2, #161	@ 0xa1
 8006724:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2221      	movs	r2, #33	@ 0x21
 800672a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2207      	movs	r2, #7
 800673c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2207      	movs	r2, #7
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 fb17 	bl	8007d78 <USBH_CtlReq>
 800674a:	4603      	mov	r3, r0
}
 800674c:	4618      	mov	r0, r3
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2221      	movs	r2, #33	@ 0x21
 8006762:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2220      	movs	r2, #32
 8006768:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2207      	movs	r2, #7
 800677a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2207      	movs	r2, #7
 8006780:	4619      	mov	r1, r3
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f001 faf8 	bl	8007d78 <USBH_CtlReq>
 8006788:	4603      	mov	r3, r0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b086      	sub	sp, #24
 8006796:	af02      	add	r7, sp, #8
 8006798:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067a4:	2300      	movs	r3, #0
 80067a6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d002      	beq.n	80067b8 <CDC_ProcessTransmission+0x26>
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d023      	beq.n	80067fe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067b6:	e05e      	b.n	8006876 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	8b12      	ldrh	r2, [r2, #24]
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d90b      	bls.n	80067dc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	69d9      	ldr	r1, [r3, #28]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8b1a      	ldrh	r2, [r3, #24]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	7b5b      	ldrb	r3, [r3, #13]
 80067d0:	2001      	movs	r0, #1
 80067d2:	9000      	str	r0, [sp, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 fce0 	bl	800819a <USBH_BulkSendData>
 80067da:	e00b      	b.n	80067f4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	7b5b      	ldrb	r3, [r3, #13]
 80067ea:	2001      	movs	r0, #1
 80067ec:	9000      	str	r0, [sp, #0]
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 fcd3 	bl	800819a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2202      	movs	r2, #2
 80067f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80067fc:	e03b      	b.n	8006876 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	7b5b      	ldrb	r3, [r3, #13]
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f001 ffe5 	bl	80087d4 <USBH_LL_GetURBState>
 800680a:	4603      	mov	r3, r0
 800680c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800680e:	7afb      	ldrb	r3, [r7, #11]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d128      	bne.n	8006866 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	8b12      	ldrh	r2, [r2, #24]
 800681c:	4293      	cmp	r3, r2
 800681e:	d90e      	bls.n	800683e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	8b12      	ldrh	r2, [r2, #24]
 8006828:	1a9a      	subs	r2, r3, r2
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	8b12      	ldrh	r2, [r2, #24]
 8006836:	441a      	add	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	61da      	str	r2, [r3, #28]
 800683c:	e002      	b.n	8006844 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006854:	e00e      	b.n	8006874 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f868 	bl	8006934 <USBH_CDC_TransmitCallback>
      break;
 8006864:	e006      	b.n	8006874 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006866:	7afb      	ldrb	r3, [r7, #11]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d103      	bne.n	8006874 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006874:	bf00      	nop
  }
}
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b086      	sub	sp, #24
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006890:	2300      	movs	r3, #0
 8006892:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800689a:	2b03      	cmp	r3, #3
 800689c:	d002      	beq.n	80068a4 <CDC_ProcessReception+0x26>
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d00e      	beq.n	80068c0 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80068a2:	e043      	b.n	800692c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	6a19      	ldr	r1, [r3, #32]
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	8b5a      	ldrh	r2, [r3, #26]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	7b1b      	ldrb	r3, [r3, #12]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 fc97 	bl	80081e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2204      	movs	r2, #4
 80068ba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80068be:	e035      	b.n	800692c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	7b1b      	ldrb	r3, [r3, #12]
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f001 ff84 	bl	80087d4 <USBH_LL_GetURBState>
 80068cc:	4603      	mov	r3, r0
 80068ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80068d0:	7cfb      	ldrb	r3, [r7, #19]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d129      	bne.n	800692a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	7b1b      	ldrb	r3, [r3, #12]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 fef9 	bl	80086d4 <USBH_LL_GetLastXferSize>
 80068e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d016      	beq.n	800691c <CDC_ProcessReception+0x9e>
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	8b5b      	ldrh	r3, [r3, #26]
 80068f2:	461a      	mov	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d110      	bne.n	800691c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	1ad2      	subs	r2, r2, r3
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	6a1a      	ldr	r2, [r3, #32]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	441a      	add	r2, r3
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2203      	movs	r2, #3
 8006916:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800691a:	e006      	b.n	800692a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f80f 	bl	8006948 <USBH_CDC_ReceiveCallback>
      break;
 800692a:	bf00      	nop
  }
}
 800692c:	bf00      	nop
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006984:	2302      	movs	r3, #2
 8006986:	e029      	b.n	80069dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	79fa      	ldrb	r2, [r7, #7]
 800698c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f81f 	bl	80069e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f001 fdc9 	bl	800856c <USBH_LL_Init>

  return USBH_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e009      	b.n	8006a06 <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	33e0      	adds	r3, #224	@ 0xe0
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	2200      	movs	r2, #0
 80069fe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	3301      	adds	r3, #1
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b0f      	cmp	r3, #15
 8006a0a:	d9f2      	bls.n	80069f2 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e009      	b.n	8006a26 <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3301      	adds	r3, #1
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a2c:	d3f1      	bcc.n	8006a12 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2240      	movs	r2, #64	@ 0x40
 8006a52:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	331c      	adds	r3, #28
 8006a7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a82:	2100      	movs	r1, #0
 8006a84:	4618      	mov	r0, r3
 8006a86:	f002 f813 	bl	8008ab0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a94:	2100      	movs	r1, #0
 8006a96:	4618      	mov	r0, r3
 8006a98:	f002 f80a 	bl	8008ab0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006aa2:	2212      	movs	r2, #18
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f002 f802 	bl	8008ab0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006ab2:	223e      	movs	r2, #62	@ 0x3e
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 fffa 	bl	8008ab0 <memset>

  return USBH_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d016      	beq.n	8006b08 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10e      	bne.n	8006b02 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006aea:	1c59      	adds	r1, r3, #1
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	33de      	adds	r3, #222	@ 0xde
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	73fb      	strb	r3, [r7, #15]
 8006b00:	e004      	b.n	8006b0c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006b02:	2302      	movs	r3, #2
 8006b04:	73fb      	strb	r3, [r7, #15]
 8006b06:	e001      	b.n	8006b0c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006b08:	2302      	movs	r3, #2
 8006b0a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006b30:	78fa      	ldrb	r2, [r7, #3]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d204      	bcs.n	8006b40 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	78fa      	ldrb	r2, [r7, #3]
 8006b3a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006b3e:	e001      	b.n	8006b44 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b40:	2302      	movs	r3, #2
 8006b42:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b087      	sub	sp, #28
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	4608      	mov	r0, r1
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	461a      	mov	r2, r3
 8006b60:	4603      	mov	r3, r0
 8006b62:	70fb      	strb	r3, [r7, #3]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70bb      	strb	r3, [r7, #2]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006b7a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b7c:	e025      	b.n	8006bca <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	221a      	movs	r2, #26
 8006b82:	fb02 f303 	mul.w	r3, r2, r3
 8006b86:	3308      	adds	r3, #8
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	3302      	adds	r3, #2
 8006b8e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	795b      	ldrb	r3, [r3, #5]
 8006b94:	78fa      	ldrb	r2, [r7, #3]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d002      	beq.n	8006ba0 <USBH_FindInterface+0x4e>
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	2bff      	cmp	r3, #255	@ 0xff
 8006b9e:	d111      	bne.n	8006bc4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006ba4:	78ba      	ldrb	r2, [r7, #2]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d002      	beq.n	8006bb0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006baa:	78bb      	ldrb	r3, [r7, #2]
 8006bac:	2bff      	cmp	r3, #255	@ 0xff
 8006bae:	d109      	bne.n	8006bc4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bb4:	787a      	ldrb	r2, [r7, #1]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d002      	beq.n	8006bc0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bba:	787b      	ldrb	r3, [r7, #1]
 8006bbc:	2bff      	cmp	r3, #255	@ 0xff
 8006bbe:	d101      	bne.n	8006bc4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006bc0:	7dfb      	ldrb	r3, [r7, #23]
 8006bc2:	e006      	b.n	8006bd2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006bc4:	7dfb      	ldrb	r3, [r7, #23]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d9d6      	bls.n	8006b7e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006bd0:	23ff      	movs	r3, #255	@ 0xff
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	371c      	adds	r7, #28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 fcfc 	bl	80085e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006bec:	2101      	movs	r1, #1
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 fe03 	bl	80087fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af04      	add	r7, sp, #16
 8006c06:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d102      	bne.n	8006c22 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2203      	movs	r2, #3
 8006c20:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b0b      	cmp	r3, #11
 8006c2a:	f200 81bc 	bhi.w	8006fa6 <USBH_Process+0x3a6>
 8006c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c34 <USBH_Process+0x34>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c65 	.word	0x08006c65
 8006c38:	08006c97 	.word	0x08006c97
 8006c3c:	08006d01 	.word	0x08006d01
 8006c40:	08006f41 	.word	0x08006f41
 8006c44:	08006fa7 	.word	0x08006fa7
 8006c48:	08006da1 	.word	0x08006da1
 8006c4c:	08006ee7 	.word	0x08006ee7
 8006c50:	08006dd7 	.word	0x08006dd7
 8006c54:	08006df7 	.word	0x08006df7
 8006c58:	08006e15 	.word	0x08006e15
 8006c5c:	08006e59 	.word	0x08006e59
 8006c60:	08006f29 	.word	0x08006f29
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 819c 	beq.w	8006faa <USBH_Process+0x3aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c78:	20c8      	movs	r0, #200	@ 0xc8
 8006c7a:	f001 fe08 	bl	800888e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f001 fd0d 	bl	800869e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8006c94:	e189      	b.n	8006faa <USBH_Process+0x3aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d107      	bne.n	8006cb2 <USBH_Process+0xb2>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2202      	movs	r2, #2
 8006cae:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006cb0:	e18a      	b.n	8006fc8 <USBH_Process+0x3c8>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006cb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cbc:	d914      	bls.n	8006ce8 <USBH_Process+0xe8>
          phost->device.RstCnt++;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	b2da      	uxtb	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d903      	bls.n	8006ce0 <USBH_Process+0xe0>
            phost->gState = HOST_ABORT_STATE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	220d      	movs	r2, #13
 8006cdc:	701a      	strb	r2, [r3, #0]
      break;
 8006cde:	e173      	b.n	8006fc8 <USBH_Process+0x3c8>
            phost->gState = HOST_IDLE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	701a      	strb	r2, [r3, #0]
      break;
 8006ce6:	e16f      	b.n	8006fc8 <USBH_Process+0x3c8>
          phost->Timeout += 10U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006cee:	f103 020a 	add.w	r2, r3, #10
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006cf8:	200a      	movs	r0, #10
 8006cfa:	f001 fdc8 	bl	800888e <USBH_Delay>
      break;
 8006cfe:	e163      	b.n	8006fc8 <USBH_Process+0x3c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d005      	beq.n	8006d16 <USBH_Process+0x116>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d10:	2104      	movs	r1, #4
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006d16:	2064      	movs	r0, #100	@ 0x64
 8006d18:	f001 fdb9 	bl	800888e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 fc97 	bl	8008650 <USBH_LL_GetSpeed>
 8006d22:	4603      	mov	r3, r0
 8006d24:	461a      	mov	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2205      	movs	r2, #5
 8006d30:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d32:	2100      	movs	r1, #0
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 faa2 	bl	800827e <USBH_AllocPipe>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d42:	2180      	movs	r1, #128	@ 0x80
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f001 fa9a 	bl	800827e <USBH_AllocPipe>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	7919      	ldrb	r1, [r3, #4]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d66:	9202      	str	r2, [sp, #8]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	9201      	str	r2, [sp, #4]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2280      	movs	r2, #128	@ 0x80
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 fa54 	bl	8008220 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	7959      	ldrb	r1, [r3, #5]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d8c:	9202      	str	r2, [sp, #8]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	9201      	str	r2, [sp, #4]
 8006d92:	9300      	str	r3, [sp, #0]
 8006d94:	4603      	mov	r3, r0
 8006d96:	2200      	movs	r2, #0
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 fa41 	bl	8008220 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006d9e:	e113      	b.n	8006fc8 <USBH_Process+0x3c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 f917 	bl	8006fd4 <USBH_HandleEnum>
 8006da6:	4603      	mov	r3, r0
 8006da8:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006daa:	7bbb      	ldrb	r3, [r7, #14]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 80fd 	bne.w	8006fae <USBH_Process+0x3ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d103      	bne.n	8006dce <USBH_Process+0x1ce>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2208      	movs	r2, #8
 8006dca:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8006dcc:	e0ef      	b.n	8006fae <USBH_Process+0x3ae>
          phost->gState = HOST_INPUT;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	701a      	strb	r2, [r3, #0]
      break;
 8006dd4:	e0eb      	b.n	8006fae <USBH_Process+0x3ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 80e8 	beq.w	8006fb2 <USBH_Process+0x3b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006de8:	2101      	movs	r1, #1
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2208      	movs	r2, #8
 8006df2:	701a      	strb	r2, [r3, #0]
#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8006df4:	e0dd      	b.n	8006fb2 <USBH_Process+0x3b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fc3f 	bl	8007682 <USBH_SetCfg>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f040 80d5 	bne.w	8006fb6 <USBH_Process+0x3b6>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2209      	movs	r2, #9
 8006e10:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006e12:	e0d0      	b.n	8006fb6 <USBH_Process+0x3b6>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006e1a:	f003 0320 	and.w	r3, r3, #32
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d016      	beq.n	8006e50 <USBH_Process+0x250>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006e22:	2101      	movs	r1, #1
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fc4f 	bl	80076c8 <USBH_SetFeature>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <USBH_Process+0x23e>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	220a      	movs	r2, #10
 8006e3a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006e3c:	e0bd      	b.n	8006fba <USBH_Process+0x3ba>
        else if (status == USBH_NOT_SUPPORTED)
 8006e3e:	7bbb      	ldrb	r3, [r7, #14]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	f040 80b9 	bne.w	8006fba <USBH_Process+0x3ba>
          phost->gState = HOST_CHECK_CLASS;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	220a      	movs	r2, #10
 8006e4c:	701a      	strb	r2, [r3, #0]
      break;
 8006e4e:	e0b4      	b.n	8006fba <USBH_Process+0x3ba>
        phost->gState = HOST_CHECK_CLASS;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	220a      	movs	r2, #10
 8006e54:	701a      	strb	r2, [r3, #0]
      break;
 8006e56:	e0b0      	b.n	8006fba <USBH_Process+0x3ba>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 80ad 	beq.w	8006fbe <USBH_Process+0x3be>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	73fb      	strb	r3, [r7, #15]
 8006e70:	e016      	b.n	8006ea0 <USBH_Process+0x2a0>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e72:	7bfa      	ldrb	r2, [r7, #15]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	32de      	adds	r2, #222	@ 0xde
 8006e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7c:	791a      	ldrb	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d108      	bne.n	8006e9a <USBH_Process+0x29a>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e88:	7bfa      	ldrb	r2, [r7, #15]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	32de      	adds	r2, #222	@ 0xde
 8006e8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006e98:	e005      	b.n	8006ea6 <USBH_Process+0x2a6>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	73fb      	strb	r3, [r7, #15]
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0e5      	beq.n	8006e72 <USBH_Process+0x272>
          }
        }

        if (phost->pActiveClass != NULL)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d016      	beq.n	8006ede <USBH_Process+0x2de>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4798      	blx	r3
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d109      	bne.n	8006ed6 <USBH_Process+0x2d6>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2206      	movs	r2, #6
 8006ec6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ece:	2103      	movs	r1, #3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	4798      	blx	r3
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006ed4:	e073      	b.n	8006fbe <USBH_Process+0x3be>
            phost->gState = HOST_ABORT_STATE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	220d      	movs	r2, #13
 8006eda:	701a      	strb	r2, [r3, #0]
      break;
 8006edc:	e06f      	b.n	8006fbe <USBH_Process+0x3be>
          phost->gState = HOST_ABORT_STATE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	220d      	movs	r2, #13
 8006ee2:	701a      	strb	r2, [r3, #0]
      break;
 8006ee4:	e06b      	b.n	8006fbe <USBH_Process+0x3be>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d017      	beq.n	8006f20 <USBH_Process+0x320>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	4798      	blx	r3
 8006efc:	4603      	mov	r3, r0
 8006efe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d103      	bne.n	8006f10 <USBH_Process+0x310>
        {
          phost->gState = HOST_CLASS;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	220b      	movs	r2, #11
 8006f0c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006f0e:	e058      	b.n	8006fc2 <USBH_Process+0x3c2>
        else if (status == USBH_FAIL)
 8006f10:	7bbb      	ldrb	r3, [r7, #14]
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d154      	bne.n	8006fc2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	220d      	movs	r2, #13
 8006f1c:	701a      	strb	r2, [r3, #0]
      break;
 8006f1e:	e050      	b.n	8006fc2 <USBH_Process+0x3c2>
        phost->gState = HOST_ABORT_STATE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	220d      	movs	r2, #13
 8006f24:	701a      	strb	r2, [r3, #0]
      break;
 8006f26:	e04c      	b.n	8006fc2 <USBH_Process+0x3c2>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d049      	beq.n	8006fc6 <USBH_Process+0x3c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
      }
      break;
 8006f3e:	e042      	b.n	8006fc6 <USBH_Process+0x3c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff fd4b 	bl	80069e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d009      	beq.n	8006f6c <USBH_Process+0x36c>
      {
        phost->pActiveClass->DeInit(phost);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <USBH_Process+0x382>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f7c:	2105      	movs	r1, #5
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d107      	bne.n	8006f9e <USBH_Process+0x39e>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff fe21 	bl	8006bde <USBH_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;
 8006f9c:	e014      	b.n	8006fc8 <USBH_Process+0x3c8>
        (void)USBH_LL_Start(phost);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f001 fb20 	bl	80085e4 <USBH_LL_Start>
      break;
 8006fa4:	e010      	b.n	8006fc8 <USBH_Process+0x3c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e00e      	b.n	8006fc8 <USBH_Process+0x3c8>
      break;
 8006faa:	bf00      	nop
 8006fac:	e00c      	b.n	8006fc8 <USBH_Process+0x3c8>
      break;
 8006fae:	bf00      	nop
 8006fb0:	e00a      	b.n	8006fc8 <USBH_Process+0x3c8>
    break;
 8006fb2:	bf00      	nop
 8006fb4:	e008      	b.n	8006fc8 <USBH_Process+0x3c8>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e006      	b.n	8006fc8 <USBH_Process+0x3c8>
      break;
 8006fba:	bf00      	nop
 8006fbc:	e004      	b.n	8006fc8 <USBH_Process+0x3c8>
      break;
 8006fbe:	bf00      	nop
 8006fc0:	e002      	b.n	8006fc8 <USBH_Process+0x3c8>
      break;
 8006fc2:	bf00      	nop
 8006fc4:	e000      	b.n	8006fc8 <USBH_Process+0x3c8>
      break;
 8006fc6:	bf00      	nop
  }
  return USBH_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop

08006fd4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af04      	add	r7, sp, #16
 8006fda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	785b      	ldrb	r3, [r3, #1]
 8006fe8:	2b07      	cmp	r3, #7
 8006fea:	f200 81bd 	bhi.w	8007368 <USBH_HandleEnum+0x394>
 8006fee:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff4 <USBH_HandleEnum+0x20>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	08007015 	.word	0x08007015
 8006ff8:	080070cf 	.word	0x080070cf
 8006ffc:	08007139 	.word	0x08007139
 8007000:	080071c3 	.word	0x080071c3
 8007004:	0800722d 	.word	0x0800722d
 8007008:	0800729d 	.word	0x0800729d
 800700c:	080072e3 	.word	0x080072e3
 8007010:	08007329 	.word	0x08007329
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007014:	2108      	movs	r1, #8
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fa50 	bl	80074bc <USBH_Get_DevDesc>
 800701c:	4603      	mov	r3, r0
 800701e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007020:	7bbb      	ldrb	r3, [r7, #14]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d12e      	bne.n	8007084 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	7919      	ldrb	r1, [r3, #4]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800704a:	9202      	str	r2, [sp, #8]
 800704c:	2200      	movs	r2, #0
 800704e:	9201      	str	r2, [sp, #4]
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	4603      	mov	r3, r0
 8007054:	2280      	movs	r2, #128	@ 0x80
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f001 f8e2 	bl	8008220 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	7959      	ldrb	r1, [r3, #5]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007070:	9202      	str	r2, [sp, #8]
 8007072:	2200      	movs	r2, #0
 8007074:	9201      	str	r2, [sp, #4]
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	4603      	mov	r3, r0
 800707a:	2200      	movs	r2, #0
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f001 f8cf 	bl	8008220 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007082:	e173      	b.n	800736c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007084:	7bbb      	ldrb	r3, [r7, #14]
 8007086:	2b03      	cmp	r3, #3
 8007088:	f040 8170 	bne.w	800736c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007092:	3301      	adds	r3, #1
 8007094:	b2da      	uxtb	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d903      	bls.n	80070ae <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	220d      	movs	r2, #13
 80070aa:	701a      	strb	r2, [r3, #0]
      break;
 80070ac:	e15e      	b.n	800736c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	795b      	ldrb	r3, [r3, #5]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 f903 	bl	80082c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	791b      	ldrb	r3, [r3, #4]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f001 f8fd 	bl	80082c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]
      break;
 80070cc:	e14e      	b.n	800736c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070ce:	2112      	movs	r1, #18
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f9f3 	bl	80074bc <USBH_Get_DevDesc>
 80070d6:	4603      	mov	r3, r0
 80070d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d103      	bne.n	80070e8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070e6:	e143      	b.n	8007370 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070e8:	7bbb      	ldrb	r3, [r7, #14]
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	f040 8140 	bne.w	8007370 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070f6:	3301      	adds	r3, #1
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007106:	2b03      	cmp	r3, #3
 8007108:	d903      	bls.n	8007112 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	220d      	movs	r2, #13
 800710e:	701a      	strb	r2, [r3, #0]
      break;
 8007110:	e12e      	b.n	8007370 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	795b      	ldrb	r3, [r3, #5]
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 f8d1 	bl	80082c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	791b      	ldrb	r3, [r3, #4]
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 f8cb 	bl	80082c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	701a      	strb	r2, [r3, #0]
      break;
 8007136:	e11b      	b.n	8007370 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007138:	2101      	movs	r1, #1
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa7d 	bl	800763a <USBH_SetAddress>
 8007140:	4603      	mov	r3, r0
 8007142:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d130      	bne.n	80071ac <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800714a:	2002      	movs	r0, #2
 800714c:	f001 fb9f 	bl	800888e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2203      	movs	r2, #3
 800715c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	7919      	ldrb	r1, [r3, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007172:	9202      	str	r2, [sp, #8]
 8007174:	2200      	movs	r2, #0
 8007176:	9201      	str	r2, [sp, #4]
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	4603      	mov	r3, r0
 800717c:	2280      	movs	r2, #128	@ 0x80
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 f84e 	bl	8008220 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	7959      	ldrb	r1, [r3, #5]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007198:	9202      	str	r2, [sp, #8]
 800719a:	2200      	movs	r2, #0
 800719c:	9201      	str	r2, [sp, #4]
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	4603      	mov	r3, r0
 80071a2:	2200      	movs	r2, #0
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 f83b 	bl	8008220 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071aa:	e0e3      	b.n	8007374 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	f040 80e0 	bne.w	8007374 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	220d      	movs	r2, #13
 80071b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	705a      	strb	r2, [r3, #1]
      break;
 80071c0:	e0d8      	b.n	8007374 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80071c2:	2109      	movs	r1, #9
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f9a5 	bl	8007514 <USBH_Get_CfgDesc>
 80071ca:	4603      	mov	r3, r0
 80071cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d103      	bne.n	80071dc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2204      	movs	r2, #4
 80071d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071da:	e0cd      	b.n	8007378 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071dc:	7bbb      	ldrb	r3, [r7, #14]
 80071de:	2b03      	cmp	r3, #3
 80071e0:	f040 80ca 	bne.w	8007378 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071ea:	3301      	adds	r3, #1
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d903      	bls.n	8007206 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	220d      	movs	r2, #13
 8007202:	701a      	strb	r2, [r3, #0]
      break;
 8007204:	e0b8      	b.n	8007378 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	795b      	ldrb	r3, [r3, #5]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 f857 	bl	80082c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	791b      	ldrb	r3, [r3, #4]
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 f851 	bl	80082c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	701a      	strb	r2, [r3, #0]
      break;
 800722a:	e0a5      	b.n	8007378 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f96d 	bl	8007514 <USBH_Get_CfgDesc>
 800723a:	4603      	mov	r3, r0
 800723c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800723e:	7bbb      	ldrb	r3, [r7, #14]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d103      	bne.n	800724c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2205      	movs	r2, #5
 8007248:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800724a:	e097      	b.n	800737c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	2b03      	cmp	r3, #3
 8007250:	f040 8094 	bne.w	800737c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800725a:	3301      	adds	r3, #1
 800725c:	b2da      	uxtb	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800726a:	2b03      	cmp	r3, #3
 800726c:	d903      	bls.n	8007276 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	220d      	movs	r2, #13
 8007272:	701a      	strb	r2, [r3, #0]
      break;
 8007274:	e082      	b.n	800737c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	795b      	ldrb	r3, [r3, #5]
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 f81f 	bl	80082c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	791b      	ldrb	r3, [r3, #4]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 f819 	bl	80082c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	701a      	strb	r2, [r3, #0]
      break;
 800729a:	e06f      	b.n	800737c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d019      	beq.n	80072da <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072b2:	23ff      	movs	r3, #255	@ 0xff
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f957 	bl	8007568 <USBH_Get_StringDesc>
 80072ba:	4603      	mov	r3, r0
 80072bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d103      	bne.n	80072cc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2206      	movs	r2, #6
 80072c8:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80072ca:	e059      	b.n	8007380 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d156      	bne.n	8007380 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2206      	movs	r2, #6
 80072d6:	705a      	strb	r2, [r3, #1]
      break;
 80072d8:	e052      	b.n	8007380 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2206      	movs	r2, #6
 80072de:	705a      	strb	r2, [r3, #1]
      break;
 80072e0:	e04e      	b.n	8007380 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d019      	beq.n	8007320 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072f8:	23ff      	movs	r3, #255	@ 0xff
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f934 	bl	8007568 <USBH_Get_StringDesc>
 8007300:	4603      	mov	r3, r0
 8007302:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2207      	movs	r2, #7
 800730e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8007310:	e038      	b.n	8007384 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	2b03      	cmp	r3, #3
 8007316:	d135      	bne.n	8007384 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2207      	movs	r2, #7
 800731c:	705a      	strb	r2, [r3, #1]
      break;
 800731e:	e031      	b.n	8007384 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2207      	movs	r2, #7
 8007324:	705a      	strb	r2, [r3, #1]
      break;
 8007326:	e02d      	b.n	8007384 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800732e:	2b00      	cmp	r3, #0
 8007330:	d017      	beq.n	8007362 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800733e:	23ff      	movs	r3, #255	@ 0xff
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f911 	bl	8007568 <USBH_Get_StringDesc>
 8007346:	4603      	mov	r3, r0
 8007348:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800734a:	7bbb      	ldrb	r3, [r7, #14]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007354:	e018      	b.n	8007388 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	2b03      	cmp	r3, #3
 800735a:	d115      	bne.n	8007388 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	73fb      	strb	r3, [r7, #15]
      break;
 8007360:	e012      	b.n	8007388 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73fb      	strb	r3, [r7, #15]
      break;
 8007366:	e00f      	b.n	8007388 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007368:	bf00      	nop
 800736a:	e00e      	b.n	800738a <USBH_HandleEnum+0x3b6>
      break;
 800736c:	bf00      	nop
 800736e:	e00c      	b.n	800738a <USBH_HandleEnum+0x3b6>
      break;
 8007370:	bf00      	nop
 8007372:	e00a      	b.n	800738a <USBH_HandleEnum+0x3b6>
      break;
 8007374:	bf00      	nop
 8007376:	e008      	b.n	800738a <USBH_HandleEnum+0x3b6>
      break;
 8007378:	bf00      	nop
 800737a:	e006      	b.n	800738a <USBH_HandleEnum+0x3b6>
      break;
 800737c:	bf00      	nop
 800737e:	e004      	b.n	800738a <USBH_HandleEnum+0x3b6>
      break;
 8007380:	bf00      	nop
 8007382:	e002      	b.n	800738a <USBH_HandleEnum+0x3b6>
      break;
 8007384:	bf00      	nop
 8007386:	e000      	b.n	800738a <USBH_HandleEnum+0x3b6>
      break;
 8007388:	bf00      	nop
  }
  return Status;
 800738a:	7bfb      	ldrb	r3, [r7, #15]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f804 	bl	80073d6 <USBH_HandleSof>
}
 80073ce:	bf00      	nop
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b082      	sub	sp, #8
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b0b      	cmp	r3, #11
 80073e6:	d10a      	bne.n	80073fe <USBH_HandleSof+0x28>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d005      	beq.n	80073fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
  }
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return;
 8007416:	bf00      	nop
}
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 800743a:	bf00      	nop
}
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 f8c0 	bl	800861a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	791b      	ldrb	r3, [r3, #4]
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 ff0d 	bl	80082c0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	795b      	ldrb	r3, [r3, #5]
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 ff07 	bl	80082c0 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af02      	add	r7, sp, #8
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80074c8:	887b      	ldrh	r3, [r7, #2]
 80074ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074ce:	d901      	bls.n	80074d4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e01b      	b.n	800750c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80074da:	887b      	ldrh	r3, [r7, #2]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	4613      	mov	r3, r2
 80074e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074e4:	2100      	movs	r1, #0
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f872 	bl	80075d0 <USBH_GetDescriptor>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80074fc:	887a      	ldrh	r2, [r7, #2]
 80074fe:	4619      	mov	r1, r3
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f929 	bl	8007758 <USBH_ParseDevDesc>
 8007506:	4603      	mov	r3, r0
 8007508:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800750a:	7bfb      	ldrb	r3, [r7, #15]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af02      	add	r7, sp, #8
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	331c      	adds	r3, #28
 8007524:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007526:	887b      	ldrh	r3, [r7, #2]
 8007528:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800752c:	d901      	bls.n	8007532 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800752e:	2303      	movs	r3, #3
 8007530:	e016      	b.n	8007560 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007532:	887b      	ldrh	r3, [r7, #2]
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800753c:	2100      	movs	r1, #0
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f846 	bl	80075d0 <USBH_GetDescriptor>
 8007544:	4603      	mov	r3, r0
 8007546:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d107      	bne.n	800755e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800754e:	887b      	ldrh	r3, [r7, #2]
 8007550:	461a      	mov	r2, r3
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f9af 	bl	80078b8 <USBH_ParseCfgDesc>
 800755a:	4603      	mov	r3, r0
 800755c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800755e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af02      	add	r7, sp, #8
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	607a      	str	r2, [r7, #4]
 8007572:	461a      	mov	r2, r3
 8007574:	460b      	mov	r3, r1
 8007576:	72fb      	strb	r3, [r7, #11]
 8007578:	4613      	mov	r3, r2
 800757a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800757c:	893b      	ldrh	r3, [r7, #8]
 800757e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007582:	d802      	bhi.n	800758a <USBH_Get_StringDesc+0x22>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800758a:	2303      	movs	r3, #3
 800758c:	e01c      	b.n	80075c8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800758e:	7afb      	ldrb	r3, [r7, #11]
 8007590:	b29b      	uxth	r3, r3
 8007592:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007596:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800759e:	893b      	ldrh	r3, [r7, #8]
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	460b      	mov	r3, r1
 80075a4:	2100      	movs	r1, #0
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 f812 	bl	80075d0 <USBH_GetDescriptor>
 80075ac:	4603      	mov	r3, r0
 80075ae:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d107      	bne.n	80075c6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80075bc:	893a      	ldrh	r2, [r7, #8]
 80075be:	6879      	ldr	r1, [r7, #4]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fb8c 	bl	8007cde <USBH_ParseStringDesc>
  }

  return status;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	607b      	str	r3, [r7, #4]
 80075da:	460b      	mov	r3, r1
 80075dc:	72fb      	strb	r3, [r7, #11]
 80075de:	4613      	mov	r3, r2
 80075e0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	789b      	ldrb	r3, [r3, #2]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d11c      	bne.n	8007624 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075ea:	7afb      	ldrb	r3, [r7, #11]
 80075ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2206      	movs	r2, #6
 80075fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	893a      	ldrh	r2, [r7, #8]
 8007600:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007602:	893b      	ldrh	r3, [r7, #8]
 8007604:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007608:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800760c:	d104      	bne.n	8007618 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f240 4209 	movw	r2, #1033	@ 0x409
 8007614:	829a      	strh	r2, [r3, #20]
 8007616:	e002      	b.n	800761e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8b3a      	ldrh	r2, [r7, #24]
 8007622:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007624:	8b3b      	ldrh	r3, [r7, #24]
 8007626:	461a      	mov	r2, r3
 8007628:	6879      	ldr	r1, [r7, #4]
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 fba4 	bl	8007d78 <USBH_CtlReq>
 8007630:	4603      	mov	r3, r0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	460b      	mov	r3, r1
 8007644:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	789b      	ldrb	r3, [r3, #2]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d10f      	bne.n	800766e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2205      	movs	r2, #5
 8007658:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800765a:	78fb      	ldrb	r3, [r7, #3]
 800765c:	b29a      	uxth	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800766e:	2200      	movs	r2, #0
 8007670:	2100      	movs	r1, #0
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fb80 	bl	8007d78 <USBH_CtlReq>
 8007678:	4603      	mov	r3, r0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b082      	sub	sp, #8
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	460b      	mov	r3, r1
 800768c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	789b      	ldrb	r3, [r3, #2]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d10e      	bne.n	80076b4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2209      	movs	r2, #9
 80076a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	887a      	ldrh	r2, [r7, #2]
 80076a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076b4:	2200      	movs	r2, #0
 80076b6:	2100      	movs	r1, #0
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fb5d 	bl	8007d78 <USBH_CtlReq>
 80076be:	4603      	mov	r3, r0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	460b      	mov	r3, r1
 80076d2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	789b      	ldrb	r3, [r3, #2]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d10f      	bne.n	80076fc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2203      	movs	r2, #3
 80076e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076fc:	2200      	movs	r2, #0
 80076fe:	2100      	movs	r1, #0
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fb39 	bl	8007d78 <USBH_CtlReq>
 8007706:	4603      	mov	r3, r0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	789b      	ldrb	r3, [r3, #2]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d10f      	bne.n	8007744 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007736:	78fb      	ldrb	r3, [r7, #3]
 8007738:	b29a      	uxth	r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007744:	2200      	movs	r2, #0
 8007746:	2100      	movs	r1, #0
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fb15 	bl	8007d78 <USBH_CtlReq>
 800774e:	4603      	mov	r3, r0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007758:	b480      	push	{r7}
 800775a:	b087      	sub	sp, #28
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	4613      	mov	r3, r2
 8007764:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800776c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007778:	2302      	movs	r3, #2
 800777a:	e094      	b.n	80078a6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	781a      	ldrb	r2, [r3, #0]
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	785a      	ldrb	r2, [r3, #1]
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	3302      	adds	r3, #2
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	3303      	adds	r3, #3
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	021b      	lsls	r3, r3, #8
 800779c:	b29b      	uxth	r3, r3
 800779e:	4313      	orrs	r3, r2
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	791a      	ldrb	r2, [r3, #4]
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	795a      	ldrb	r2, [r3, #5]
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	799a      	ldrb	r2, [r3, #6]
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	79da      	ldrb	r2, [r3, #7]
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d004      	beq.n	80077da <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d11b      	bne.n	8007812 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	79db      	ldrb	r3, [r3, #7]
 80077de:	2b20      	cmp	r3, #32
 80077e0:	dc0f      	bgt.n	8007802 <USBH_ParseDevDesc+0xaa>
 80077e2:	2b08      	cmp	r3, #8
 80077e4:	db0f      	blt.n	8007806 <USBH_ParseDevDesc+0xae>
 80077e6:	3b08      	subs	r3, #8
 80077e8:	4a32      	ldr	r2, [pc, #200]	@ (80078b4 <USBH_ParseDevDesc+0x15c>)
 80077ea:	fa22 f303 	lsr.w	r3, r2, r3
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	bf14      	ite	ne
 80077f6:	2301      	movne	r3, #1
 80077f8:	2300      	moveq	r3, #0
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d106      	bne.n	800780e <USBH_ParseDevDesc+0xb6>
 8007800:	e001      	b.n	8007806 <USBH_ParseDevDesc+0xae>
 8007802:	2b40      	cmp	r3, #64	@ 0x40
 8007804:	d003      	beq.n	800780e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	2208      	movs	r2, #8
 800780a:	71da      	strb	r2, [r3, #7]
        break;
 800780c:	e000      	b.n	8007810 <USBH_ParseDevDesc+0xb8>
        break;
 800780e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007810:	e00e      	b.n	8007830 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007818:	2b02      	cmp	r3, #2
 800781a:	d107      	bne.n	800782c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	79db      	ldrb	r3, [r3, #7]
 8007820:	2b08      	cmp	r3, #8
 8007822:	d005      	beq.n	8007830 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	2208      	movs	r2, #8
 8007828:	71da      	strb	r2, [r3, #7]
 800782a:	e001      	b.n	8007830 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800782c:	2303      	movs	r3, #3
 800782e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007830:	88fb      	ldrh	r3, [r7, #6]
 8007832:	2b08      	cmp	r3, #8
 8007834:	d936      	bls.n	80078a4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	3308      	adds	r3, #8
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	3309      	adds	r3, #9
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	021b      	lsls	r3, r3, #8
 8007846:	b29b      	uxth	r3, r3
 8007848:	4313      	orrs	r3, r2
 800784a:	b29a      	uxth	r2, r3
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	330a      	adds	r3, #10
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	461a      	mov	r2, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	330b      	adds	r3, #11
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	b29b      	uxth	r3, r3
 8007862:	4313      	orrs	r3, r2
 8007864:	b29a      	uxth	r2, r3
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	330c      	adds	r3, #12
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	330d      	adds	r3, #13
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	021b      	lsls	r3, r3, #8
 800787a:	b29b      	uxth	r3, r3
 800787c:	4313      	orrs	r3, r2
 800787e:	b29a      	uxth	r2, r3
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	7b9a      	ldrb	r2, [r3, #14]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	7bda      	ldrb	r2, [r3, #15]
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	7c1a      	ldrb	r2, [r3, #16]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	7c5a      	ldrb	r2, [r3, #17]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80078a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	01000101 	.word	0x01000101

080078b8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08c      	sub	sp, #48	@ 0x30
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	4613      	mov	r3, r2
 80078c4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80078cc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80078e6:	2302      	movs	r3, #2
 80078e8:	e0de      	b.n	8007aa8 <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80078ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b09      	cmp	r3, #9
 80078f4:	d002      	beq.n	80078fc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	2209      	movs	r2, #9
 80078fa:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	781a      	ldrb	r2, [r3, #0]
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	785a      	ldrb	r2, [r3, #1]
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	3302      	adds	r3, #2
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	3303      	adds	r3, #3
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	021b      	lsls	r3, r3, #8
 800791c:	b29b      	uxth	r3, r3
 800791e:	4313      	orrs	r3, r2
 8007920:	b29b      	uxth	r3, r3
 8007922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007926:	bf28      	it	cs
 8007928:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800792c:	b29a      	uxth	r2, r3
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	791a      	ldrb	r2, [r3, #4]
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	795a      	ldrb	r2, [r3, #5]
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	799a      	ldrb	r2, [r3, #6]
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	79da      	ldrb	r2, [r3, #7]
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	7a1a      	ldrb	r2, [r3, #8]
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800795a:	88fb      	ldrh	r3, [r7, #6]
 800795c:	2b09      	cmp	r3, #9
 800795e:	f240 80a1 	bls.w	8007aa4 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8007962:	2309      	movs	r3, #9
 8007964:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007966:	2300      	movs	r3, #0
 8007968:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800796a:	e085      	b.n	8007a78 <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800796c:	f107 0316 	add.w	r3, r7, #22
 8007970:	4619      	mov	r1, r3
 8007972:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007974:	f000 f9e6 	bl	8007d44 <USBH_GetNextDesc>
 8007978:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800797a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	2b04      	cmp	r3, #4
 8007980:	d17a      	bne.n	8007a78 <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b09      	cmp	r3, #9
 8007988:	d002      	beq.n	8007990 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800798a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798c:	2209      	movs	r2, #9
 800798e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007994:	221a      	movs	r2, #26
 8007996:	fb02 f303 	mul.w	r3, r2, r3
 800799a:	3308      	adds	r3, #8
 800799c:	6a3a      	ldr	r2, [r7, #32]
 800799e:	4413      	add	r3, r2
 80079a0:	3302      	adds	r3, #2
 80079a2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80079a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079a6:	69f8      	ldr	r0, [r7, #28]
 80079a8:	f000 f882 	bl	8007ab0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079b6:	e043      	b.n	8007a40 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079b8:	f107 0316 	add.w	r3, r7, #22
 80079bc:	4619      	mov	r1, r3
 80079be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079c0:	f000 f9c0 	bl	8007d44 <USBH_GetNextDesc>
 80079c4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c8:	785b      	ldrb	r3, [r3, #1]
 80079ca:	2b05      	cmp	r3, #5
 80079cc:	d138      	bne.n	8007a40 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	795b      	ldrb	r3, [r3, #5]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d113      	bne.n	80079fe <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d003      	beq.n	80079e6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	799b      	ldrb	r3, [r3, #6]
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d10b      	bne.n	80079fe <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	79db      	ldrb	r3, [r3, #7]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10b      	bne.n	8007a06 <USBH_ParseCfgDesc+0x14e>
 80079ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b09      	cmp	r3, #9
 80079f4:	d007      	beq.n	8007a06 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80079f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f8:	2209      	movs	r2, #9
 80079fa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079fc:	e003      	b.n	8007a06 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80079fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a00:	2207      	movs	r2, #7
 8007a02:	701a      	strb	r2, [r3, #0]
 8007a04:	e000      	b.n	8007a08 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a06:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a0c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a10:	3201      	adds	r2, #1
 8007a12:	00d2      	lsls	r2, r2, #3
 8007a14:	211a      	movs	r1, #26
 8007a16:	fb01 f303 	mul.w	r3, r1, r3
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	6a3a      	ldr	r2, [r7, #32]
 8007a20:	4413      	add	r3, r2
 8007a22:	3304      	adds	r3, #4
 8007a24:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007a26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a28:	69b9      	ldr	r1, [r7, #24]
 8007a2a:	68f8      	ldr	r0, [r7, #12]
 8007a2c:	f000 f86f 	bl	8007b0e <USBH_ParseEPDesc>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007a36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d80a      	bhi.n	8007a5e <USBH_ParseCfgDesc+0x1a6>
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	791b      	ldrb	r3, [r3, #4]
 8007a4c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d204      	bcs.n	8007a5e <USBH_ParseCfgDesc+0x1a6>
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	885a      	ldrh	r2, [r3, #2]
 8007a58:	8afb      	ldrh	r3, [r7, #22]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d8ac      	bhi.n	80079b8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	791b      	ldrb	r3, [r3, #4]
 8007a62:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d201      	bcs.n	8007a6e <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e01c      	b.n	8007aa8 <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8007a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a72:	3301      	adds	r3, #1
 8007a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d805      	bhi.n	8007a8c <USBH_ParseCfgDesc+0x1d4>
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	885a      	ldrh	r2, [r3, #2]
 8007a84:	8afb      	ldrh	r3, [r7, #22]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	f63f af70 	bhi.w	800796c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	791b      	ldrb	r3, [r3, #4]
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	bf28      	it	cs
 8007a94:	2302      	movcs	r3, #2
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d201      	bcs.n	8007aa4 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e001      	b.n	8007aa8 <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8007aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3730      	adds	r7, #48	@ 0x30
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	785a      	ldrb	r2, [r3, #1]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	789a      	ldrb	r2, [r3, #2]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	78da      	ldrb	r2, [r3, #3]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	791a      	ldrb	r2, [r3, #4]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	795a      	ldrb	r2, [r3, #5]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	799a      	ldrb	r2, [r3, #6]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	79da      	ldrb	r2, [r3, #7]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	7a1a      	ldrb	r2, [r3, #8]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	721a      	strb	r2, [r3, #8]
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b087      	sub	sp, #28
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	781a      	ldrb	r2, [r3, #0]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	785a      	ldrb	r2, [r3, #1]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	789a      	ldrb	r2, [r3, #2]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	78da      	ldrb	r2, [r3, #3]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3304      	adds	r3, #4
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	461a      	mov	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3305      	adds	r3, #5
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	4313      	orrs	r3, r2
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	799a      	ldrb	r2, [r3, #6]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	889b      	ldrh	r3, [r3, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d009      	beq.n	8007b7c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b70:	d804      	bhi.n	8007b7c <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b7a:	d901      	bls.n	8007b80 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d136      	bne.n	8007bf8 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	78db      	ldrb	r3, [r3, #3]
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d108      	bne.n	8007ba8 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	889b      	ldrh	r3, [r3, #4]
 8007b9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b9e:	f240 8097 	bls.w	8007cd0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	75fb      	strb	r3, [r7, #23]
 8007ba6:	e093      	b.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	78db      	ldrb	r3, [r3, #3]
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d107      	bne.n	8007bc4 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	889b      	ldrh	r3, [r3, #4]
 8007bb8:	2b40      	cmp	r3, #64	@ 0x40
 8007bba:	f240 8089 	bls.w	8007cd0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	75fb      	strb	r3, [r7, #23]
 8007bc2:	e085      	b.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	78db      	ldrb	r3, [r3, #3]
 8007bc8:	f003 0303 	and.w	r3, r3, #3
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d005      	beq.n	8007bdc <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	78db      	ldrb	r3, [r3, #3]
 8007bd4:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d10a      	bne.n	8007bf2 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	799b      	ldrb	r3, [r3, #6]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <USBH_ParseEPDesc+0xde>
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	799b      	ldrb	r3, [r3, #6]
 8007be8:	2b10      	cmp	r3, #16
 8007bea:	d970      	bls.n	8007cce <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007bec:	2303      	movs	r3, #3
 8007bee:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bf0:	e06d      	b.n	8007cce <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	75fb      	strb	r3, [r7, #23]
 8007bf6:	e06b      	b.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d13c      	bne.n	8007c7c <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	78db      	ldrb	r3, [r3, #3]
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d005      	beq.n	8007c1a <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	78db      	ldrb	r3, [r3, #3]
 8007c12:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	889b      	ldrh	r3, [r3, #4]
 8007c1e:	2b40      	cmp	r3, #64	@ 0x40
 8007c20:	d956      	bls.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c22:	2303      	movs	r3, #3
 8007c24:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c26:	e053      	b.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	78db      	ldrb	r3, [r3, #3]
 8007c2c:	f003 0303 	and.w	r3, r3, #3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d10e      	bne.n	8007c52 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	799b      	ldrb	r3, [r3, #6]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d007      	beq.n	8007c4c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007c40:	2b10      	cmp	r3, #16
 8007c42:	d803      	bhi.n	8007c4c <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007c48:	2b40      	cmp	r3, #64	@ 0x40
 8007c4a:	d941      	bls.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	75fb      	strb	r3, [r7, #23]
 8007c50:	e03e      	b.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	78db      	ldrb	r3, [r3, #3]
 8007c56:	f003 0303 	and.w	r3, r3, #3
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d10b      	bne.n	8007c76 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	799b      	ldrb	r3, [r3, #6]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d004      	beq.n	8007c70 <USBH_ParseEPDesc+0x162>
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	889b      	ldrh	r3, [r3, #4]
 8007c6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c6e:	d32f      	bcc.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c70:	2303      	movs	r3, #3
 8007c72:	75fb      	strb	r3, [r7, #23]
 8007c74:	e02c      	b.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c76:	2303      	movs	r3, #3
 8007c78:	75fb      	strb	r3, [r7, #23]
 8007c7a:	e029      	b.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d120      	bne.n	8007cc8 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	78db      	ldrb	r3, [r3, #3]
 8007c8a:	f003 0303 	and.w	r3, r3, #3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d106      	bne.n	8007ca0 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	889b      	ldrh	r3, [r3, #4]
 8007c96:	2b08      	cmp	r3, #8
 8007c98:	d01a      	beq.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	75fb      	strb	r3, [r7, #23]
 8007c9e:	e017      	b.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	78db      	ldrb	r3, [r3, #3]
 8007ca4:	f003 0303 	and.w	r3, r3, #3
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d10a      	bne.n	8007cc2 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	799b      	ldrb	r3, [r3, #6]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <USBH_ParseEPDesc+0x1ae>
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	889b      	ldrh	r3, [r3, #4]
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d909      	bls.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	75fb      	strb	r3, [r7, #23]
 8007cc0:	e006      	b.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	75fb      	strb	r3, [r7, #23]
 8007cc6:	e003      	b.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	75fb      	strb	r3, [r7, #23]
 8007ccc:	e000      	b.n	8007cd0 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007cce:	bf00      	nop
  }

  return status;
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b087      	sub	sp, #28
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d120      	bne.n	8007d38 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	1e9a      	subs	r2, r3, #2
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	bf28      	it	cs
 8007d02:	4613      	movcs	r3, r2
 8007d04:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3302      	adds	r3, #2
 8007d0a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	82fb      	strh	r3, [r7, #22]
 8007d10:	e00b      	b.n	8007d2a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007d12:	8afb      	ldrh	r3, [r7, #22]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4413      	add	r3, r2
 8007d18:	781a      	ldrb	r2, [r3, #0]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	3301      	adds	r3, #1
 8007d22:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007d24:	8afb      	ldrh	r3, [r7, #22]
 8007d26:	3302      	adds	r3, #2
 8007d28:	82fb      	strh	r3, [r7, #22]
 8007d2a:	8afa      	ldrh	r2, [r7, #22]
 8007d2c:	8abb      	ldrh	r3, [r7, #20]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d3ef      	bcc.n	8007d12 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2200      	movs	r2, #0
 8007d36:	701a      	strb	r2, [r3, #0]
  }
}
 8007d38:	bf00      	nop
 8007d3a:	371c      	adds	r7, #28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b085      	sub	sp, #20
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	7812      	ldrb	r2, [r2, #0]
 8007d56:	4413      	add	r3, r2
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4413      	add	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b086      	sub	sp, #24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	4613      	mov	r3, r2
 8007d84:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d86:	2301      	movs	r3, #1
 8007d88:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	789b      	ldrb	r3, [r3, #2]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d002      	beq.n	8007d98 <USBH_CtlReq+0x20>
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d00f      	beq.n	8007db6 <USBH_CtlReq+0x3e>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8007d96:	e027      	b.n	8007de8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	88fa      	ldrh	r2, [r7, #6]
 8007da2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2202      	movs	r2, #2
 8007dae:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007db0:	2301      	movs	r3, #1
 8007db2:	75fb      	strb	r3, [r7, #23]
      break;
 8007db4:	e018      	b.n	8007de8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f000 f81c 	bl	8007df4 <USBH_HandleControl>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <USBH_CtlReq+0x54>
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d106      	bne.n	8007dda <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	761a      	strb	r2, [r3, #24]
      break;
 8007dd8:	e005      	b.n	8007de6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d102      	bne.n	8007de6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2201      	movs	r2, #1
 8007de4:	709a      	strb	r2, [r3, #2]
      break;
 8007de6:	bf00      	nop
  }
  return status;
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af02      	add	r7, sp, #8
 8007dfa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	7e1b      	ldrb	r3, [r3, #24]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	2b0a      	cmp	r3, #10
 8007e0c:	f200 8157 	bhi.w	80080be <USBH_HandleControl+0x2ca>
 8007e10:	a201      	add	r2, pc, #4	@ (adr r2, 8007e18 <USBH_HandleControl+0x24>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e45 	.word	0x08007e45
 8007e1c:	08007e5f 	.word	0x08007e5f
 8007e20:	08007ec9 	.word	0x08007ec9
 8007e24:	08007eef 	.word	0x08007eef
 8007e28:	08007f29 	.word	0x08007f29
 8007e2c:	08007f53 	.word	0x08007f53
 8007e30:	08007fa5 	.word	0x08007fa5
 8007e34:	08007fc7 	.word	0x08007fc7
 8007e38:	08008003 	.word	0x08008003
 8007e3c:	08008029 	.word	0x08008029
 8007e40:	08008067 	.word	0x08008067
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f103 0110 	add.w	r1, r3, #16
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	795b      	ldrb	r3, [r3, #5]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f945 	bl	80080e0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	761a      	strb	r2, [r3, #24]
      break;
 8007e5c:	e13a      	b.n	80080d4 <USBH_HandleControl+0x2e0>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	795b      	ldrb	r3, [r3, #5]
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fcb5 	bl	80087d4 <USBH_LL_GetURBState>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d11e      	bne.n	8007eb2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	7c1b      	ldrb	r3, [r3, #16]
 8007e78:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007e7c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	8adb      	ldrh	r3, [r3, #22]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00a      	beq.n	8007e9c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e86:	7b7b      	ldrb	r3, [r7, #13]
 8007e88:	2b80      	cmp	r3, #128	@ 0x80
 8007e8a:	d103      	bne.n	8007e94 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2203      	movs	r2, #3
 8007e90:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007e92:	e116      	b.n	80080c2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_DATA_OUT;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2205      	movs	r2, #5
 8007e98:	761a      	strb	r2, [r3, #24]
      break;
 8007e9a:	e112      	b.n	80080c2 <USBH_HandleControl+0x2ce>
          if (direction == USB_D2H)
 8007e9c:	7b7b      	ldrb	r3, [r7, #13]
 8007e9e:	2b80      	cmp	r3, #128	@ 0x80
 8007ea0:	d103      	bne.n	8007eaa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2209      	movs	r2, #9
 8007ea6:	761a      	strb	r2, [r3, #24]
      break;
 8007ea8:	e10b      	b.n	80080c2 <USBH_HandleControl+0x2ce>
            phost->Control.state = CTRL_STATUS_IN;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2207      	movs	r2, #7
 8007eae:	761a      	strb	r2, [r3, #24]
      break;
 8007eb0:	e107      	b.n	80080c2 <USBH_HandleControl+0x2ce>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	2b04      	cmp	r3, #4
 8007eb6:	d003      	beq.n	8007ec0 <USBH_HandleControl+0xcc>
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	f040 8101 	bne.w	80080c2 <USBH_HandleControl+0x2ce>
          phost->Control.state = CTRL_ERROR;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	220b      	movs	r2, #11
 8007ec4:	761a      	strb	r2, [r3, #24]
      break;
 8007ec6:	e0fc      	b.n	80080c2 <USBH_HandleControl+0x2ce>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6899      	ldr	r1, [r3, #8]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	899a      	ldrh	r2, [r3, #12]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	791b      	ldrb	r3, [r3, #4]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f93c 	bl	800815e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2204      	movs	r2, #4
 8007eea:	761a      	strb	r2, [r3, #24]
      break;
 8007eec:	e0f2      	b.n	80080d4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	791b      	ldrb	r3, [r3, #4]
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fc6d 	bl	80087d4 <USBH_LL_GetURBState>
 8007efa:	4603      	mov	r3, r0
 8007efc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d103      	bne.n	8007f0c <USBH_HandleControl+0x118>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2209      	movs	r2, #9
 8007f08:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007f0a:	e0dc      	b.n	80080c6 <USBH_HandleControl+0x2d2>
      else if (URB_Status == USBH_URB_STALL)
 8007f0c:	7bbb      	ldrb	r3, [r7, #14]
 8007f0e:	2b05      	cmp	r3, #5
 8007f10:	d102      	bne.n	8007f18 <USBH_HandleControl+0x124>
        status = USBH_NOT_SUPPORTED;
 8007f12:	2303      	movs	r3, #3
 8007f14:	73fb      	strb	r3, [r7, #15]
      break;
 8007f16:	e0d6      	b.n	80080c6 <USBH_HandleControl+0x2d2>
        if (URB_Status == USBH_URB_ERROR)
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	f040 80d3 	bne.w	80080c6 <USBH_HandleControl+0x2d2>
          phost->Control.state = CTRL_ERROR;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	220b      	movs	r2, #11
 8007f24:	761a      	strb	r2, [r3, #24]
      break;
 8007f26:	e0ce      	b.n	80080c6 <USBH_HandleControl+0x2d2>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6899      	ldr	r1, [r3, #8]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	899a      	ldrh	r2, [r3, #12]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	795b      	ldrb	r3, [r3, #5]
 8007f34:	2001      	movs	r0, #1
 8007f36:	9000      	str	r0, [sp, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f8eb 	bl	8008114 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2206      	movs	r2, #6
 8007f4e:	761a      	strb	r2, [r3, #24]
      break;
 8007f50:	e0c0      	b.n	80080d4 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	795b      	ldrb	r3, [r3, #5]
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fc3b 	bl	80087d4 <USBH_LL_GetURBState>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d103      	bne.n	8007f70 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2207      	movs	r2, #7
 8007f6c:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007f6e:	e0ac      	b.n	80080ca <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_STALL)
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	d105      	bne.n	8007f82 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	220c      	movs	r2, #12
 8007f7a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f80:	e0a3      	b.n	80080ca <USBH_HandleControl+0x2d6>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f82:	7bbb      	ldrb	r3, [r7, #14]
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d103      	bne.n	8007f90 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2205      	movs	r2, #5
 8007f8c:	761a      	strb	r2, [r3, #24]
      break;
 8007f8e:	e09c      	b.n	80080ca <USBH_HandleControl+0x2d6>
        if (URB_Status == USBH_URB_ERROR)
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	f040 8099 	bne.w	80080ca <USBH_HandleControl+0x2d6>
          phost->Control.state = CTRL_ERROR;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	220b      	movs	r2, #11
 8007f9c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8007fa2:	e092      	b.n	80080ca <USBH_HandleControl+0x2d6>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	791b      	ldrb	r3, [r3, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2100      	movs	r1, #0
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f8d6 	bl	800815e <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	761a      	strb	r2, [r3, #24]

      break;
 8007fc4:	e086      	b.n	80080d4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	791b      	ldrb	r3, [r3, #4]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 fc01 	bl	80087d4 <USBH_LL_GetURBState>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d105      	bne.n	8007fe8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	220d      	movs	r2, #13
 8007fe0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8007fe6:	e072      	b.n	80080ce <USBH_HandleControl+0x2da>
      else if (URB_Status == USBH_URB_ERROR)
 8007fe8:	7bbb      	ldrb	r3, [r7, #14]
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d103      	bne.n	8007ff6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	220b      	movs	r2, #11
 8007ff2:	761a      	strb	r2, [r3, #24]
      break;
 8007ff4:	e06b      	b.n	80080ce <USBH_HandleControl+0x2da>
        if (URB_Status == USBH_URB_STALL)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b05      	cmp	r3, #5
 8007ffa:	d168      	bne.n	80080ce <USBH_HandleControl+0x2da>
          status = USBH_NOT_SUPPORTED;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8008000:	e065      	b.n	80080ce <USBH_HandleControl+0x2da>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	795b      	ldrb	r3, [r3, #5]
 8008006:	2201      	movs	r2, #1
 8008008:	9200      	str	r2, [sp, #0]
 800800a:	2200      	movs	r2, #0
 800800c:	2100      	movs	r1, #0
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f880 	bl	8008114 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800801a:	b29a      	uxth	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	220a      	movs	r2, #10
 8008024:	761a      	strb	r2, [r3, #24]
      break;
 8008026:	e055      	b.n	80080d4 <USBH_HandleControl+0x2e0>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	795b      	ldrb	r3, [r3, #5]
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fbd0 	bl	80087d4 <USBH_LL_GetURBState>
 8008034:	4603      	mov	r3, r0
 8008036:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008038:	7bbb      	ldrb	r3, [r7, #14]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d105      	bne.n	800804a <USBH_HandleControl+0x256>
      {
        status = USBH_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	220d      	movs	r2, #13
 8008046:	761a      	strb	r2, [r3, #24]
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8008048:	e043      	b.n	80080d2 <USBH_HandleControl+0x2de>
      else if (URB_Status == USBH_URB_NOTREADY)
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	2b02      	cmp	r3, #2
 800804e:	d103      	bne.n	8008058 <USBH_HandleControl+0x264>
        phost->Control.state = CTRL_STATUS_OUT;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2209      	movs	r2, #9
 8008054:	761a      	strb	r2, [r3, #24]
      break;
 8008056:	e03c      	b.n	80080d2 <USBH_HandleControl+0x2de>
        if (URB_Status == USBH_URB_ERROR)
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	2b04      	cmp	r3, #4
 800805c:	d139      	bne.n	80080d2 <USBH_HandleControl+0x2de>
          phost->Control.state = CTRL_ERROR;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	220b      	movs	r2, #11
 8008062:	761a      	strb	r2, [r3, #24]
      break;
 8008064:	e035      	b.n	80080d2 <USBH_HandleControl+0x2de>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	7e5b      	ldrb	r3, [r3, #25]
 800806a:	3301      	adds	r3, #1
 800806c:	b2da      	uxtb	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	765a      	strb	r2, [r3, #25]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	7e5b      	ldrb	r3, [r3, #25]
 8008076:	2b02      	cmp	r3, #2
 8008078:	d806      	bhi.n	8008088 <USBH_HandleControl+0x294>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008086:	e025      	b.n	80080d4 <USBH_HandleControl+0x2e0>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800808e:	2106      	movs	r1, #6
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	795b      	ldrb	r3, [r3, #5]
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f90d 	bl	80082c0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	791b      	ldrb	r3, [r3, #4]
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f907 	bl	80082c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80080b8:	2302      	movs	r3, #2
 80080ba:	73fb      	strb	r3, [r7, #15]
      break;
 80080bc:	e00a      	b.n	80080d4 <USBH_HandleControl+0x2e0>

    default:
      break;
 80080be:	bf00      	nop
 80080c0:	e008      	b.n	80080d4 <USBH_HandleControl+0x2e0>
      break;
 80080c2:	bf00      	nop
 80080c4:	e006      	b.n	80080d4 <USBH_HandleControl+0x2e0>
      break;
 80080c6:	bf00      	nop
 80080c8:	e004      	b.n	80080d4 <USBH_HandleControl+0x2e0>
      break;
 80080ca:	bf00      	nop
 80080cc:	e002      	b.n	80080d4 <USBH_HandleControl+0x2e0>
      break;
 80080ce:	bf00      	nop
 80080d0:	e000      	b.n	80080d4 <USBH_HandleControl+0x2e0>
      break;
 80080d2:	bf00      	nop
  }

  return status;
 80080d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop

080080e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af04      	add	r7, sp, #16
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	4613      	mov	r3, r2
 80080ec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080ee:	79f9      	ldrb	r1, [r7, #7]
 80080f0:	2300      	movs	r3, #0
 80080f2:	9303      	str	r3, [sp, #12]
 80080f4:	2308      	movs	r3, #8
 80080f6:	9302      	str	r3, [sp, #8]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	9301      	str	r3, [sp, #4]
 80080fc:	2300      	movs	r3, #0
 80080fe:	9300      	str	r3, [sp, #0]
 8008100:	2300      	movs	r3, #0
 8008102:	2200      	movs	r2, #0
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 fb34 	bl	8008772 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af04      	add	r7, sp, #16
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	4611      	mov	r1, r2
 8008120:	461a      	mov	r2, r3
 8008122:	460b      	mov	r3, r1
 8008124:	80fb      	strh	r3, [r7, #6]
 8008126:	4613      	mov	r3, r2
 8008128:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008134:	2300      	movs	r3, #0
 8008136:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008138:	7979      	ldrb	r1, [r7, #5]
 800813a:	7e3b      	ldrb	r3, [r7, #24]
 800813c:	9303      	str	r3, [sp, #12]
 800813e:	88fb      	ldrh	r3, [r7, #6]
 8008140:	9302      	str	r3, [sp, #8]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	2301      	movs	r3, #1
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	2300      	movs	r3, #0
 800814c:	2200      	movs	r2, #0
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 fb0f 	bl	8008772 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b088      	sub	sp, #32
 8008162:	af04      	add	r7, sp, #16
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	4611      	mov	r1, r2
 800816a:	461a      	mov	r2, r3
 800816c:	460b      	mov	r3, r1
 800816e:	80fb      	strh	r3, [r7, #6]
 8008170:	4613      	mov	r3, r2
 8008172:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008174:	7979      	ldrb	r1, [r7, #5]
 8008176:	2300      	movs	r3, #0
 8008178:	9303      	str	r3, [sp, #12]
 800817a:	88fb      	ldrh	r3, [r7, #6]
 800817c:	9302      	str	r3, [sp, #8]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	9301      	str	r3, [sp, #4]
 8008182:	2301      	movs	r3, #1
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	2300      	movs	r3, #0
 8008188:	2201      	movs	r2, #1
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 faf1 	bl	8008772 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008190:	2300      	movs	r3, #0

}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b088      	sub	sp, #32
 800819e:	af04      	add	r7, sp, #16
 80081a0:	60f8      	str	r0, [r7, #12]
 80081a2:	60b9      	str	r1, [r7, #8]
 80081a4:	4611      	mov	r1, r2
 80081a6:	461a      	mov	r2, r3
 80081a8:	460b      	mov	r3, r1
 80081aa:	80fb      	strh	r3, [r7, #6]
 80081ac:	4613      	mov	r3, r2
 80081ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081be:	7979      	ldrb	r1, [r7, #5]
 80081c0:	7e3b      	ldrb	r3, [r7, #24]
 80081c2:	9303      	str	r3, [sp, #12]
 80081c4:	88fb      	ldrh	r3, [r7, #6]
 80081c6:	9302      	str	r3, [sp, #8]
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	2301      	movs	r3, #1
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	2302      	movs	r3, #2
 80081d2:	2200      	movs	r2, #0
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f000 facc 	bl	8008772 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af04      	add	r7, sp, #16
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	4611      	mov	r1, r2
 80081f0:	461a      	mov	r2, r3
 80081f2:	460b      	mov	r3, r1
 80081f4:	80fb      	strh	r3, [r7, #6]
 80081f6:	4613      	mov	r3, r2
 80081f8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081fa:	7979      	ldrb	r1, [r7, #5]
 80081fc:	2300      	movs	r3, #0
 80081fe:	9303      	str	r3, [sp, #12]
 8008200:	88fb      	ldrh	r3, [r7, #6]
 8008202:	9302      	str	r3, [sp, #8]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	9301      	str	r3, [sp, #4]
 8008208:	2301      	movs	r3, #1
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	2302      	movs	r3, #2
 800820e:	2201      	movs	r2, #1
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 faae 	bl	8008772 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af04      	add	r7, sp, #16
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	4608      	mov	r0, r1
 800822a:	4611      	mov	r1, r2
 800822c:	461a      	mov	r2, r3
 800822e:	4603      	mov	r3, r0
 8008230:	70fb      	strb	r3, [r7, #3]
 8008232:	460b      	mov	r3, r1
 8008234:	70bb      	strb	r3, [r7, #2]
 8008236:	4613      	mov	r3, r2
 8008238:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800823a:	7878      	ldrb	r0, [r7, #1]
 800823c:	78ba      	ldrb	r2, [r7, #2]
 800823e:	78f9      	ldrb	r1, [r7, #3]
 8008240:	8b3b      	ldrh	r3, [r7, #24]
 8008242:	9302      	str	r3, [sp, #8]
 8008244:	7d3b      	ldrb	r3, [r7, #20]
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	7c3b      	ldrb	r3, [r7, #16]
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	4603      	mov	r3, r0
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 fa53 	bl	80086fa <USBH_LL_OpenPipe>

  return USBH_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3708      	adds	r7, #8
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	460b      	mov	r3, r1
 8008268:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	4619      	mov	r1, r3
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fa72 	bl	8008758 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	460b      	mov	r3, r1
 8008288:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f836 	bl	80082fc <USBH_GetFreePipe>
 8008290:	4603      	mov	r3, r0
 8008292:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008294:	89fb      	ldrh	r3, [r7, #14]
 8008296:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800829a:	4293      	cmp	r3, r2
 800829c:	d00a      	beq.n	80082b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800829e:	78fa      	ldrb	r2, [r7, #3]
 80082a0:	89fb      	ldrh	r3, [r7, #14]
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082aa:	6879      	ldr	r1, [r7, #4]
 80082ac:	33e0      	adds	r3, #224	@ 0xe0
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	440b      	add	r3, r1
 80082b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80082b4:	89fb      	ldrh	r3, [r7, #14]
 80082b6:	b2db      	uxtb	r3, r3
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	2b0f      	cmp	r3, #15
 80082d0:	d80d      	bhi.n	80082ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80082d2:	78fb      	ldrb	r3, [r7, #3]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	33e0      	adds	r3, #224	@ 0xe0
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4413      	add	r3, r2
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	33e0      	adds	r3, #224	@ 0xe0
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	440b      	add	r3, r1
 80082ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
 800830c:	e00f      	b.n	800832e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	33e0      	adds	r3, #224	@ 0xe0
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800831e:	2b00      	cmp	r3, #0
 8008320:	d102      	bne.n	8008328 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008322:	7bfb      	ldrb	r3, [r7, #15]
 8008324:	b29b      	uxth	r3, r3
 8008326:	e007      	b.n	8008338 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008328:	7bfb      	ldrb	r3, [r7, #15]
 800832a:	3301      	adds	r3, #1
 800832c:	73fb      	strb	r3, [r7, #15]
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	2b0f      	cmp	r3, #15
 8008332:	d9ec      	bls.n	800830e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008334:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008348:	2201      	movs	r2, #1
 800834a:	490e      	ldr	r1, [pc, #56]	@ (8008384 <MX_USB_HOST_Init+0x40>)
 800834c:	480e      	ldr	r0, [pc, #56]	@ (8008388 <MX_USB_HOST_Init+0x44>)
 800834e:	f7fe fb0f 	bl	8006970 <USBH_Init>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008358:	f7f8 fb4e 	bl	80009f8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800835c:	490b      	ldr	r1, [pc, #44]	@ (800838c <MX_USB_HOST_Init+0x48>)
 800835e:	480a      	ldr	r0, [pc, #40]	@ (8008388 <MX_USB_HOST_Init+0x44>)
 8008360:	f7fe fbb1 	bl	8006ac6 <USBH_RegisterClass>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800836a:	f7f8 fb45 	bl	80009f8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800836e:	4806      	ldr	r0, [pc, #24]	@ (8008388 <MX_USB_HOST_Init+0x44>)
 8008370:	f7fe fc35 	bl	8006bde <USBH_Start>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800837a:	f7f8 fb3d 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800837e:	bf00      	nop
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	080083a5 	.word	0x080083a5
 8008388:	20000198 	.word	0x20000198
 800838c:	2000000c 	.word	0x2000000c

08008390 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008394:	4802      	ldr	r0, [pc, #8]	@ (80083a0 <MX_USB_HOST_Process+0x10>)
 8008396:	f7fe fc33 	bl	8006c00 <USBH_Process>
}
 800839a:	bf00      	nop
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000198 	.word	0x20000198

080083a4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80083b0:	78fb      	ldrb	r3, [r7, #3]
 80083b2:	3b01      	subs	r3, #1
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d819      	bhi.n	80083ec <USBH_UserProcess+0x48>
 80083b8:	a201      	add	r2, pc, #4	@ (adr r2, 80083c0 <USBH_UserProcess+0x1c>)
 80083ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083be:	bf00      	nop
 80083c0:	080083ed 	.word	0x080083ed
 80083c4:	080083dd 	.word	0x080083dd
 80083c8:	080083ed 	.word	0x080083ed
 80083cc:	080083e5 	.word	0x080083e5
 80083d0:	080083d5 	.word	0x080083d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80083d4:	4b09      	ldr	r3, [pc, #36]	@ (80083fc <USBH_UserProcess+0x58>)
 80083d6:	2203      	movs	r2, #3
 80083d8:	701a      	strb	r2, [r3, #0]
  break;
 80083da:	e008      	b.n	80083ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80083dc:	4b07      	ldr	r3, [pc, #28]	@ (80083fc <USBH_UserProcess+0x58>)
 80083de:	2202      	movs	r2, #2
 80083e0:	701a      	strb	r2, [r3, #0]
  break;
 80083e2:	e004      	b.n	80083ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80083e4:	4b05      	ldr	r3, [pc, #20]	@ (80083fc <USBH_UserProcess+0x58>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	701a      	strb	r2, [r3, #0]
  break;
 80083ea:	e000      	b.n	80083ee <USBH_UserProcess+0x4a>

  default:
  break;
 80083ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	20000570 	.word	0x20000570

08008400 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	@ 0x28
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008408:	f107 0314 	add.w	r3, r7, #20
 800840c:	2200      	movs	r2, #0
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	605a      	str	r2, [r3, #4]
 8008412:	609a      	str	r2, [r3, #8]
 8008414:	60da      	str	r2, [r3, #12]
 8008416:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008420:	d147      	bne.n	80084b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008422:	2300      	movs	r3, #0
 8008424:	613b      	str	r3, [r7, #16]
 8008426:	4b25      	ldr	r3, [pc, #148]	@ (80084bc <HAL_HCD_MspInit+0xbc>)
 8008428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800842a:	4a24      	ldr	r2, [pc, #144]	@ (80084bc <HAL_HCD_MspInit+0xbc>)
 800842c:	f043 0301 	orr.w	r3, r3, #1
 8008430:	6313      	str	r3, [r2, #48]	@ 0x30
 8008432:	4b22      	ldr	r3, [pc, #136]	@ (80084bc <HAL_HCD_MspInit+0xbc>)
 8008434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	613b      	str	r3, [r7, #16]
 800843c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800843e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008444:	2300      	movs	r3, #0
 8008446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008448:	2300      	movs	r3, #0
 800844a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800844c:	f107 0314 	add.w	r3, r7, #20
 8008450:	4619      	mov	r1, r3
 8008452:	481b      	ldr	r0, [pc, #108]	@ (80084c0 <HAL_HCD_MspInit+0xc0>)
 8008454:	f7f8 fe68 	bl	8001128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008458:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800845c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800845e:	2302      	movs	r3, #2
 8008460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008462:	2300      	movs	r3, #0
 8008464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008466:	2300      	movs	r3, #0
 8008468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800846a:	230a      	movs	r3, #10
 800846c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800846e:	f107 0314 	add.w	r3, r7, #20
 8008472:	4619      	mov	r1, r3
 8008474:	4812      	ldr	r0, [pc, #72]	@ (80084c0 <HAL_HCD_MspInit+0xc0>)
 8008476:	f7f8 fe57 	bl	8001128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800847a:	4b10      	ldr	r3, [pc, #64]	@ (80084bc <HAL_HCD_MspInit+0xbc>)
 800847c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800847e:	4a0f      	ldr	r2, [pc, #60]	@ (80084bc <HAL_HCD_MspInit+0xbc>)
 8008480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008484:	6353      	str	r3, [r2, #52]	@ 0x34
 8008486:	2300      	movs	r3, #0
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	4b0c      	ldr	r3, [pc, #48]	@ (80084bc <HAL_HCD_MspInit+0xbc>)
 800848c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800848e:	4a0b      	ldr	r2, [pc, #44]	@ (80084bc <HAL_HCD_MspInit+0xbc>)
 8008490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008494:	6453      	str	r3, [r2, #68]	@ 0x44
 8008496:	4b09      	ldr	r3, [pc, #36]	@ (80084bc <HAL_HCD_MspInit+0xbc>)
 8008498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800849a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084a2:	2200      	movs	r2, #0
 80084a4:	2100      	movs	r1, #0
 80084a6:	2043      	movs	r0, #67	@ 0x43
 80084a8:	f7f8 fe07 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80084ac:	2043      	movs	r0, #67	@ 0x43
 80084ae:	f7f8 fe20 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084b2:	bf00      	nop
 80084b4:	3728      	adds	r7, #40	@ 0x28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	40023800 	.word	0x40023800
 80084c0:	40020000 	.word	0x40020000

080084c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe ff6d 	bl	80073b2 <USBH_LL_IncTimer>
}
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe ffa9 	bl	8007446 <USBH_LL_Connect>
}
 80084f4:	bf00      	nop
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800850a:	4618      	mov	r0, r3
 800850c:	f7fe ffb2 	bl	8007474 <USBH_LL_Disconnect>
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	70fb      	strb	r3, [r7, #3]
 8008524:	4613      	mov	r3, r2
 8008526:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe ff5f 	bl	8007406 <USBH_LL_PortEnabled>
}
 8008548:	bf00      	nop
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800855e:	4618      	mov	r0, r3
 8008560:	f7fe ff5f 	bl	8007422 <USBH_LL_PortDisabled>
}
 8008564:	bf00      	nop
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800857a:	2b01      	cmp	r3, #1
 800857c:	d12a      	bne.n	80085d4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800857e:	4a18      	ldr	r2, [pc, #96]	@ (80085e0 <USBH_LL_Init+0x74>)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a15      	ldr	r2, [pc, #84]	@ (80085e0 <USBH_LL_Init+0x74>)
 800858a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800858e:	4b14      	ldr	r3, [pc, #80]	@ (80085e0 <USBH_LL_Init+0x74>)
 8008590:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008594:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008596:	4b12      	ldr	r3, [pc, #72]	@ (80085e0 <USBH_LL_Init+0x74>)
 8008598:	2208      	movs	r2, #8
 800859a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800859c:	4b10      	ldr	r3, [pc, #64]	@ (80085e0 <USBH_LL_Init+0x74>)
 800859e:	2201      	movs	r2, #1
 80085a0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085a2:	4b0f      	ldr	r3, [pc, #60]	@ (80085e0 <USBH_LL_Init+0x74>)
 80085a4:	2200      	movs	r2, #0
 80085a6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80085a8:	4b0d      	ldr	r3, [pc, #52]	@ (80085e0 <USBH_LL_Init+0x74>)
 80085aa:	2202      	movs	r2, #2
 80085ac:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80085ae:	4b0c      	ldr	r3, [pc, #48]	@ (80085e0 <USBH_LL_Init+0x74>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80085b4:	480a      	ldr	r0, [pc, #40]	@ (80085e0 <USBH_LL_Init+0x74>)
 80085b6:	f7f8 ff85 	bl	80014c4 <HAL_HCD_Init>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80085c0:	f7f8 fa1a 	bl	80009f8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80085c4:	4806      	ldr	r0, [pc, #24]	@ (80085e0 <USBH_LL_Init+0x74>)
 80085c6:	f7f9 fbc3 	bl	8001d50 <HAL_HCD_GetCurrentFrame>
 80085ca:	4603      	mov	r3, r0
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7fe fee0 	bl	8007394 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	20000574 	.word	0x20000574

080085e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7f9 fb30 	bl	8001c60 <HAL_HCD_Start>
 8008600:	4603      	mov	r3, r0
 8008602:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	4618      	mov	r0, r3
 8008608:	f000 f94c 	bl	80088a4 <USBH_Get_USB_Status>
 800860c:	4603      	mov	r3, r0
 800860e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008610:	7bbb      	ldrb	r3, [r7, #14]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008630:	4618      	mov	r0, r3
 8008632:	f7f9 fb38 	bl	8001ca6 <HAL_HCD_Stop>
 8008636:	4603      	mov	r3, r0
 8008638:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800863a:	7bfb      	ldrb	r3, [r7, #15]
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f931 	bl	80088a4 <USBH_Get_USB_Status>
 8008642:	4603      	mov	r3, r0
 8008644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008646:	7bbb      	ldrb	r3, [r7, #14]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008658:	2301      	movs	r3, #1
 800865a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008662:	4618      	mov	r0, r3
 8008664:	f7f9 fb82 	bl	8001d6c <HAL_HCD_GetCurrentSpeed>
 8008668:	4603      	mov	r3, r0
 800866a:	2b02      	cmp	r3, #2
 800866c:	d00c      	beq.n	8008688 <USBH_LL_GetSpeed+0x38>
 800866e:	2b02      	cmp	r3, #2
 8008670:	d80d      	bhi.n	800868e <USBH_LL_GetSpeed+0x3e>
 8008672:	2b00      	cmp	r3, #0
 8008674:	d002      	beq.n	800867c <USBH_LL_GetSpeed+0x2c>
 8008676:	2b01      	cmp	r3, #1
 8008678:	d003      	beq.n	8008682 <USBH_LL_GetSpeed+0x32>
 800867a:	e008      	b.n	800868e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]
    break;
 8008680:	e008      	b.n	8008694 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008682:	2301      	movs	r3, #1
 8008684:	73fb      	strb	r3, [r7, #15]
    break;
 8008686:	e005      	b.n	8008694 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008688:	2302      	movs	r3, #2
 800868a:	73fb      	strb	r3, [r7, #15]
    break;
 800868c:	e002      	b.n	8008694 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800868e:	2301      	movs	r3, #1
 8008690:	73fb      	strb	r3, [r7, #15]
    break;
 8008692:	bf00      	nop
  }
  return  speed;
 8008694:	7bfb      	ldrb	r3, [r7, #15]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7f9 fb13 	bl	8001ce0 <HAL_HCD_ResetPort>
 80086ba:	4603      	mov	r3, r0
 80086bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 f8ef 	bl	80088a4 <USBH_Get_USB_Status>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	460b      	mov	r3, r1
 80086de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086e6:	78fa      	ldrb	r2, [r7, #3]
 80086e8:	4611      	mov	r1, r2
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7f9 fb1b 	bl	8001d26 <HAL_HCD_HC_GetXferCount>
 80086f0:	4603      	mov	r3, r0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <USBH_LL_OpenPipe>:
                                    uint8_t epnum,
                                    uint8_t dev_address,
                                    uint8_t speed,
                                    uint8_t ep_type,
                                    uint16_t mps)
{
 80086fa:	b590      	push	{r4, r7, lr}
 80086fc:	b089      	sub	sp, #36	@ 0x24
 80086fe:	af04      	add	r7, sp, #16
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	4608      	mov	r0, r1
 8008704:	4611      	mov	r1, r2
 8008706:	461a      	mov	r2, r3
 8008708:	4603      	mov	r3, r0
 800870a:	70fb      	strb	r3, [r7, #3]
 800870c:	460b      	mov	r3, r1
 800870e:	70bb      	strb	r3, [r7, #2]
 8008710:	4613      	mov	r3, r2
 8008712:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe, epnum,
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008722:	787c      	ldrb	r4, [r7, #1]
 8008724:	78ba      	ldrb	r2, [r7, #2]
 8008726:	78f9      	ldrb	r1, [r7, #3]
 8008728:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800872a:	9302      	str	r3, [sp, #8]
 800872c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	4623      	mov	r3, r4
 800873a:	f7f8 ff2a 	bl	8001592 <HAL_HCD_HC_Init>
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008742:	7bfb      	ldrb	r3, [r7, #15]
 8008744:	4618      	mov	r0, r3
 8008746:	f000 f8ad 	bl	80088a4 <USBH_Get_USB_Status>
 800874a:	4603      	mov	r3, r0
 800874c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800874e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	bd90      	pop	{r4, r7, pc}

08008758 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(pipe);

  return USBH_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008772:	b590      	push	{r4, r7, lr}
 8008774:	b089      	sub	sp, #36	@ 0x24
 8008776:	af04      	add	r7, sp, #16
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	4608      	mov	r0, r1
 800877c:	4611      	mov	r1, r2
 800877e:	461a      	mov	r2, r3
 8008780:	4603      	mov	r3, r0
 8008782:	70fb      	strb	r3, [r7, #3]
 8008784:	460b      	mov	r3, r1
 8008786:	70bb      	strb	r3, [r7, #2]
 8008788:	4613      	mov	r3, r2
 800878a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800879a:	787c      	ldrb	r4, [r7, #1]
 800879c:	78ba      	ldrb	r2, [r7, #2]
 800879e:	78f9      	ldrb	r1, [r7, #3]
 80087a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80087a4:	9303      	str	r3, [sp, #12]
 80087a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80087a8:	9302      	str	r3, [sp, #8]
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	4623      	mov	r3, r4
 80087b6:	f7f8 ffa5 	bl	8001704 <HAL_HCD_HC_SubmitRequest>
 80087ba:	4603      	mov	r3, r0
 80087bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 f86f 	bl	80088a4 <USBH_Get_USB_Status>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd90      	pop	{r4, r7, pc}

080087d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087e6:	78fa      	ldrb	r2, [r7, #3]
 80087e8:	4611      	mov	r1, r2
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7f9 fa86 	bl	8001cfc <HAL_HCD_HC_GetURBState>
 80087f0:	4603      	mov	r3, r0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b082      	sub	sp, #8
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
 8008802:	460b      	mov	r3, r1
 8008804:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800880c:	2b01      	cmp	r3, #1
 800880e:	d103      	bne.n	8008818 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008810:	78fb      	ldrb	r3, [r7, #3]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 f872 	bl	80088fc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008818:	20c8      	movs	r0, #200	@ 0xc8
 800881a:	f7f8 fb4f 	bl	8000ebc <HAL_Delay>
  return USBH_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
 8008834:	4613      	mov	r3, r2
 8008836:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800883e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008840:	78fa      	ldrb	r2, [r7, #3]
 8008842:	68f9      	ldr	r1, [r7, #12]
 8008844:	4613      	mov	r3, r2
 8008846:	011b      	lsls	r3, r3, #4
 8008848:	1a9b      	subs	r3, r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	440b      	add	r3, r1
 800884e:	3317      	adds	r3, #23
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008856:	78fa      	ldrb	r2, [r7, #3]
 8008858:	68f9      	ldr	r1, [r7, #12]
 800885a:	4613      	mov	r3, r2
 800885c:	011b      	lsls	r3, r3, #4
 800885e:	1a9b      	subs	r3, r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	440b      	add	r3, r1
 8008864:	333c      	adds	r3, #60	@ 0x3c
 8008866:	78ba      	ldrb	r2, [r7, #2]
 8008868:	701a      	strb	r2, [r3, #0]
 800886a:	e009      	b.n	8008880 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800886c:	78fa      	ldrb	r2, [r7, #3]
 800886e:	68f9      	ldr	r1, [r7, #12]
 8008870:	4613      	mov	r3, r2
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	1a9b      	subs	r3, r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	333d      	adds	r3, #61	@ 0x3d
 800887c:	78ba      	ldrb	r2, [r7, #2]
 800887e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7f8 fb10 	bl	8000ebc <HAL_Delay>
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d817      	bhi.n	80088e8 <USBH_Get_USB_Status+0x44>
 80088b8:	a201      	add	r2, pc, #4	@ (adr r2, 80088c0 <USBH_Get_USB_Status+0x1c>)
 80088ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088be:	bf00      	nop
 80088c0:	080088d1 	.word	0x080088d1
 80088c4:	080088d7 	.word	0x080088d7
 80088c8:	080088dd 	.word	0x080088dd
 80088cc:	080088e3 	.word	0x080088e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73fb      	strb	r3, [r7, #15]
    break;
 80088d4:	e00b      	b.n	80088ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80088d6:	2302      	movs	r3, #2
 80088d8:	73fb      	strb	r3, [r7, #15]
    break;
 80088da:	e008      	b.n	80088ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80088dc:	2301      	movs	r3, #1
 80088de:	73fb      	strb	r3, [r7, #15]
    break;
 80088e0:	e005      	b.n	80088ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80088e2:	2302      	movs	r3, #2
 80088e4:	73fb      	strb	r3, [r7, #15]
    break;
 80088e6:	e002      	b.n	80088ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80088e8:	2302      	movs	r3, #2
 80088ea:	73fb      	strb	r3, [r7, #15]
    break;
 80088ec:	bf00      	nop
  }
  return usb_status;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008906:	79fb      	ldrb	r3, [r7, #7]
 8008908:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800890a:	79fb      	ldrb	r3, [r7, #7]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d102      	bne.n	8008916 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008910:	2300      	movs	r3, #0
 8008912:	73fb      	strb	r3, [r7, #15]
 8008914:	e001      	b.n	800891a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008916:	2301      	movs	r3, #1
 8008918:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	461a      	mov	r2, r3
 800891e:	2101      	movs	r1, #1
 8008920:	4803      	ldr	r0, [pc, #12]	@ (8008930 <MX_DriverVbusFS+0x34>)
 8008922:	f7f8 fd9d 	bl	8001460 <HAL_GPIO_WritePin>
}
 8008926:	bf00      	nop
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	40020800 	.word	0x40020800

08008934 <malloc>:
 8008934:	4b02      	ldr	r3, [pc, #8]	@ (8008940 <malloc+0xc>)
 8008936:	4601      	mov	r1, r0
 8008938:	6818      	ldr	r0, [r3, #0]
 800893a:	f000 b82d 	b.w	8008998 <_malloc_r>
 800893e:	bf00      	nop
 8008940:	2000002c 	.word	0x2000002c

08008944 <free>:
 8008944:	4b02      	ldr	r3, [pc, #8]	@ (8008950 <free+0xc>)
 8008946:	4601      	mov	r1, r0
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	f000 b8f5 	b.w	8008b38 <_free_r>
 800894e:	bf00      	nop
 8008950:	2000002c 	.word	0x2000002c

08008954 <sbrk_aligned>:
 8008954:	b570      	push	{r4, r5, r6, lr}
 8008956:	4e0f      	ldr	r6, [pc, #60]	@ (8008994 <sbrk_aligned+0x40>)
 8008958:	460c      	mov	r4, r1
 800895a:	6831      	ldr	r1, [r6, #0]
 800895c:	4605      	mov	r5, r0
 800895e:	b911      	cbnz	r1, 8008966 <sbrk_aligned+0x12>
 8008960:	f000 f8ae 	bl	8008ac0 <_sbrk_r>
 8008964:	6030      	str	r0, [r6, #0]
 8008966:	4621      	mov	r1, r4
 8008968:	4628      	mov	r0, r5
 800896a:	f000 f8a9 	bl	8008ac0 <_sbrk_r>
 800896e:	1c43      	adds	r3, r0, #1
 8008970:	d103      	bne.n	800897a <sbrk_aligned+0x26>
 8008972:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008976:	4620      	mov	r0, r4
 8008978:	bd70      	pop	{r4, r5, r6, pc}
 800897a:	1cc4      	adds	r4, r0, #3
 800897c:	f024 0403 	bic.w	r4, r4, #3
 8008980:	42a0      	cmp	r0, r4
 8008982:	d0f8      	beq.n	8008976 <sbrk_aligned+0x22>
 8008984:	1a21      	subs	r1, r4, r0
 8008986:	4628      	mov	r0, r5
 8008988:	f000 f89a 	bl	8008ac0 <_sbrk_r>
 800898c:	3001      	adds	r0, #1
 800898e:	d1f2      	bne.n	8008976 <sbrk_aligned+0x22>
 8008990:	e7ef      	b.n	8008972 <sbrk_aligned+0x1e>
 8008992:	bf00      	nop
 8008994:	20000954 	.word	0x20000954

08008998 <_malloc_r>:
 8008998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800899c:	1ccd      	adds	r5, r1, #3
 800899e:	f025 0503 	bic.w	r5, r5, #3
 80089a2:	3508      	adds	r5, #8
 80089a4:	2d0c      	cmp	r5, #12
 80089a6:	bf38      	it	cc
 80089a8:	250c      	movcc	r5, #12
 80089aa:	2d00      	cmp	r5, #0
 80089ac:	4606      	mov	r6, r0
 80089ae:	db01      	blt.n	80089b4 <_malloc_r+0x1c>
 80089b0:	42a9      	cmp	r1, r5
 80089b2:	d904      	bls.n	80089be <_malloc_r+0x26>
 80089b4:	230c      	movs	r3, #12
 80089b6:	6033      	str	r3, [r6, #0]
 80089b8:	2000      	movs	r0, #0
 80089ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a94 <_malloc_r+0xfc>
 80089c2:	f000 f869 	bl	8008a98 <__malloc_lock>
 80089c6:	f8d8 3000 	ldr.w	r3, [r8]
 80089ca:	461c      	mov	r4, r3
 80089cc:	bb44      	cbnz	r4, 8008a20 <_malloc_r+0x88>
 80089ce:	4629      	mov	r1, r5
 80089d0:	4630      	mov	r0, r6
 80089d2:	f7ff ffbf 	bl	8008954 <sbrk_aligned>
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	4604      	mov	r4, r0
 80089da:	d158      	bne.n	8008a8e <_malloc_r+0xf6>
 80089dc:	f8d8 4000 	ldr.w	r4, [r8]
 80089e0:	4627      	mov	r7, r4
 80089e2:	2f00      	cmp	r7, #0
 80089e4:	d143      	bne.n	8008a6e <_malloc_r+0xd6>
 80089e6:	2c00      	cmp	r4, #0
 80089e8:	d04b      	beq.n	8008a82 <_malloc_r+0xea>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	4639      	mov	r1, r7
 80089ee:	4630      	mov	r0, r6
 80089f0:	eb04 0903 	add.w	r9, r4, r3
 80089f4:	f000 f864 	bl	8008ac0 <_sbrk_r>
 80089f8:	4581      	cmp	r9, r0
 80089fa:	d142      	bne.n	8008a82 <_malloc_r+0xea>
 80089fc:	6821      	ldr	r1, [r4, #0]
 80089fe:	1a6d      	subs	r5, r5, r1
 8008a00:	4629      	mov	r1, r5
 8008a02:	4630      	mov	r0, r6
 8008a04:	f7ff ffa6 	bl	8008954 <sbrk_aligned>
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d03a      	beq.n	8008a82 <_malloc_r+0xea>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	442b      	add	r3, r5
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	f8d8 3000 	ldr.w	r3, [r8]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	bb62      	cbnz	r2, 8008a74 <_malloc_r+0xdc>
 8008a1a:	f8c8 7000 	str.w	r7, [r8]
 8008a1e:	e00f      	b.n	8008a40 <_malloc_r+0xa8>
 8008a20:	6822      	ldr	r2, [r4, #0]
 8008a22:	1b52      	subs	r2, r2, r5
 8008a24:	d420      	bmi.n	8008a68 <_malloc_r+0xd0>
 8008a26:	2a0b      	cmp	r2, #11
 8008a28:	d917      	bls.n	8008a5a <_malloc_r+0xc2>
 8008a2a:	1961      	adds	r1, r4, r5
 8008a2c:	42a3      	cmp	r3, r4
 8008a2e:	6025      	str	r5, [r4, #0]
 8008a30:	bf18      	it	ne
 8008a32:	6059      	strne	r1, [r3, #4]
 8008a34:	6863      	ldr	r3, [r4, #4]
 8008a36:	bf08      	it	eq
 8008a38:	f8c8 1000 	streq.w	r1, [r8]
 8008a3c:	5162      	str	r2, [r4, r5]
 8008a3e:	604b      	str	r3, [r1, #4]
 8008a40:	4630      	mov	r0, r6
 8008a42:	f000 f82f 	bl	8008aa4 <__malloc_unlock>
 8008a46:	f104 000b 	add.w	r0, r4, #11
 8008a4a:	1d23      	adds	r3, r4, #4
 8008a4c:	f020 0007 	bic.w	r0, r0, #7
 8008a50:	1ac2      	subs	r2, r0, r3
 8008a52:	bf1c      	itt	ne
 8008a54:	1a1b      	subne	r3, r3, r0
 8008a56:	50a3      	strne	r3, [r4, r2]
 8008a58:	e7af      	b.n	80089ba <_malloc_r+0x22>
 8008a5a:	6862      	ldr	r2, [r4, #4]
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	bf0c      	ite	eq
 8008a60:	f8c8 2000 	streq.w	r2, [r8]
 8008a64:	605a      	strne	r2, [r3, #4]
 8008a66:	e7eb      	b.n	8008a40 <_malloc_r+0xa8>
 8008a68:	4623      	mov	r3, r4
 8008a6a:	6864      	ldr	r4, [r4, #4]
 8008a6c:	e7ae      	b.n	80089cc <_malloc_r+0x34>
 8008a6e:	463c      	mov	r4, r7
 8008a70:	687f      	ldr	r7, [r7, #4]
 8008a72:	e7b6      	b.n	80089e2 <_malloc_r+0x4a>
 8008a74:	461a      	mov	r2, r3
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	d1fb      	bne.n	8008a74 <_malloc_r+0xdc>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	6053      	str	r3, [r2, #4]
 8008a80:	e7de      	b.n	8008a40 <_malloc_r+0xa8>
 8008a82:	230c      	movs	r3, #12
 8008a84:	6033      	str	r3, [r6, #0]
 8008a86:	4630      	mov	r0, r6
 8008a88:	f000 f80c 	bl	8008aa4 <__malloc_unlock>
 8008a8c:	e794      	b.n	80089b8 <_malloc_r+0x20>
 8008a8e:	6005      	str	r5, [r0, #0]
 8008a90:	e7d6      	b.n	8008a40 <_malloc_r+0xa8>
 8008a92:	bf00      	nop
 8008a94:	20000958 	.word	0x20000958

08008a98 <__malloc_lock>:
 8008a98:	4801      	ldr	r0, [pc, #4]	@ (8008aa0 <__malloc_lock+0x8>)
 8008a9a:	f000 b84b 	b.w	8008b34 <__retarget_lock_acquire_recursive>
 8008a9e:	bf00      	nop
 8008aa0:	20000a98 	.word	0x20000a98

08008aa4 <__malloc_unlock>:
 8008aa4:	4801      	ldr	r0, [pc, #4]	@ (8008aac <__malloc_unlock+0x8>)
 8008aa6:	f000 b846 	b.w	8008b36 <__retarget_lock_release_recursive>
 8008aaa:	bf00      	nop
 8008aac:	20000a98 	.word	0x20000a98

08008ab0 <memset>:
 8008ab0:	4402      	add	r2, r0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d100      	bne.n	8008aba <memset+0xa>
 8008ab8:	4770      	bx	lr
 8008aba:	f803 1b01 	strb.w	r1, [r3], #1
 8008abe:	e7f9      	b.n	8008ab4 <memset+0x4>

08008ac0 <_sbrk_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d06      	ldr	r5, [pc, #24]	@ (8008adc <_sbrk_r+0x1c>)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	f7f8 f912 	bl	8000cf4 <_sbrk>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_sbrk_r+0x1a>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_sbrk_r+0x1a>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	20000a94 	.word	0x20000a94

08008ae0 <__errno>:
 8008ae0:	4b01      	ldr	r3, [pc, #4]	@ (8008ae8 <__errno+0x8>)
 8008ae2:	6818      	ldr	r0, [r3, #0]
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	2000002c 	.word	0x2000002c

08008aec <__libc_init_array>:
 8008aec:	b570      	push	{r4, r5, r6, lr}
 8008aee:	4d0d      	ldr	r5, [pc, #52]	@ (8008b24 <__libc_init_array+0x38>)
 8008af0:	4c0d      	ldr	r4, [pc, #52]	@ (8008b28 <__libc_init_array+0x3c>)
 8008af2:	1b64      	subs	r4, r4, r5
 8008af4:	10a4      	asrs	r4, r4, #2
 8008af6:	2600      	movs	r6, #0
 8008af8:	42a6      	cmp	r6, r4
 8008afa:	d109      	bne.n	8008b10 <__libc_init_array+0x24>
 8008afc:	4d0b      	ldr	r5, [pc, #44]	@ (8008b2c <__libc_init_array+0x40>)
 8008afe:	4c0c      	ldr	r4, [pc, #48]	@ (8008b30 <__libc_init_array+0x44>)
 8008b00:	f000 f864 	bl	8008bcc <_init>
 8008b04:	1b64      	subs	r4, r4, r5
 8008b06:	10a4      	asrs	r4, r4, #2
 8008b08:	2600      	movs	r6, #0
 8008b0a:	42a6      	cmp	r6, r4
 8008b0c:	d105      	bne.n	8008b1a <__libc_init_array+0x2e>
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b14:	4798      	blx	r3
 8008b16:	3601      	adds	r6, #1
 8008b18:	e7ee      	b.n	8008af8 <__libc_init_array+0xc>
 8008b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b1e:	4798      	blx	r3
 8008b20:	3601      	adds	r6, #1
 8008b22:	e7f2      	b.n	8008b0a <__libc_init_array+0x1e>
 8008b24:	08008c08 	.word	0x08008c08
 8008b28:	08008c08 	.word	0x08008c08
 8008b2c:	08008c08 	.word	0x08008c08
 8008b30:	08008c0c 	.word	0x08008c0c

08008b34 <__retarget_lock_acquire_recursive>:
 8008b34:	4770      	bx	lr

08008b36 <__retarget_lock_release_recursive>:
 8008b36:	4770      	bx	lr

08008b38 <_free_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	2900      	cmp	r1, #0
 8008b3e:	d041      	beq.n	8008bc4 <_free_r+0x8c>
 8008b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b44:	1f0c      	subs	r4, r1, #4
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bfb8      	it	lt
 8008b4a:	18e4      	addlt	r4, r4, r3
 8008b4c:	f7ff ffa4 	bl	8008a98 <__malloc_lock>
 8008b50:	4a1d      	ldr	r2, [pc, #116]	@ (8008bc8 <_free_r+0x90>)
 8008b52:	6813      	ldr	r3, [r2, #0]
 8008b54:	b933      	cbnz	r3, 8008b64 <_free_r+0x2c>
 8008b56:	6063      	str	r3, [r4, #4]
 8008b58:	6014      	str	r4, [r2, #0]
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b60:	f7ff bfa0 	b.w	8008aa4 <__malloc_unlock>
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	d908      	bls.n	8008b7a <_free_r+0x42>
 8008b68:	6820      	ldr	r0, [r4, #0]
 8008b6a:	1821      	adds	r1, r4, r0
 8008b6c:	428b      	cmp	r3, r1
 8008b6e:	bf01      	itttt	eq
 8008b70:	6819      	ldreq	r1, [r3, #0]
 8008b72:	685b      	ldreq	r3, [r3, #4]
 8008b74:	1809      	addeq	r1, r1, r0
 8008b76:	6021      	streq	r1, [r4, #0]
 8008b78:	e7ed      	b.n	8008b56 <_free_r+0x1e>
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	b10b      	cbz	r3, 8008b84 <_free_r+0x4c>
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d9fa      	bls.n	8008b7a <_free_r+0x42>
 8008b84:	6811      	ldr	r1, [r2, #0]
 8008b86:	1850      	adds	r0, r2, r1
 8008b88:	42a0      	cmp	r0, r4
 8008b8a:	d10b      	bne.n	8008ba4 <_free_r+0x6c>
 8008b8c:	6820      	ldr	r0, [r4, #0]
 8008b8e:	4401      	add	r1, r0
 8008b90:	1850      	adds	r0, r2, r1
 8008b92:	4283      	cmp	r3, r0
 8008b94:	6011      	str	r1, [r2, #0]
 8008b96:	d1e0      	bne.n	8008b5a <_free_r+0x22>
 8008b98:	6818      	ldr	r0, [r3, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	6053      	str	r3, [r2, #4]
 8008b9e:	4408      	add	r0, r1
 8008ba0:	6010      	str	r0, [r2, #0]
 8008ba2:	e7da      	b.n	8008b5a <_free_r+0x22>
 8008ba4:	d902      	bls.n	8008bac <_free_r+0x74>
 8008ba6:	230c      	movs	r3, #12
 8008ba8:	602b      	str	r3, [r5, #0]
 8008baa:	e7d6      	b.n	8008b5a <_free_r+0x22>
 8008bac:	6820      	ldr	r0, [r4, #0]
 8008bae:	1821      	adds	r1, r4, r0
 8008bb0:	428b      	cmp	r3, r1
 8008bb2:	bf04      	itt	eq
 8008bb4:	6819      	ldreq	r1, [r3, #0]
 8008bb6:	685b      	ldreq	r3, [r3, #4]
 8008bb8:	6063      	str	r3, [r4, #4]
 8008bba:	bf04      	itt	eq
 8008bbc:	1809      	addeq	r1, r1, r0
 8008bbe:	6021      	streq	r1, [r4, #0]
 8008bc0:	6054      	str	r4, [r2, #4]
 8008bc2:	e7ca      	b.n	8008b5a <_free_r+0x22>
 8008bc4:	bd38      	pop	{r3, r4, r5, pc}
 8008bc6:	bf00      	nop
 8008bc8:	20000958 	.word	0x20000958

08008bcc <_init>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	bf00      	nop
 8008bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd2:	bc08      	pop	{r3}
 8008bd4:	469e      	mov	lr, r3
 8008bd6:	4770      	bx	lr

08008bd8 <_fini>:
 8008bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bda:	bf00      	nop
 8008bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bde:	bc08      	pop	{r3}
 8008be0:	469e      	mov	lr, r3
 8008be2:	4770      	bx	lr
